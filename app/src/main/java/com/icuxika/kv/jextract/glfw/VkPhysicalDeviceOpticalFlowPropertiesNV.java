// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceOpticalFlowPropertiesNV {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
 *     VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
 *     VkBool32 hintSupported;
 *     VkBool32 costSupported;
 *     VkBool32 bidirectionalFlowSupported;
 *     VkBool32 globalFlowSupported;
 *     uint32_t minWidth;
 *     uint32_t minHeight;
 *     uint32_t maxWidth;
 *     uint32_t maxHeight;
 *     uint32_t maxNumRegionsOfInterest;
 * };
 * }
 */
public class VkPhysicalDeviceOpticalFlowPropertiesNV {

    public static MemoryLayout $LAYOUT() {
        return constants$1011.const$5;
    }
    public static VarHandle sType$VH() {
        return constants$1012.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$1012.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$1012.const$0.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$1012.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$1012.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$1012.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1012.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$1012.const$1.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1012.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1012.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedOutputGridSizes$VH() {
        return constants$1012.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
     * }
     */
    public static int supportedOutputGridSizes$get(MemorySegment seg) {
        return (int)constants$1012.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
     * }
     */
    public static void supportedOutputGridSizes$set(MemorySegment seg, int x) {
        constants$1012.const$2.set(seg, x);
    }
    public static int supportedOutputGridSizes$get(MemorySegment seg, long index) {
        return (int)constants$1012.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedOutputGridSizes$set(MemorySegment seg, long index, int x) {
        constants$1012.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedHintGridSizes$VH() {
        return constants$1012.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
     * }
     */
    public static int supportedHintGridSizes$get(MemorySegment seg) {
        return (int)constants$1012.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
     * }
     */
    public static void supportedHintGridSizes$set(MemorySegment seg, int x) {
        constants$1012.const$3.set(seg, x);
    }
    public static int supportedHintGridSizes$get(MemorySegment seg, long index) {
        return (int)constants$1012.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedHintGridSizes$set(MemorySegment seg, long index, int x) {
        constants$1012.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hintSupported$VH() {
        return constants$1012.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 hintSupported;
     * }
     */
    public static int hintSupported$get(MemorySegment seg) {
        return (int)constants$1012.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 hintSupported;
     * }
     */
    public static void hintSupported$set(MemorySegment seg, int x) {
        constants$1012.const$4.set(seg, x);
    }
    public static int hintSupported$get(MemorySegment seg, long index) {
        return (int)constants$1012.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hintSupported$set(MemorySegment seg, long index, int x) {
        constants$1012.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle costSupported$VH() {
        return constants$1012.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 costSupported;
     * }
     */
    public static int costSupported$get(MemorySegment seg) {
        return (int)constants$1012.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 costSupported;
     * }
     */
    public static void costSupported$set(MemorySegment seg, int x) {
        constants$1012.const$5.set(seg, x);
    }
    public static int costSupported$get(MemorySegment seg, long index) {
        return (int)constants$1012.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void costSupported$set(MemorySegment seg, long index, int x) {
        constants$1012.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bidirectionalFlowSupported$VH() {
        return constants$1013.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 bidirectionalFlowSupported;
     * }
     */
    public static int bidirectionalFlowSupported$get(MemorySegment seg) {
        return (int)constants$1013.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 bidirectionalFlowSupported;
     * }
     */
    public static void bidirectionalFlowSupported$set(MemorySegment seg, int x) {
        constants$1013.const$0.set(seg, x);
    }
    public static int bidirectionalFlowSupported$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bidirectionalFlowSupported$set(MemorySegment seg, long index, int x) {
        constants$1013.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle globalFlowSupported$VH() {
        return constants$1013.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 globalFlowSupported;
     * }
     */
    public static int globalFlowSupported$get(MemorySegment seg) {
        return (int)constants$1013.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 globalFlowSupported;
     * }
     */
    public static void globalFlowSupported$set(MemorySegment seg, int x) {
        constants$1013.const$1.set(seg, x);
    }
    public static int globalFlowSupported$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void globalFlowSupported$set(MemorySegment seg, long index, int x) {
        constants$1013.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minWidth$VH() {
        return constants$1013.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t minWidth;
     * }
     */
    public static int minWidth$get(MemorySegment seg) {
        return (int)constants$1013.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t minWidth;
     * }
     */
    public static void minWidth$set(MemorySegment seg, int x) {
        constants$1013.const$2.set(seg, x);
    }
    public static int minWidth$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void minWidth$set(MemorySegment seg, long index, int x) {
        constants$1013.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minHeight$VH() {
        return constants$1013.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t minHeight;
     * }
     */
    public static int minHeight$get(MemorySegment seg) {
        return (int)constants$1013.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t minHeight;
     * }
     */
    public static void minHeight$set(MemorySegment seg, int x) {
        constants$1013.const$3.set(seg, x);
    }
    public static int minHeight$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void minHeight$set(MemorySegment seg, long index, int x) {
        constants$1013.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxWidth$VH() {
        return constants$1013.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxWidth;
     * }
     */
    public static int maxWidth$get(MemorySegment seg) {
        return (int)constants$1013.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxWidth;
     * }
     */
    public static void maxWidth$set(MemorySegment seg, int x) {
        constants$1013.const$4.set(seg, x);
    }
    public static int maxWidth$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxWidth$set(MemorySegment seg, long index, int x) {
        constants$1013.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxHeight$VH() {
        return constants$1013.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxHeight;
     * }
     */
    public static int maxHeight$get(MemorySegment seg) {
        return (int)constants$1013.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxHeight;
     * }
     */
    public static void maxHeight$set(MemorySegment seg, int x) {
        constants$1013.const$5.set(seg, x);
    }
    public static int maxHeight$get(MemorySegment seg, long index) {
        return (int)constants$1013.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxHeight$set(MemorySegment seg, long index, int x) {
        constants$1013.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxNumRegionsOfInterest$VH() {
        return constants$1014.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxNumRegionsOfInterest;
     * }
     */
    public static int maxNumRegionsOfInterest$get(MemorySegment seg) {
        return (int)constants$1014.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxNumRegionsOfInterest;
     * }
     */
    public static void maxNumRegionsOfInterest$set(MemorySegment seg, int x) {
        constants$1014.const$0.set(seg, x);
    }
    public static int maxNumRegionsOfInterest$get(MemorySegment seg, long index) {
        return (int)constants$1014.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxNumRegionsOfInterest$set(MemorySegment seg, long index, int x) {
        constants$1014.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


