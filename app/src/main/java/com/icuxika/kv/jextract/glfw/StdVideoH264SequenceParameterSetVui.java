// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH264SequenceParameterSetVui {
 *     StdVideoH264SpsVuiFlags flags;
 *     StdVideoH264AspectRatioIdc aspect_ratio_idc;
 *     uint16_t sar_width;
 *     uint16_t sar_height;
 *     uint8_t video_format;
 *     uint8_t colour_primaries;
 *     uint8_t transfer_characteristics;
 *     uint8_t matrix_coefficients;
 *     uint32_t num_units_in_tick;
 *     uint32_t time_scale;
 *     uint8_t max_num_reorder_frames;
 *     uint8_t max_dec_frame_buffering;
 *     uint8_t chroma_sample_loc_type_top_field;
 *     uint8_t chroma_sample_loc_type_bottom_field;
 *     uint32_t reserved1;
 *     const StdVideoH264HrdParameters* pHrdParameters;
 * };
 * }
 */
public class StdVideoH264SequenceParameterSetVui {

    public static MemoryLayout $LAYOUT() {
        return constants$478.const$5;
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle aspect_ratio_idc$VH() {
        return constants$479.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * StdVideoH264AspectRatioIdc aspect_ratio_idc;
     * }
     */
    public static int aspect_ratio_idc$get(MemorySegment seg) {
        return (int)constants$479.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * StdVideoH264AspectRatioIdc aspect_ratio_idc;
     * }
     */
    public static void aspect_ratio_idc$set(MemorySegment seg, int x) {
        constants$479.const$0.set(seg, x);
    }
    public static int aspect_ratio_idc$get(MemorySegment seg, long index) {
        return (int)constants$479.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void aspect_ratio_idc$set(MemorySegment seg, long index, int x) {
        constants$479.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sar_width$VH() {
        return constants$479.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t sar_width;
     * }
     */
    public static short sar_width$get(MemorySegment seg) {
        return (short)constants$479.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t sar_width;
     * }
     */
    public static void sar_width$set(MemorySegment seg, short x) {
        constants$479.const$1.set(seg, x);
    }
    public static short sar_width$get(MemorySegment seg, long index) {
        return (short)constants$479.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sar_width$set(MemorySegment seg, long index, short x) {
        constants$479.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sar_height$VH() {
        return constants$479.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t sar_height;
     * }
     */
    public static short sar_height$get(MemorySegment seg) {
        return (short)constants$479.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t sar_height;
     * }
     */
    public static void sar_height$set(MemorySegment seg, short x) {
        constants$479.const$2.set(seg, x);
    }
    public static short sar_height$get(MemorySegment seg, long index) {
        return (short)constants$479.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sar_height$set(MemorySegment seg, long index, short x) {
        constants$479.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle video_format$VH() {
        return constants$479.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t video_format;
     * }
     */
    public static byte video_format$get(MemorySegment seg) {
        return (byte)constants$479.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t video_format;
     * }
     */
    public static void video_format$set(MemorySegment seg, byte x) {
        constants$479.const$3.set(seg, x);
    }
    public static byte video_format$get(MemorySegment seg, long index) {
        return (byte)constants$479.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void video_format$set(MemorySegment seg, long index, byte x) {
        constants$479.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colour_primaries$VH() {
        return constants$479.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t colour_primaries;
     * }
     */
    public static byte colour_primaries$get(MemorySegment seg) {
        return (byte)constants$479.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t colour_primaries;
     * }
     */
    public static void colour_primaries$set(MemorySegment seg, byte x) {
        constants$479.const$4.set(seg, x);
    }
    public static byte colour_primaries$get(MemorySegment seg, long index) {
        return (byte)constants$479.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void colour_primaries$set(MemorySegment seg, long index, byte x) {
        constants$479.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle transfer_characteristics$VH() {
        return constants$479.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t transfer_characteristics;
     * }
     */
    public static byte transfer_characteristics$get(MemorySegment seg) {
        return (byte)constants$479.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t transfer_characteristics;
     * }
     */
    public static void transfer_characteristics$set(MemorySegment seg, byte x) {
        constants$479.const$5.set(seg, x);
    }
    public static byte transfer_characteristics$get(MemorySegment seg, long index) {
        return (byte)constants$479.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void transfer_characteristics$set(MemorySegment seg, long index, byte x) {
        constants$479.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle matrix_coefficients$VH() {
        return constants$480.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t matrix_coefficients;
     * }
     */
    public static byte matrix_coefficients$get(MemorySegment seg) {
        return (byte)constants$480.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t matrix_coefficients;
     * }
     */
    public static void matrix_coefficients$set(MemorySegment seg, byte x) {
        constants$480.const$0.set(seg, x);
    }
    public static byte matrix_coefficients$get(MemorySegment seg, long index) {
        return (byte)constants$480.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void matrix_coefficients$set(MemorySegment seg, long index, byte x) {
        constants$480.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_units_in_tick$VH() {
        return constants$480.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_units_in_tick;
     * }
     */
    public static int num_units_in_tick$get(MemorySegment seg) {
        return (int)constants$480.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_units_in_tick;
     * }
     */
    public static void num_units_in_tick$set(MemorySegment seg, int x) {
        constants$480.const$1.set(seg, x);
    }
    public static int num_units_in_tick$get(MemorySegment seg, long index) {
        return (int)constants$480.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void num_units_in_tick$set(MemorySegment seg, long index, int x) {
        constants$480.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle time_scale$VH() {
        return constants$480.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t time_scale;
     * }
     */
    public static int time_scale$get(MemorySegment seg) {
        return (int)constants$480.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t time_scale;
     * }
     */
    public static void time_scale$set(MemorySegment seg, int x) {
        constants$480.const$2.set(seg, x);
    }
    public static int time_scale$get(MemorySegment seg, long index) {
        return (int)constants$480.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void time_scale$set(MemorySegment seg, long index, int x) {
        constants$480.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_num_reorder_frames$VH() {
        return constants$480.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t max_num_reorder_frames;
     * }
     */
    public static byte max_num_reorder_frames$get(MemorySegment seg) {
        return (byte)constants$480.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t max_num_reorder_frames;
     * }
     */
    public static void max_num_reorder_frames$set(MemorySegment seg, byte x) {
        constants$480.const$3.set(seg, x);
    }
    public static byte max_num_reorder_frames$get(MemorySegment seg, long index) {
        return (byte)constants$480.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_num_reorder_frames$set(MemorySegment seg, long index, byte x) {
        constants$480.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_dec_frame_buffering$VH() {
        return constants$480.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t max_dec_frame_buffering;
     * }
     */
    public static byte max_dec_frame_buffering$get(MemorySegment seg) {
        return (byte)constants$480.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t max_dec_frame_buffering;
     * }
     */
    public static void max_dec_frame_buffering$set(MemorySegment seg, byte x) {
        constants$480.const$4.set(seg, x);
    }
    public static byte max_dec_frame_buffering$get(MemorySegment seg, long index) {
        return (byte)constants$480.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void max_dec_frame_buffering$set(MemorySegment seg, long index, byte x) {
        constants$480.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_sample_loc_type_top_field$VH() {
        return constants$480.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t chroma_sample_loc_type_top_field;
     * }
     */
    public static byte chroma_sample_loc_type_top_field$get(MemorySegment seg) {
        return (byte)constants$480.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t chroma_sample_loc_type_top_field;
     * }
     */
    public static void chroma_sample_loc_type_top_field$set(MemorySegment seg, byte x) {
        constants$480.const$5.set(seg, x);
    }
    public static byte chroma_sample_loc_type_top_field$get(MemorySegment seg, long index) {
        return (byte)constants$480.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_sample_loc_type_top_field$set(MemorySegment seg, long index, byte x) {
        constants$480.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_sample_loc_type_bottom_field$VH() {
        return constants$481.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t chroma_sample_loc_type_bottom_field;
     * }
     */
    public static byte chroma_sample_loc_type_bottom_field$get(MemorySegment seg) {
        return (byte)constants$481.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t chroma_sample_loc_type_bottom_field;
     * }
     */
    public static void chroma_sample_loc_type_bottom_field$set(MemorySegment seg, byte x) {
        constants$481.const$0.set(seg, x);
    }
    public static byte chroma_sample_loc_type_bottom_field$get(MemorySegment seg, long index) {
        return (byte)constants$481.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_sample_loc_type_bottom_field$set(MemorySegment seg, long index, byte x) {
        constants$481.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$481.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t reserved1;
     * }
     */
    public static int reserved1$get(MemorySegment seg) {
        return (int)constants$481.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, int x) {
        constants$481.const$1.set(seg, x);
    }
    public static int reserved1$get(MemorySegment seg, long index) {
        return (int)constants$481.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, int x) {
        constants$481.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pHrdParameters$VH() {
        return constants$481.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH264HrdParameters* pHrdParameters;
     * }
     */
    public static MemorySegment pHrdParameters$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$481.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH264HrdParameters* pHrdParameters;
     * }
     */
    public static void pHrdParameters$set(MemorySegment seg, MemorySegment x) {
        constants$481.const$2.set(seg, x);
    }
    public static MemorySegment pHrdParameters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$481.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pHrdParameters$set(MemorySegment seg, long index, MemorySegment x) {
        constants$481.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


