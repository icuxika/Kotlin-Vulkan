// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceFeatures {
 *     VkBool32 robustBufferAccess;
 *     VkBool32 fullDrawIndexUint32;
 *     VkBool32 imageCubeArray;
 *     VkBool32 independentBlend;
 *     VkBool32 geometryShader;
 *     VkBool32 tessellationShader;
 *     VkBool32 sampleRateShading;
 *     VkBool32 dualSrcBlend;
 *     VkBool32 logicOp;
 *     VkBool32 multiDrawIndirect;
 *     VkBool32 drawIndirectFirstInstance;
 *     VkBool32 depthClamp;
 *     VkBool32 depthBiasClamp;
 *     VkBool32 fillModeNonSolid;
 *     VkBool32 depthBounds;
 *     VkBool32 wideLines;
 *     VkBool32 largePoints;
 *     VkBool32 alphaToOne;
 *     VkBool32 multiViewport;
 *     VkBool32 samplerAnisotropy;
 *     VkBool32 textureCompressionETC2;
 *     VkBool32 textureCompressionASTC_LDR;
 *     VkBool32 textureCompressionBC;
 *     VkBool32 occlusionQueryPrecise;
 *     VkBool32 pipelineStatisticsQuery;
 *     VkBool32 vertexPipelineStoresAndAtomics;
 *     VkBool32 fragmentStoresAndAtomics;
 *     VkBool32 shaderTessellationAndGeometryPointSize;
 *     VkBool32 shaderImageGatherExtended;
 *     VkBool32 shaderStorageImageExtendedFormats;
 *     VkBool32 shaderStorageImageMultisample;
 *     VkBool32 shaderStorageImageReadWithoutFormat;
 *     VkBool32 shaderStorageImageWriteWithoutFormat;
 *     VkBool32 shaderUniformBufferArrayDynamicIndexing;
 *     VkBool32 shaderSampledImageArrayDynamicIndexing;
 *     VkBool32 shaderStorageBufferArrayDynamicIndexing;
 *     VkBool32 shaderStorageImageArrayDynamicIndexing;
 *     VkBool32 shaderClipDistance;
 *     VkBool32 shaderCullDistance;
 *     VkBool32 shaderFloat64;
 *     VkBool32 shaderInt64;
 *     VkBool32 shaderInt16;
 *     VkBool32 shaderResourceResidency;
 *     VkBool32 shaderResourceMinLod;
 *     VkBool32 sparseBinding;
 *     VkBool32 sparseResidencyBuffer;
 *     VkBool32 sparseResidencyImage2D;
 *     VkBool32 sparseResidencyImage3D;
 *     VkBool32 sparseResidency2Samples;
 *     VkBool32 sparseResidency4Samples;
 *     VkBool32 sparseResidency8Samples;
 *     VkBool32 sparseResidency16Samples;
 *     VkBool32 sparseResidencyAliased;
 *     VkBool32 variableMultisampleRate;
 *     VkBool32 inheritedQueries;
 * };
 * }
 */
public class VkPhysicalDeviceFeatures {

    public static MemoryLayout $LAYOUT() {
        return constants$22.const$3;
    }
    public static VarHandle robustBufferAccess$VH() {
        return constants$22.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 robustBufferAccess;
     * }
     */
    public static int robustBufferAccess$get(MemorySegment seg) {
        return (int)constants$22.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 robustBufferAccess;
     * }
     */
    public static void robustBufferAccess$set(MemorySegment seg, int x) {
        constants$22.const$4.set(seg, x);
    }
    public static int robustBufferAccess$get(MemorySegment seg, long index) {
        return (int)constants$22.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void robustBufferAccess$set(MemorySegment seg, long index, int x) {
        constants$22.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fullDrawIndexUint32$VH() {
        return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fullDrawIndexUint32;
     * }
     */
    public static int fullDrawIndexUint32$get(MemorySegment seg) {
        return (int)constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fullDrawIndexUint32;
     * }
     */
    public static void fullDrawIndexUint32$set(MemorySegment seg, int x) {
        constants$22.const$5.set(seg, x);
    }
    public static int fullDrawIndexUint32$get(MemorySegment seg, long index) {
        return (int)constants$22.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fullDrawIndexUint32$set(MemorySegment seg, long index, int x) {
        constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imageCubeArray$VH() {
        return constants$23.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 imageCubeArray;
     * }
     */
    public static int imageCubeArray$get(MemorySegment seg) {
        return (int)constants$23.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 imageCubeArray;
     * }
     */
    public static void imageCubeArray$set(MemorySegment seg, int x) {
        constants$23.const$0.set(seg, x);
    }
    public static int imageCubeArray$get(MemorySegment seg, long index) {
        return (int)constants$23.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void imageCubeArray$set(MemorySegment seg, long index, int x) {
        constants$23.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle independentBlend$VH() {
        return constants$23.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 independentBlend;
     * }
     */
    public static int independentBlend$get(MemorySegment seg) {
        return (int)constants$23.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 independentBlend;
     * }
     */
    public static void independentBlend$set(MemorySegment seg, int x) {
        constants$23.const$1.set(seg, x);
    }
    public static int independentBlend$get(MemorySegment seg, long index) {
        return (int)constants$23.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void independentBlend$set(MemorySegment seg, long index, int x) {
        constants$23.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle geometryShader$VH() {
        return constants$23.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 geometryShader;
     * }
     */
    public static int geometryShader$get(MemorySegment seg) {
        return (int)constants$23.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 geometryShader;
     * }
     */
    public static void geometryShader$set(MemorySegment seg, int x) {
        constants$23.const$2.set(seg, x);
    }
    public static int geometryShader$get(MemorySegment seg, long index) {
        return (int)constants$23.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void geometryShader$set(MemorySegment seg, long index, int x) {
        constants$23.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tessellationShader$VH() {
        return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 tessellationShader;
     * }
     */
    public static int tessellationShader$get(MemorySegment seg) {
        return (int)constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 tessellationShader;
     * }
     */
    public static void tessellationShader$set(MemorySegment seg, int x) {
        constants$23.const$3.set(seg, x);
    }
    public static int tessellationShader$get(MemorySegment seg, long index) {
        return (int)constants$23.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tessellationShader$set(MemorySegment seg, long index, int x) {
        constants$23.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sampleRateShading$VH() {
        return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sampleRateShading;
     * }
     */
    public static int sampleRateShading$get(MemorySegment seg) {
        return (int)constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sampleRateShading;
     * }
     */
    public static void sampleRateShading$set(MemorySegment seg, int x) {
        constants$23.const$4.set(seg, x);
    }
    public static int sampleRateShading$get(MemorySegment seg, long index) {
        return (int)constants$23.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sampleRateShading$set(MemorySegment seg, long index, int x) {
        constants$23.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dualSrcBlend$VH() {
        return constants$23.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 dualSrcBlend;
     * }
     */
    public static int dualSrcBlend$get(MemorySegment seg) {
        return (int)constants$23.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 dualSrcBlend;
     * }
     */
    public static void dualSrcBlend$set(MemorySegment seg, int x) {
        constants$23.const$5.set(seg, x);
    }
    public static int dualSrcBlend$get(MemorySegment seg, long index) {
        return (int)constants$23.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dualSrcBlend$set(MemorySegment seg, long index, int x) {
        constants$23.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logicOp$VH() {
        return constants$24.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 logicOp;
     * }
     */
    public static int logicOp$get(MemorySegment seg) {
        return (int)constants$24.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 logicOp;
     * }
     */
    public static void logicOp$set(MemorySegment seg, int x) {
        constants$24.const$0.set(seg, x);
    }
    public static int logicOp$get(MemorySegment seg, long index) {
        return (int)constants$24.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void logicOp$set(MemorySegment seg, long index, int x) {
        constants$24.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle multiDrawIndirect$VH() {
        return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 multiDrawIndirect;
     * }
     */
    public static int multiDrawIndirect$get(MemorySegment seg) {
        return (int)constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 multiDrawIndirect;
     * }
     */
    public static void multiDrawIndirect$set(MemorySegment seg, int x) {
        constants$24.const$1.set(seg, x);
    }
    public static int multiDrawIndirect$get(MemorySegment seg, long index) {
        return (int)constants$24.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void multiDrawIndirect$set(MemorySegment seg, long index, int x) {
        constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle drawIndirectFirstInstance$VH() {
        return constants$24.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 drawIndirectFirstInstance;
     * }
     */
    public static int drawIndirectFirstInstance$get(MemorySegment seg) {
        return (int)constants$24.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 drawIndirectFirstInstance;
     * }
     */
    public static void drawIndirectFirstInstance$set(MemorySegment seg, int x) {
        constants$24.const$2.set(seg, x);
    }
    public static int drawIndirectFirstInstance$get(MemorySegment seg, long index) {
        return (int)constants$24.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drawIndirectFirstInstance$set(MemorySegment seg, long index, int x) {
        constants$24.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthClamp$VH() {
        return constants$24.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthClamp;
     * }
     */
    public static int depthClamp$get(MemorySegment seg) {
        return (int)constants$24.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthClamp;
     * }
     */
    public static void depthClamp$set(MemorySegment seg, int x) {
        constants$24.const$3.set(seg, x);
    }
    public static int depthClamp$get(MemorySegment seg, long index) {
        return (int)constants$24.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void depthClamp$set(MemorySegment seg, long index, int x) {
        constants$24.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBiasClamp$VH() {
        return constants$24.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthBiasClamp;
     * }
     */
    public static int depthBiasClamp$get(MemorySegment seg) {
        return (int)constants$24.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthBiasClamp;
     * }
     */
    public static void depthBiasClamp$set(MemorySegment seg, int x) {
        constants$24.const$4.set(seg, x);
    }
    public static int depthBiasClamp$get(MemorySegment seg, long index) {
        return (int)constants$24.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBiasClamp$set(MemorySegment seg, long index, int x) {
        constants$24.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fillModeNonSolid$VH() {
        return constants$24.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fillModeNonSolid;
     * }
     */
    public static int fillModeNonSolid$get(MemorySegment seg) {
        return (int)constants$24.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fillModeNonSolid;
     * }
     */
    public static void fillModeNonSolid$set(MemorySegment seg, int x) {
        constants$24.const$5.set(seg, x);
    }
    public static int fillModeNonSolid$get(MemorySegment seg, long index) {
        return (int)constants$24.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fillModeNonSolid$set(MemorySegment seg, long index, int x) {
        constants$24.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBounds$VH() {
        return constants$25.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthBounds;
     * }
     */
    public static int depthBounds$get(MemorySegment seg) {
        return (int)constants$25.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthBounds;
     * }
     */
    public static void depthBounds$set(MemorySegment seg, int x) {
        constants$25.const$0.set(seg, x);
    }
    public static int depthBounds$get(MemorySegment seg, long index) {
        return (int)constants$25.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBounds$set(MemorySegment seg, long index, int x) {
        constants$25.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wideLines$VH() {
        return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 wideLines;
     * }
     */
    public static int wideLines$get(MemorySegment seg) {
        return (int)constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 wideLines;
     * }
     */
    public static void wideLines$set(MemorySegment seg, int x) {
        constants$25.const$1.set(seg, x);
    }
    public static int wideLines$get(MemorySegment seg, long index) {
        return (int)constants$25.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void wideLines$set(MemorySegment seg, long index, int x) {
        constants$25.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle largePoints$VH() {
        return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 largePoints;
     * }
     */
    public static int largePoints$get(MemorySegment seg) {
        return (int)constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 largePoints;
     * }
     */
    public static void largePoints$set(MemorySegment seg, int x) {
        constants$25.const$2.set(seg, x);
    }
    public static int largePoints$get(MemorySegment seg, long index) {
        return (int)constants$25.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void largePoints$set(MemorySegment seg, long index, int x) {
        constants$25.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle alphaToOne$VH() {
        return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 alphaToOne;
     * }
     */
    public static int alphaToOne$get(MemorySegment seg) {
        return (int)constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 alphaToOne;
     * }
     */
    public static void alphaToOne$set(MemorySegment seg, int x) {
        constants$25.const$3.set(seg, x);
    }
    public static int alphaToOne$get(MemorySegment seg, long index) {
        return (int)constants$25.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void alphaToOne$set(MemorySegment seg, long index, int x) {
        constants$25.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle multiViewport$VH() {
        return constants$25.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 multiViewport;
     * }
     */
    public static int multiViewport$get(MemorySegment seg) {
        return (int)constants$25.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 multiViewport;
     * }
     */
    public static void multiViewport$set(MemorySegment seg, int x) {
        constants$25.const$4.set(seg, x);
    }
    public static int multiViewport$get(MemorySegment seg, long index) {
        return (int)constants$25.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void multiViewport$set(MemorySegment seg, long index, int x) {
        constants$25.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samplerAnisotropy$VH() {
        return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 samplerAnisotropy;
     * }
     */
    public static int samplerAnisotropy$get(MemorySegment seg) {
        return (int)constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 samplerAnisotropy;
     * }
     */
    public static void samplerAnisotropy$set(MemorySegment seg, int x) {
        constants$25.const$5.set(seg, x);
    }
    public static int samplerAnisotropy$get(MemorySegment seg, long index) {
        return (int)constants$25.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void samplerAnisotropy$set(MemorySegment seg, long index, int x) {
        constants$25.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle textureCompressionETC2$VH() {
        return constants$26.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 textureCompressionETC2;
     * }
     */
    public static int textureCompressionETC2$get(MemorySegment seg) {
        return (int)constants$26.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 textureCompressionETC2;
     * }
     */
    public static void textureCompressionETC2$set(MemorySegment seg, int x) {
        constants$26.const$0.set(seg, x);
    }
    public static int textureCompressionETC2$get(MemorySegment seg, long index) {
        return (int)constants$26.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void textureCompressionETC2$set(MemorySegment seg, long index, int x) {
        constants$26.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle textureCompressionASTC_LDR$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 textureCompressionASTC_LDR;
     * }
     */
    public static int textureCompressionASTC_LDR$get(MemorySegment seg) {
        return (int)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 textureCompressionASTC_LDR;
     * }
     */
    public static void textureCompressionASTC_LDR$set(MemorySegment seg, int x) {
        constants$26.const$1.set(seg, x);
    }
    public static int textureCompressionASTC_LDR$get(MemorySegment seg, long index) {
        return (int)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void textureCompressionASTC_LDR$set(MemorySegment seg, long index, int x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle textureCompressionBC$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 textureCompressionBC;
     * }
     */
    public static int textureCompressionBC$get(MemorySegment seg) {
        return (int)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 textureCompressionBC;
     * }
     */
    public static void textureCompressionBC$set(MemorySegment seg, int x) {
        constants$26.const$2.set(seg, x);
    }
    public static int textureCompressionBC$get(MemorySegment seg, long index) {
        return (int)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void textureCompressionBC$set(MemorySegment seg, long index, int x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle occlusionQueryPrecise$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 occlusionQueryPrecise;
     * }
     */
    public static int occlusionQueryPrecise$get(MemorySegment seg) {
        return (int)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 occlusionQueryPrecise;
     * }
     */
    public static void occlusionQueryPrecise$set(MemorySegment seg, int x) {
        constants$26.const$3.set(seg, x);
    }
    public static int occlusionQueryPrecise$get(MemorySegment seg, long index) {
        return (int)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void occlusionQueryPrecise$set(MemorySegment seg, long index, int x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pipelineStatisticsQuery$VH() {
        return constants$26.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 pipelineStatisticsQuery;
     * }
     */
    public static int pipelineStatisticsQuery$get(MemorySegment seg) {
        return (int)constants$26.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 pipelineStatisticsQuery;
     * }
     */
    public static void pipelineStatisticsQuery$set(MemorySegment seg, int x) {
        constants$26.const$4.set(seg, x);
    }
    public static int pipelineStatisticsQuery$get(MemorySegment seg, long index) {
        return (int)constants$26.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pipelineStatisticsQuery$set(MemorySegment seg, long index, int x) {
        constants$26.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexPipelineStoresAndAtomics$VH() {
        return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 vertexPipelineStoresAndAtomics;
     * }
     */
    public static int vertexPipelineStoresAndAtomics$get(MemorySegment seg) {
        return (int)constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 vertexPipelineStoresAndAtomics;
     * }
     */
    public static void vertexPipelineStoresAndAtomics$set(MemorySegment seg, int x) {
        constants$26.const$5.set(seg, x);
    }
    public static int vertexPipelineStoresAndAtomics$get(MemorySegment seg, long index) {
        return (int)constants$26.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexPipelineStoresAndAtomics$set(MemorySegment seg, long index, int x) {
        constants$26.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentStoresAndAtomics$VH() {
        return constants$27.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentStoresAndAtomics;
     * }
     */
    public static int fragmentStoresAndAtomics$get(MemorySegment seg) {
        return (int)constants$27.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentStoresAndAtomics;
     * }
     */
    public static void fragmentStoresAndAtomics$set(MemorySegment seg, int x) {
        constants$27.const$0.set(seg, x);
    }
    public static int fragmentStoresAndAtomics$get(MemorySegment seg, long index) {
        return (int)constants$27.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentStoresAndAtomics$set(MemorySegment seg, long index, int x) {
        constants$27.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderTessellationAndGeometryPointSize$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderTessellationAndGeometryPointSize;
     * }
     */
    public static int shaderTessellationAndGeometryPointSize$get(MemorySegment seg) {
        return (int)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderTessellationAndGeometryPointSize;
     * }
     */
    public static void shaderTessellationAndGeometryPointSize$set(MemorySegment seg, int x) {
        constants$27.const$1.set(seg, x);
    }
    public static int shaderTessellationAndGeometryPointSize$get(MemorySegment seg, long index) {
        return (int)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderTessellationAndGeometryPointSize$set(MemorySegment seg, long index, int x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderImageGatherExtended$VH() {
        return constants$27.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderImageGatherExtended;
     * }
     */
    public static int shaderImageGatherExtended$get(MemorySegment seg) {
        return (int)constants$27.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderImageGatherExtended;
     * }
     */
    public static void shaderImageGatherExtended$set(MemorySegment seg, int x) {
        constants$27.const$2.set(seg, x);
    }
    public static int shaderImageGatherExtended$get(MemorySegment seg, long index) {
        return (int)constants$27.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderImageGatherExtended$set(MemorySegment seg, long index, int x) {
        constants$27.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageExtendedFormats$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageExtendedFormats;
     * }
     */
    public static int shaderStorageImageExtendedFormats$get(MemorySegment seg) {
        return (int)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageExtendedFormats;
     * }
     */
    public static void shaderStorageImageExtendedFormats$set(MemorySegment seg, int x) {
        constants$27.const$3.set(seg, x);
    }
    public static int shaderStorageImageExtendedFormats$get(MemorySegment seg, long index) {
        return (int)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageExtendedFormats$set(MemorySegment seg, long index, int x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageMultisample$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageMultisample;
     * }
     */
    public static int shaderStorageImageMultisample$get(MemorySegment seg) {
        return (int)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageMultisample;
     * }
     */
    public static void shaderStorageImageMultisample$set(MemorySegment seg, int x) {
        constants$27.const$4.set(seg, x);
    }
    public static int shaderStorageImageMultisample$get(MemorySegment seg, long index) {
        return (int)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageMultisample$set(MemorySegment seg, long index, int x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageReadWithoutFormat$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageReadWithoutFormat;
     * }
     */
    public static int shaderStorageImageReadWithoutFormat$get(MemorySegment seg) {
        return (int)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageReadWithoutFormat;
     * }
     */
    public static void shaderStorageImageReadWithoutFormat$set(MemorySegment seg, int x) {
        constants$27.const$5.set(seg, x);
    }
    public static int shaderStorageImageReadWithoutFormat$get(MemorySegment seg, long index) {
        return (int)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageReadWithoutFormat$set(MemorySegment seg, long index, int x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageWriteWithoutFormat$VH() {
        return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageWriteWithoutFormat;
     * }
     */
    public static int shaderStorageImageWriteWithoutFormat$get(MemorySegment seg) {
        return (int)constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageWriteWithoutFormat;
     * }
     */
    public static void shaderStorageImageWriteWithoutFormat$set(MemorySegment seg, int x) {
        constants$28.const$0.set(seg, x);
    }
    public static int shaderStorageImageWriteWithoutFormat$get(MemorySegment seg, long index) {
        return (int)constants$28.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageWriteWithoutFormat$set(MemorySegment seg, long index, int x) {
        constants$28.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderUniformBufferArrayDynamicIndexing$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing;
     * }
     */
    public static int shaderUniformBufferArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing;
     * }
     */
    public static void shaderUniformBufferArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$28.const$1.set(seg, x);
    }
    public static int shaderUniformBufferArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderUniformBufferArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSampledImageArrayDynamicIndexing$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayDynamicIndexing;
     * }
     */
    public static int shaderSampledImageArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayDynamicIndexing;
     * }
     */
    public static void shaderSampledImageArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$28.const$2.set(seg, x);
    }
    public static int shaderSampledImageArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSampledImageArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageBufferArrayDynamicIndexing$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing;
     * }
     */
    public static int shaderStorageBufferArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing;
     * }
     */
    public static void shaderStorageBufferArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$28.const$3.set(seg, x);
    }
    public static int shaderStorageBufferArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageBufferArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageArrayDynamicIndexing$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayDynamicIndexing;
     * }
     */
    public static int shaderStorageImageArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayDynamicIndexing;
     * }
     */
    public static void shaderStorageImageArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$28.const$4.set(seg, x);
    }
    public static int shaderStorageImageArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderClipDistance$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderClipDistance;
     * }
     */
    public static int shaderClipDistance$get(MemorySegment seg) {
        return (int)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderClipDistance;
     * }
     */
    public static void shaderClipDistance$set(MemorySegment seg, int x) {
        constants$28.const$5.set(seg, x);
    }
    public static int shaderClipDistance$get(MemorySegment seg, long index) {
        return (int)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderClipDistance$set(MemorySegment seg, long index, int x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderCullDistance$VH() {
        return constants$29.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderCullDistance;
     * }
     */
    public static int shaderCullDistance$get(MemorySegment seg) {
        return (int)constants$29.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderCullDistance;
     * }
     */
    public static void shaderCullDistance$set(MemorySegment seg, int x) {
        constants$29.const$0.set(seg, x);
    }
    public static int shaderCullDistance$get(MemorySegment seg, long index) {
        return (int)constants$29.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderCullDistance$set(MemorySegment seg, long index, int x) {
        constants$29.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderFloat64$VH() {
        return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderFloat64;
     * }
     */
    public static int shaderFloat64$get(MemorySegment seg) {
        return (int)constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderFloat64;
     * }
     */
    public static void shaderFloat64$set(MemorySegment seg, int x) {
        constants$29.const$1.set(seg, x);
    }
    public static int shaderFloat64$get(MemorySegment seg, long index) {
        return (int)constants$29.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderFloat64$set(MemorySegment seg, long index, int x) {
        constants$29.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInt64$VH() {
        return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInt64;
     * }
     */
    public static int shaderInt64$get(MemorySegment seg) {
        return (int)constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInt64;
     * }
     */
    public static void shaderInt64$set(MemorySegment seg, int x) {
        constants$29.const$2.set(seg, x);
    }
    public static int shaderInt64$get(MemorySegment seg, long index) {
        return (int)constants$29.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInt64$set(MemorySegment seg, long index, int x) {
        constants$29.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInt16$VH() {
        return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInt16;
     * }
     */
    public static int shaderInt16$get(MemorySegment seg) {
        return (int)constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInt16;
     * }
     */
    public static void shaderInt16$set(MemorySegment seg, int x) {
        constants$29.const$3.set(seg, x);
    }
    public static int shaderInt16$get(MemorySegment seg, long index) {
        return (int)constants$29.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInt16$set(MemorySegment seg, long index, int x) {
        constants$29.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderResourceResidency$VH() {
        return constants$29.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderResourceResidency;
     * }
     */
    public static int shaderResourceResidency$get(MemorySegment seg) {
        return (int)constants$29.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderResourceResidency;
     * }
     */
    public static void shaderResourceResidency$set(MemorySegment seg, int x) {
        constants$29.const$4.set(seg, x);
    }
    public static int shaderResourceResidency$get(MemorySegment seg, long index) {
        return (int)constants$29.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderResourceResidency$set(MemorySegment seg, long index, int x) {
        constants$29.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderResourceMinLod$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderResourceMinLod;
     * }
     */
    public static int shaderResourceMinLod$get(MemorySegment seg) {
        return (int)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderResourceMinLod;
     * }
     */
    public static void shaderResourceMinLod$set(MemorySegment seg, int x) {
        constants$29.const$5.set(seg, x);
    }
    public static int shaderResourceMinLod$get(MemorySegment seg, long index) {
        return (int)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderResourceMinLod$set(MemorySegment seg, long index, int x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseBinding$VH() {
        return constants$30.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseBinding;
     * }
     */
    public static int sparseBinding$get(MemorySegment seg) {
        return (int)constants$30.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseBinding;
     * }
     */
    public static void sparseBinding$set(MemorySegment seg, int x) {
        constants$30.const$0.set(seg, x);
    }
    public static int sparseBinding$get(MemorySegment seg, long index) {
        return (int)constants$30.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseBinding$set(MemorySegment seg, long index, int x) {
        constants$30.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidencyBuffer$VH() {
        return constants$30.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidencyBuffer;
     * }
     */
    public static int sparseResidencyBuffer$get(MemorySegment seg) {
        return (int)constants$30.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidencyBuffer;
     * }
     */
    public static void sparseResidencyBuffer$set(MemorySegment seg, int x) {
        constants$30.const$1.set(seg, x);
    }
    public static int sparseResidencyBuffer$get(MemorySegment seg, long index) {
        return (int)constants$30.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidencyBuffer$set(MemorySegment seg, long index, int x) {
        constants$30.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidencyImage2D$VH() {
        return constants$30.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidencyImage2D;
     * }
     */
    public static int sparseResidencyImage2D$get(MemorySegment seg) {
        return (int)constants$30.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidencyImage2D;
     * }
     */
    public static void sparseResidencyImage2D$set(MemorySegment seg, int x) {
        constants$30.const$2.set(seg, x);
    }
    public static int sparseResidencyImage2D$get(MemorySegment seg, long index) {
        return (int)constants$30.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidencyImage2D$set(MemorySegment seg, long index, int x) {
        constants$30.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidencyImage3D$VH() {
        return constants$30.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidencyImage3D;
     * }
     */
    public static int sparseResidencyImage3D$get(MemorySegment seg) {
        return (int)constants$30.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidencyImage3D;
     * }
     */
    public static void sparseResidencyImage3D$set(MemorySegment seg, int x) {
        constants$30.const$3.set(seg, x);
    }
    public static int sparseResidencyImage3D$get(MemorySegment seg, long index) {
        return (int)constants$30.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidencyImage3D$set(MemorySegment seg, long index, int x) {
        constants$30.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidency2Samples$VH() {
        return constants$30.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidency2Samples;
     * }
     */
    public static int sparseResidency2Samples$get(MemorySegment seg) {
        return (int)constants$30.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidency2Samples;
     * }
     */
    public static void sparseResidency2Samples$set(MemorySegment seg, int x) {
        constants$30.const$4.set(seg, x);
    }
    public static int sparseResidency2Samples$get(MemorySegment seg, long index) {
        return (int)constants$30.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidency2Samples$set(MemorySegment seg, long index, int x) {
        constants$30.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidency4Samples$VH() {
        return constants$30.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidency4Samples;
     * }
     */
    public static int sparseResidency4Samples$get(MemorySegment seg) {
        return (int)constants$30.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidency4Samples;
     * }
     */
    public static void sparseResidency4Samples$set(MemorySegment seg, int x) {
        constants$30.const$5.set(seg, x);
    }
    public static int sparseResidency4Samples$get(MemorySegment seg, long index) {
        return (int)constants$30.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidency4Samples$set(MemorySegment seg, long index, int x) {
        constants$30.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidency8Samples$VH() {
        return constants$31.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidency8Samples;
     * }
     */
    public static int sparseResidency8Samples$get(MemorySegment seg) {
        return (int)constants$31.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidency8Samples;
     * }
     */
    public static void sparseResidency8Samples$set(MemorySegment seg, int x) {
        constants$31.const$0.set(seg, x);
    }
    public static int sparseResidency8Samples$get(MemorySegment seg, long index) {
        return (int)constants$31.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidency8Samples$set(MemorySegment seg, long index, int x) {
        constants$31.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidency16Samples$VH() {
        return constants$31.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidency16Samples;
     * }
     */
    public static int sparseResidency16Samples$get(MemorySegment seg) {
        return (int)constants$31.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidency16Samples;
     * }
     */
    public static void sparseResidency16Samples$set(MemorySegment seg, int x) {
        constants$31.const$1.set(seg, x);
    }
    public static int sparseResidency16Samples$get(MemorySegment seg, long index) {
        return (int)constants$31.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidency16Samples$set(MemorySegment seg, long index, int x) {
        constants$31.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseResidencyAliased$VH() {
        return constants$31.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 sparseResidencyAliased;
     * }
     */
    public static int sparseResidencyAliased$get(MemorySegment seg) {
        return (int)constants$31.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 sparseResidencyAliased;
     * }
     */
    public static void sparseResidencyAliased$set(MemorySegment seg, int x) {
        constants$31.const$2.set(seg, x);
    }
    public static int sparseResidencyAliased$get(MemorySegment seg, long index) {
        return (int)constants$31.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseResidencyAliased$set(MemorySegment seg, long index, int x) {
        constants$31.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle variableMultisampleRate$VH() {
        return constants$31.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 variableMultisampleRate;
     * }
     */
    public static int variableMultisampleRate$get(MemorySegment seg) {
        return (int)constants$31.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 variableMultisampleRate;
     * }
     */
    public static void variableMultisampleRate$set(MemorySegment seg, int x) {
        constants$31.const$3.set(seg, x);
    }
    public static int variableMultisampleRate$get(MemorySegment seg, long index) {
        return (int)constants$31.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void variableMultisampleRate$set(MemorySegment seg, long index, int x) {
        constants$31.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle inheritedQueries$VH() {
        return constants$31.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 inheritedQueries;
     * }
     */
    public static int inheritedQueries$get(MemorySegment seg) {
        return (int)constants$31.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 inheritedQueries;
     * }
     */
    public static void inheritedQueries$set(MemorySegment seg, int x) {
        constants$31.const$4.set(seg, x);
    }
    public static int inheritedQueries$get(MemorySegment seg, long index) {
        return (int)constants$31.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void inheritedQueries$set(MemorySegment seg, long index, int x) {
        constants$31.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


