// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkTraceRaysIndirectCommand2KHR {
 *     VkDeviceAddress raygenShaderRecordAddress;
 *     VkDeviceSize raygenShaderRecordSize;
 *     VkDeviceAddress missShaderBindingTableAddress;
 *     VkDeviceSize missShaderBindingTableSize;
 *     VkDeviceSize missShaderBindingTableStride;
 *     VkDeviceAddress hitShaderBindingTableAddress;
 *     VkDeviceSize hitShaderBindingTableSize;
 *     VkDeviceSize hitShaderBindingTableStride;
 *     VkDeviceAddress callableShaderBindingTableAddress;
 *     VkDeviceSize callableShaderBindingTableSize;
 *     VkDeviceSize callableShaderBindingTableStride;
 *     uint32_t width;
 *     uint32_t height;
 *     uint32_t depth;
 * };
 * }
 */
public class VkTraceRaysIndirectCommand2KHR {

    public static MemoryLayout $LAYOUT() {
        return constants$607.const$4;
    }
    public static VarHandle raygenShaderRecordAddress$VH() {
        return constants$607.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress raygenShaderRecordAddress;
     * }
     */
    public static long raygenShaderRecordAddress$get(MemorySegment seg) {
        return (long)constants$607.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress raygenShaderRecordAddress;
     * }
     */
    public static void raygenShaderRecordAddress$set(MemorySegment seg, long x) {
        constants$607.const$5.set(seg, x);
    }
    public static long raygenShaderRecordAddress$get(MemorySegment seg, long index) {
        return (long)constants$607.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void raygenShaderRecordAddress$set(MemorySegment seg, long index, long x) {
        constants$607.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raygenShaderRecordSize$VH() {
        return constants$608.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize raygenShaderRecordSize;
     * }
     */
    public static long raygenShaderRecordSize$get(MemorySegment seg) {
        return (long)constants$608.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize raygenShaderRecordSize;
     * }
     */
    public static void raygenShaderRecordSize$set(MemorySegment seg, long x) {
        constants$608.const$0.set(seg, x);
    }
    public static long raygenShaderRecordSize$get(MemorySegment seg, long index) {
        return (long)constants$608.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void raygenShaderRecordSize$set(MemorySegment seg, long index, long x) {
        constants$608.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle missShaderBindingTableAddress$VH() {
        return constants$608.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress missShaderBindingTableAddress;
     * }
     */
    public static long missShaderBindingTableAddress$get(MemorySegment seg) {
        return (long)constants$608.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress missShaderBindingTableAddress;
     * }
     */
    public static void missShaderBindingTableAddress$set(MemorySegment seg, long x) {
        constants$608.const$1.set(seg, x);
    }
    public static long missShaderBindingTableAddress$get(MemorySegment seg, long index) {
        return (long)constants$608.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void missShaderBindingTableAddress$set(MemorySegment seg, long index, long x) {
        constants$608.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle missShaderBindingTableSize$VH() {
        return constants$608.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize missShaderBindingTableSize;
     * }
     */
    public static long missShaderBindingTableSize$get(MemorySegment seg) {
        return (long)constants$608.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize missShaderBindingTableSize;
     * }
     */
    public static void missShaderBindingTableSize$set(MemorySegment seg, long x) {
        constants$608.const$2.set(seg, x);
    }
    public static long missShaderBindingTableSize$get(MemorySegment seg, long index) {
        return (long)constants$608.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void missShaderBindingTableSize$set(MemorySegment seg, long index, long x) {
        constants$608.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle missShaderBindingTableStride$VH() {
        return constants$608.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize missShaderBindingTableStride;
     * }
     */
    public static long missShaderBindingTableStride$get(MemorySegment seg) {
        return (long)constants$608.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize missShaderBindingTableStride;
     * }
     */
    public static void missShaderBindingTableStride$set(MemorySegment seg, long x) {
        constants$608.const$3.set(seg, x);
    }
    public static long missShaderBindingTableStride$get(MemorySegment seg, long index) {
        return (long)constants$608.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void missShaderBindingTableStride$set(MemorySegment seg, long index, long x) {
        constants$608.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hitShaderBindingTableAddress$VH() {
        return constants$608.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress hitShaderBindingTableAddress;
     * }
     */
    public static long hitShaderBindingTableAddress$get(MemorySegment seg) {
        return (long)constants$608.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress hitShaderBindingTableAddress;
     * }
     */
    public static void hitShaderBindingTableAddress$set(MemorySegment seg, long x) {
        constants$608.const$4.set(seg, x);
    }
    public static long hitShaderBindingTableAddress$get(MemorySegment seg, long index) {
        return (long)constants$608.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hitShaderBindingTableAddress$set(MemorySegment seg, long index, long x) {
        constants$608.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hitShaderBindingTableSize$VH() {
        return constants$608.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize hitShaderBindingTableSize;
     * }
     */
    public static long hitShaderBindingTableSize$get(MemorySegment seg) {
        return (long)constants$608.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize hitShaderBindingTableSize;
     * }
     */
    public static void hitShaderBindingTableSize$set(MemorySegment seg, long x) {
        constants$608.const$5.set(seg, x);
    }
    public static long hitShaderBindingTableSize$get(MemorySegment seg, long index) {
        return (long)constants$608.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hitShaderBindingTableSize$set(MemorySegment seg, long index, long x) {
        constants$608.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hitShaderBindingTableStride$VH() {
        return constants$609.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize hitShaderBindingTableStride;
     * }
     */
    public static long hitShaderBindingTableStride$get(MemorySegment seg) {
        return (long)constants$609.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize hitShaderBindingTableStride;
     * }
     */
    public static void hitShaderBindingTableStride$set(MemorySegment seg, long x) {
        constants$609.const$0.set(seg, x);
    }
    public static long hitShaderBindingTableStride$get(MemorySegment seg, long index) {
        return (long)constants$609.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hitShaderBindingTableStride$set(MemorySegment seg, long index, long x) {
        constants$609.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle callableShaderBindingTableAddress$VH() {
        return constants$609.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress callableShaderBindingTableAddress;
     * }
     */
    public static long callableShaderBindingTableAddress$get(MemorySegment seg) {
        return (long)constants$609.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress callableShaderBindingTableAddress;
     * }
     */
    public static void callableShaderBindingTableAddress$set(MemorySegment seg, long x) {
        constants$609.const$1.set(seg, x);
    }
    public static long callableShaderBindingTableAddress$get(MemorySegment seg, long index) {
        return (long)constants$609.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void callableShaderBindingTableAddress$set(MemorySegment seg, long index, long x) {
        constants$609.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle callableShaderBindingTableSize$VH() {
        return constants$609.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize callableShaderBindingTableSize;
     * }
     */
    public static long callableShaderBindingTableSize$get(MemorySegment seg) {
        return (long)constants$609.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize callableShaderBindingTableSize;
     * }
     */
    public static void callableShaderBindingTableSize$set(MemorySegment seg, long x) {
        constants$609.const$2.set(seg, x);
    }
    public static long callableShaderBindingTableSize$get(MemorySegment seg, long index) {
        return (long)constants$609.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void callableShaderBindingTableSize$set(MemorySegment seg, long index, long x) {
        constants$609.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle callableShaderBindingTableStride$VH() {
        return constants$609.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize callableShaderBindingTableStride;
     * }
     */
    public static long callableShaderBindingTableStride$get(MemorySegment seg) {
        return (long)constants$609.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize callableShaderBindingTableStride;
     * }
     */
    public static void callableShaderBindingTableStride$set(MemorySegment seg, long x) {
        constants$609.const$3.set(seg, x);
    }
    public static long callableShaderBindingTableStride$get(MemorySegment seg, long index) {
        return (long)constants$609.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void callableShaderBindingTableStride$set(MemorySegment seg, long index, long x) {
        constants$609.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$609.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$609.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$609.const$4.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$609.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$609.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$609.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$609.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$609.const$5.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$609.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$609.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth$VH() {
        return constants$610.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t depth;
     * }
     */
    public static int depth$get(MemorySegment seg) {
        return (int)constants$610.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t depth;
     * }
     */
    public static void depth$set(MemorySegment seg, int x) {
        constants$610.const$0.set(seg, x);
    }
    public static int depth$get(MemorySegment seg, long index) {
        return (int)constants$610.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, int x) {
        constants$610.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


