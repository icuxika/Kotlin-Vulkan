// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkCuLaunchInfoNVX {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkCuFunctionNVX function;
 *     uint32_t gridDimX;
 *     uint32_t gridDimY;
 *     uint32_t gridDimZ;
 *     uint32_t blockDimX;
 *     uint32_t blockDimY;
 *     uint32_t blockDimZ;
 *     uint32_t sharedMemBytes;
 *     size_t paramCount;
 *     void** pParams;
 *     size_t extraCount;
 *     void** pExtras;
 * };
 * }
 */
public class VkCuLaunchInfoNVX {

    public static MemoryLayout $LAYOUT() {
        return constants$631.const$2;
    }
    public static VarHandle sType$VH() {
        return constants$631.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$631.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$631.const$3.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$631.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$631.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$631.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$631.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$631.const$4.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$631.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$631.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle function$VH() {
        return constants$631.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkCuFunctionNVX function;
     * }
     */
    public static MemorySegment function$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$631.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkCuFunctionNVX function;
     * }
     */
    public static void function$set(MemorySegment seg, MemorySegment x) {
        constants$631.const$5.set(seg, x);
    }
    public static MemorySegment function$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$631.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void function$set(MemorySegment seg, long index, MemorySegment x) {
        constants$631.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gridDimX$VH() {
        return constants$632.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gridDimX;
     * }
     */
    public static int gridDimX$get(MemorySegment seg) {
        return (int)constants$632.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gridDimX;
     * }
     */
    public static void gridDimX$set(MemorySegment seg, int x) {
        constants$632.const$0.set(seg, x);
    }
    public static int gridDimX$get(MemorySegment seg, long index) {
        return (int)constants$632.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void gridDimX$set(MemorySegment seg, long index, int x) {
        constants$632.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gridDimY$VH() {
        return constants$632.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gridDimY;
     * }
     */
    public static int gridDimY$get(MemorySegment seg) {
        return (int)constants$632.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gridDimY;
     * }
     */
    public static void gridDimY$set(MemorySegment seg, int x) {
        constants$632.const$1.set(seg, x);
    }
    public static int gridDimY$get(MemorySegment seg, long index) {
        return (int)constants$632.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void gridDimY$set(MemorySegment seg, long index, int x) {
        constants$632.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gridDimZ$VH() {
        return constants$632.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t gridDimZ;
     * }
     */
    public static int gridDimZ$get(MemorySegment seg) {
        return (int)constants$632.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t gridDimZ;
     * }
     */
    public static void gridDimZ$set(MemorySegment seg, int x) {
        constants$632.const$2.set(seg, x);
    }
    public static int gridDimZ$get(MemorySegment seg, long index) {
        return (int)constants$632.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void gridDimZ$set(MemorySegment seg, long index, int x) {
        constants$632.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blockDimX$VH() {
        return constants$632.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t blockDimX;
     * }
     */
    public static int blockDimX$get(MemorySegment seg) {
        return (int)constants$632.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t blockDimX;
     * }
     */
    public static void blockDimX$set(MemorySegment seg, int x) {
        constants$632.const$3.set(seg, x);
    }
    public static int blockDimX$get(MemorySegment seg, long index) {
        return (int)constants$632.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void blockDimX$set(MemorySegment seg, long index, int x) {
        constants$632.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blockDimY$VH() {
        return constants$632.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t blockDimY;
     * }
     */
    public static int blockDimY$get(MemorySegment seg) {
        return (int)constants$632.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t blockDimY;
     * }
     */
    public static void blockDimY$set(MemorySegment seg, int x) {
        constants$632.const$4.set(seg, x);
    }
    public static int blockDimY$get(MemorySegment seg, long index) {
        return (int)constants$632.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void blockDimY$set(MemorySegment seg, long index, int x) {
        constants$632.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blockDimZ$VH() {
        return constants$632.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t blockDimZ;
     * }
     */
    public static int blockDimZ$get(MemorySegment seg) {
        return (int)constants$632.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t blockDimZ;
     * }
     */
    public static void blockDimZ$set(MemorySegment seg, int x) {
        constants$632.const$5.set(seg, x);
    }
    public static int blockDimZ$get(MemorySegment seg, long index) {
        return (int)constants$632.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void blockDimZ$set(MemorySegment seg, long index, int x) {
        constants$632.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sharedMemBytes$VH() {
        return constants$633.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t sharedMemBytes;
     * }
     */
    public static int sharedMemBytes$get(MemorySegment seg) {
        return (int)constants$633.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t sharedMemBytes;
     * }
     */
    public static void sharedMemBytes$set(MemorySegment seg, int x) {
        constants$633.const$0.set(seg, x);
    }
    public static int sharedMemBytes$get(MemorySegment seg, long index) {
        return (int)constants$633.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sharedMemBytes$set(MemorySegment seg, long index, int x) {
        constants$633.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle paramCount$VH() {
        return constants$633.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t paramCount;
     * }
     */
    public static long paramCount$get(MemorySegment seg) {
        return (long)constants$633.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t paramCount;
     * }
     */
    public static void paramCount$set(MemorySegment seg, long x) {
        constants$633.const$1.set(seg, x);
    }
    public static long paramCount$get(MemorySegment seg, long index) {
        return (long)constants$633.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void paramCount$set(MemorySegment seg, long index, long x) {
        constants$633.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pParams$VH() {
        return constants$633.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void** pParams;
     * }
     */
    public static MemorySegment pParams$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$633.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void** pParams;
     * }
     */
    public static void pParams$set(MemorySegment seg, MemorySegment x) {
        constants$633.const$2.set(seg, x);
    }
    public static MemorySegment pParams$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$633.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pParams$set(MemorySegment seg, long index, MemorySegment x) {
        constants$633.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extraCount$VH() {
        return constants$633.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t extraCount;
     * }
     */
    public static long extraCount$get(MemorySegment seg) {
        return (long)constants$633.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t extraCount;
     * }
     */
    public static void extraCount$set(MemorySegment seg, long x) {
        constants$633.const$3.set(seg, x);
    }
    public static long extraCount$get(MemorySegment seg, long index) {
        return (long)constants$633.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extraCount$set(MemorySegment seg, long index, long x) {
        constants$633.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pExtras$VH() {
        return constants$633.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void** pExtras;
     * }
     */
    public static MemorySegment pExtras$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$633.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void** pExtras;
     * }
     */
    public static void pExtras$set(MemorySegment seg, MemorySegment x) {
        constants$633.const$4.set(seg, x);
    }
    public static MemorySegment pExtras$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$633.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pExtras$set(MemorySegment seg, long index, MemorySegment x) {
        constants$633.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


