// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jextract_h_5 extends jextract_h_4 {

    /**
     * {@snippet :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV = 0;
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_NONE_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV = 1;
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_RGB_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2;
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_ALPHA_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3;
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_RGBA_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCoverageModulationStateCreateFlagsNV;
     * }
     */
    public static final OfInt VkPipelineCoverageModulationStateCreateFlagsNV = JAVA_INT;
    public static MethodHandle vkGetImageDrmFormatModifierPropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$707.const$5,"vkGetImageDrmFormatModifierPropertiesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties);
     * }
     */
    public static int vkGetImageDrmFormatModifierPropertiesEXT(MemorySegment device, MemorySegment image, MemorySegment pProperties) {
        var mh$ = vkGetImageDrmFormatModifierPropertiesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, image, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkValidationCacheEXT_T* VkValidationCacheEXT;
     * }
     */
    public static final AddressLayout VkValidationCacheEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1;
     * }
     */
    public static int VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkValidationCacheCreateFlagsEXT;
     * }
     */
    public static final OfInt VkValidationCacheCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreateValidationCacheEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$2,"vkCreateValidationCacheEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache);
     * }
     */
    public static int vkCreateValidationCacheEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pValidationCache) {
        var mh$ = vkCreateValidationCacheEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pValidationCache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyValidationCacheEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$3,"vkDestroyValidationCacheEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyValidationCacheEXT(MemorySegment device, MemorySegment validationCache, MemorySegment pAllocator) {
        var mh$ = vkDestroyValidationCacheEXT$MH();
        try {
            mh$.invokeExact(device, validationCache, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkMergeValidationCachesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$4,"vkMergeValidationCachesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches);
     * }
     */
    public static int vkMergeValidationCachesEXT(MemorySegment device, MemorySegment dstCache, int srcCacheCount, MemorySegment pSrcCaches) {
        var mh$ = vkMergeValidationCachesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetValidationCacheDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$710.const$5,"vkGetValidationCacheDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData);
     * }
     */
    public static int vkGetValidationCacheDataEXT(MemorySegment device, MemorySegment validationCache, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetValidationCacheDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, validationCache, pDataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorBindingFlagsEXT;
     * }
     */
    public static final OfInt VkDescriptorBindingFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0;
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1;
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2;
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3;
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    public static MethodHandle vkCmdBindShadingRateImageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$1,"vkCmdBindShadingRateImageNV");
    }
    /**
     * {@snippet :
     * void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
     * }
     */
    public static void vkCmdBindShadingRateImageNV(MemorySegment commandBuffer, MemorySegment imageView, int imageLayout) {
        var mh$ = vkCmdBindShadingRateImageNV$MH();
        try {
            mh$.invokeExact(commandBuffer, imageView, imageLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportShadingRatePaletteNV$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$2,"vkCmdSetViewportShadingRatePaletteNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes);
     * }
     */
    public static void vkCmdSetViewportShadingRatePaletteNV(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pShadingRatePalettes) {
        var mh$ = vkCmdSetViewportShadingRatePaletteNV$MH();
        try {
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoarseSampleOrderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$717.const$3,"vkCmdSetCoarseSampleOrderNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders);
     * }
     */
    public static void vkCmdSetCoarseSampleOrderNV(MemorySegment commandBuffer, int sampleOrderType, int customSampleOrderCount, MemorySegment pCustomSampleOrders) {
        var mh$ = vkCmdSetCoarseSampleOrderNV$MH();
        try {
            mh$.invokeExact(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkAccelerationStructureNV_T* VkAccelerationStructureNV;
     * }
     */
    public static final AddressLayout VkAccelerationStructureNV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0;
     * }
     */
    public static int VK_GEOMETRY_TYPE_TRIANGLES_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_KHR = 1;
     * }
     */
    public static int VK_GEOMETRY_TYPE_AABBS_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_INSTANCES_KHR = 2;
     * }
     */
    public static int VK_GEOMETRY_TYPE_INSTANCES_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_NV = 0;
     * }
     */
    public static int VK_GEOMETRY_TYPE_TRIANGLES_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_NV = 1;
     * }
     */
    public static int VK_GEOMETRY_TYPE_AABBS_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_GEOMETRY_TYPE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_KHR = 1;
     * }
     */
    public static int VK_GEOMETRY_OPAQUE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2;
     * }
     */
    public static int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_NV = 1;
     * }
     */
    public static int VK_GEOMETRY_OPAQUE_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2;
     * }
     */
    public static int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkGeometryFlagsKHR;
     * }
     */
    public static final OfInt VkGeometryFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkGeometryFlagsNV;
     * }
     */
    public static final OfInt VkGeometryFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkGeometryInstanceFlagsKHR;
     * }
     */
    public static final OfInt VkGeometryInstanceFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkGeometryInstanceFlagsNV;
     * }
     */
    public static final OfInt VkGeometryInstanceFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkBuildAccelerationStructureFlagsKHR;
     * }
     */
    public static final OfInt VkBuildAccelerationStructureFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkBuildAccelerationStructureFlagsNV;
     * }
     */
    public static final OfInt VkBuildAccelerationStructureFlagsNV = JAVA_INT;
    public static MethodHandle vkCreateAccelerationStructureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$1,"vkCreateAccelerationStructureNV");
    }
    /**
     * {@snippet :
     * VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure);
     * }
     */
    public static int vkCreateAccelerationStructureNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pAccelerationStructure) {
        var mh$ = vkCreateAccelerationStructureNV$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pAccelerationStructure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyAccelerationStructureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$2,"vkDestroyAccelerationStructureNV");
    }
    /**
     * {@snippet :
     * void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyAccelerationStructureNV(MemorySegment device, MemorySegment accelerationStructure, MemorySegment pAllocator) {
        var mh$ = vkDestroyAccelerationStructureNV$MH();
        try {
            mh$.invokeExact(device, accelerationStructure, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetAccelerationStructureMemoryRequirementsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$3,"vkGetAccelerationStructureMemoryRequirementsNV");
    }
    /**
     * {@snippet :
     * void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
     * }
     */
    public static void vkGetAccelerationStructureMemoryRequirementsNV(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetAccelerationStructureMemoryRequirementsNV$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindAccelerationStructureMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$4,"vkBindAccelerationStructureMemoryNV");
    }
    /**
     * {@snippet :
     * VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos);
     * }
     */
    public static int vkBindAccelerationStructureMemoryNV(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindAccelerationStructureMemoryNV$MH();
        try {
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBuildAccelerationStructureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$738.const$5,"vkCmdBuildAccelerationStructureNV");
    }
    /**
     * {@snippet :
     * void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
     * }
     */
    public static void vkCmdBuildAccelerationStructureNV(MemorySegment commandBuffer, MemorySegment pInfo, MemorySegment instanceData, long instanceOffset, int update, MemorySegment dst, MemorySegment src, MemorySegment scratch, long scratchOffset) {
        var mh$ = vkCmdBuildAccelerationStructureNV$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyAccelerationStructureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$0,"vkCmdCopyAccelerationStructureNV");
    }
    /**
     * {@snippet :
     * void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
     * }
     */
    public static void vkCmdCopyAccelerationStructureNV(MemorySegment commandBuffer, MemorySegment dst, MemorySegment src, int mode) {
        var mh$ = vkCmdCopyAccelerationStructureNV$MH();
        try {
            mh$.invokeExact(commandBuffer, dst, src, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdTraceRaysNV$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$1,"vkCmdTraceRaysNV");
    }
    /**
     * {@snippet :
     * void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
     * }
     */
    public static void vkCmdTraceRaysNV(MemorySegment commandBuffer, MemorySegment raygenShaderBindingTableBuffer, long raygenShaderBindingOffset, MemorySegment missShaderBindingTableBuffer, long missShaderBindingOffset, long missShaderBindingStride, MemorySegment hitShaderBindingTableBuffer, long hitShaderBindingOffset, long hitShaderBindingStride, MemorySegment callableShaderBindingTableBuffer, long callableShaderBindingOffset, long callableShaderBindingStride, int width, int height, int depth) {
        var mh$ = vkCmdTraceRaysNV$MH();
        try {
            mh$.invokeExact(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateRayTracingPipelinesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$2,"vkCreateRayTracingPipelinesNV");
    }
    /**
     * {@snippet :
     * VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
     * }
     */
    public static int vkCreateRayTracingPipelinesNV(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateRayTracingPipelinesNV$MH();
        try {
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRayTracingShaderGroupHandlesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$3,"vkGetRayTracingShaderGroupHandlesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData);
     * }
     */
    public static int vkGetRayTracingShaderGroupHandlesKHR(MemorySegment device, MemorySegment pipeline, int firstGroup, int groupCount, long dataSize, MemorySegment pData) {
        var mh$ = vkGetRayTracingShaderGroupHandlesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRayTracingShaderGroupHandlesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$4,"vkGetRayTracingShaderGroupHandlesNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData);
     * }
     */
    public static int vkGetRayTracingShaderGroupHandlesNV(MemorySegment device, MemorySegment pipeline, int firstGroup, int groupCount, long dataSize, MemorySegment pData) {
        var mh$ = vkGetRayTracingShaderGroupHandlesNV$MH();
        try {
            return (int)mh$.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetAccelerationStructureHandleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$739.const$5,"vkGetAccelerationStructureHandleNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData);
     * }
     */
    public static int vkGetAccelerationStructureHandleNV(MemorySegment device, MemorySegment accelerationStructure, long dataSize, MemorySegment pData) {
        var mh$ = vkGetAccelerationStructureHandleNV$MH();
        try {
            return (int)mh$.invokeExact(device, accelerationStructure, dataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteAccelerationStructuresPropertiesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$0,"vkCmdWriteAccelerationStructuresPropertiesNV");
    }
    /**
     * {@snippet :
     * void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
     * }
     */
    public static void vkCmdWriteAccelerationStructuresPropertiesNV(MemorySegment commandBuffer, int accelerationStructureCount, MemorySegment pAccelerationStructures, int queryType, MemorySegment queryPool, int firstQuery) {
        var mh$ = vkCmdWriteAccelerationStructuresPropertiesNV$MH();
        try {
            mh$.invokeExact(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCompileDeferredNV$MH() {
        return RuntimeHelper.requireNonNull(constants$740.const$1,"vkCompileDeferredNV");
    }
    /**
     * {@snippet :
     * VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader);
     * }
     */
    public static int vkCompileDeferredNV(MemorySegment device, MemorySegment pipeline, int shader) {
        var mh$ = vkCompileDeferredNV$MH();
        try {
            return (int)mh$.invokeExact(device, pipeline, shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetMemoryHostPointerPropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$745.const$3,"vkGetMemoryHostPointerPropertiesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);
     * }
     */
    public static int vkGetMemoryHostPointerPropertiesEXT(MemorySegment device, int handleType, MemorySegment pHostPointer, MemorySegment pMemoryHostPointerProperties) {
        var mh$ = vkGetMemoryHostPointerPropertiesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, handleType, pHostPointer, pMemoryHostPointerProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteBufferMarkerAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$746.const$1,"vkCmdWriteBufferMarkerAMD");
    }
    /**
     * {@snippet :
     * void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
     * }
     */
    public static void vkCmdWriteBufferMarkerAMD(MemorySegment commandBuffer, int pipelineStage, MemorySegment dstBuffer, long dstOffset, int marker) {
        var mh$ = vkCmdWriteBufferMarkerAMD$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkPipelineCompilerControlFlagBitsAMD.VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647;
     * }
     */
    public static int VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCompilerControlFlagsAMD;
     * }
     */
    public static final OfInt VkPipelineCompilerControlFlagsAMD = JAVA_INT;
    /**
     * {@snippet :
     * enum VkTimeDomainEXT.VK_TIME_DOMAIN_DEVICE_EXT = 0;
     * }
     */
    public static int VK_TIME_DOMAIN_DEVICE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1;
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2;
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkTimeDomainEXT.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3;
     * }
     */
    public static int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkTimeDomainEXT.VK_TIME_DOMAIN_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_TIME_DOMAIN_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetPhysicalDeviceCalibrateableTimeDomainsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.const$0,"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains);
     * }
     */
    public static int vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(MemorySegment physicalDevice, MemorySegment pTimeDomainCount, MemorySegment pTimeDomains) {
        var mh$ = vkGetPhysicalDeviceCalibrateableTimeDomainsEXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pTimeDomainCount, pTimeDomains);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetCalibratedTimestampsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.const$1,"vkGetCalibratedTimestampsEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation);
     * }
     */
    public static int vkGetCalibratedTimestampsEXT(MemorySegment device, int timestampCount, MemorySegment pTimestampInfos, MemorySegment pTimestamps, MemorySegment pMaxDeviation) {
        var mh$ = vkGetCalibratedTimestampsEXT$MH();
        try {
            return (int)mh$.invokeExact(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0;
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1;
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2;
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647;
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCreationFeedbackFlagsEXT;
     * }
     */
    public static final OfInt VkPipelineCreationFeedbackFlagsEXT = JAVA_INT;
    public static MethodHandle vkCmdDrawMeshTasksNV$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$4,"vkCmdDrawMeshTasksNV");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
     * }
     */
    public static void vkCmdDrawMeshTasksNV(MemorySegment commandBuffer, int taskCount, int firstTask) {
        var mh$ = vkCmdDrawMeshTasksNV$MH();
        try {
            mh$.invokeExact(commandBuffer, taskCount, firstTask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMeshTasksIndirectNV$MH() {
        return RuntimeHelper.requireNonNull(constants$759.const$5,"vkCmdDrawMeshTasksIndirectNV");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectNV(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectNV$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMeshTasksIndirectCountNV$MH() {
        return RuntimeHelper.requireNonNull(constants$760.const$0,"vkCmdDrawMeshTasksIndirectCountNV");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectCountNV(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectCountNV$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetExclusiveScissorEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$4,"vkCmdSetExclusiveScissorEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables);
     * }
     */
    public static void vkCmdSetExclusiveScissorEnableNV(MemorySegment commandBuffer, int firstExclusiveScissor, int exclusiveScissorCount, MemorySegment pExclusiveScissorEnables) {
        var mh$ = vkCmdSetExclusiveScissorEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetExclusiveScissorNV$MH() {
        return RuntimeHelper.requireNonNull(constants$762.const$5,"vkCmdSetExclusiveScissorNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors);
     * }
     */
    public static void vkCmdSetExclusiveScissorNV(MemorySegment commandBuffer, int firstExclusiveScissor, int exclusiveScissorCount, MemorySegment pExclusiveScissors) {
        var mh$ = vkCmdSetExclusiveScissorNV$MH();
        try {
            mh$.invokeExact(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCheckpointNV$MH() {
        return RuntimeHelper.requireNonNull(constants$764.const$5,"vkCmdSetCheckpointNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* pCheckpointMarker);
     * }
     */
    public static void vkCmdSetCheckpointNV(MemorySegment commandBuffer, MemorySegment pCheckpointMarker) {
        var mh$ = vkCmdSetCheckpointNV$MH();
        try {
            mh$.invokeExact(commandBuffer, pCheckpointMarker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetQueueCheckpointDataNV$MH() {
        return RuntimeHelper.requireNonNull(constants$765.const$0,"vkGetQueueCheckpointDataNV");
    }
    /**
     * {@snippet :
     * void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData);
     * }
     */
    public static void vkGetQueueCheckpointDataNV(MemorySegment queue, MemorySegment pCheckpointDataCount, MemorySegment pCheckpointData) {
        var mh$ = vkGetQueueCheckpointDataNV$MH();
        try {
            mh$.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkPerformanceConfigurationINTEL_T* VkPerformanceConfigurationINTEL;
     * }
     */
    public static final AddressLayout VkPerformanceConfigurationINTEL = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0;
     * }
     */
    public static int VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0;
     * }
     */
    public static int VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647;
     * }
     */
    public static int VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0;
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1;
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0;
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1;
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL() {
        return (int)2147483647L;
    }
    public static MethodHandle vkInitializePerformanceApiINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$0,"vkInitializePerformanceApiINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo);
     * }
     */
    public static int vkInitializePerformanceApiINTEL(MemorySegment device, MemorySegment pInitializeInfo) {
        var mh$ = vkInitializePerformanceApiINTEL$MH();
        try {
            return (int)mh$.invokeExact(device, pInitializeInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUninitializePerformanceApiINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$1,"vkUninitializePerformanceApiINTEL");
    }
    /**
     * {@snippet :
     * void vkUninitializePerformanceApiINTEL(VkDevice device);
     * }
     */
    public static void vkUninitializePerformanceApiINTEL(MemorySegment device) {
        var mh$ = vkUninitializePerformanceApiINTEL$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPerformanceMarkerINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$2,"vkCmdSetPerformanceMarkerINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo);
     * }
     */
    public static int vkCmdSetPerformanceMarkerINTEL(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdSetPerformanceMarkerINTEL$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPerformanceStreamMarkerINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$3,"vkCmdSetPerformanceStreamMarkerINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo);
     * }
     */
    public static int vkCmdSetPerformanceStreamMarkerINTEL(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdSetPerformanceStreamMarkerINTEL$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPerformanceOverrideINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$4,"vkCmdSetPerformanceOverrideINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo);
     * }
     */
    public static int vkCmdSetPerformanceOverrideINTEL(MemorySegment commandBuffer, MemorySegment pOverrideInfo) {
        var mh$ = vkCmdSetPerformanceOverrideINTEL$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer, pOverrideInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAcquirePerformanceConfigurationINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$773.const$5,"vkAcquirePerformanceConfigurationINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration);
     * }
     */
    public static int vkAcquirePerformanceConfigurationINTEL(MemorySegment device, MemorySegment pAcquireInfo, MemorySegment pConfiguration) {
        var mh$ = vkAcquirePerformanceConfigurationINTEL$MH();
        try {
            return (int)mh$.invokeExact(device, pAcquireInfo, pConfiguration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkReleasePerformanceConfigurationINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$0,"vkReleasePerformanceConfigurationINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration);
     * }
     */
    public static int vkReleasePerformanceConfigurationINTEL(MemorySegment device, MemorySegment configuration) {
        var mh$ = vkReleasePerformanceConfigurationINTEL$MH();
        try {
            return (int)mh$.invokeExact(device, configuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueSetPerformanceConfigurationINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$1,"vkQueueSetPerformanceConfigurationINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
     * }
     */
    public static int vkQueueSetPerformanceConfigurationINTEL(MemorySegment queue, MemorySegment configuration) {
        var mh$ = vkQueueSetPerformanceConfigurationINTEL$MH();
        try {
            return (int)mh$.invokeExact(queue, configuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPerformanceParameterINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$774.const$2,"vkGetPerformanceParameterINTEL");
    }
    /**
     * {@snippet :
     * VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue);
     * }
     */
    public static int vkGetPerformanceParameterINTEL(MemorySegment device, int parameter, MemorySegment pValue) {
        var mh$ = vkGetPerformanceParameterINTEL$MH();
        try {
            return (int)mh$.invokeExact(device, parameter, pValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetLocalDimmingAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$777.const$1,"vkSetLocalDimmingAMD");
    }
    /**
     * {@snippet :
     * void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);
     * }
     */
    public static void vkSetLocalDimmingAMD(MemorySegment device, MemorySegment swapChain, int localDimmingEnable) {
        var mh$ = vkSetLocalDimmingAMD$MH();
        try {
            mh$.invokeExact(device, swapChain, localDimmingEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkShaderCorePropertiesFlagBitsAMD.VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647;
     * }
     */
    public static int VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkShaderCorePropertiesFlagsAMD;
     * }
     */
    public static final OfInt VkShaderCorePropertiesFlagsAMD = JAVA_INT;
    public static MethodHandle vkGetBufferDeviceAddressEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$786.const$1,"vkGetBufferDeviceAddressEXT");
    }
    /**
     * {@snippet :
     * VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo* pInfo);
     * }
     */
    public static long vkGetBufferDeviceAddressEXT(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddressEXT$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkToolPurposeFlagsEXT;
     * }
     */
    public static final OfInt VkToolPurposeFlagsEXT = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceToolPropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$786.const$3,"vkGetPhysicalDeviceToolPropertiesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);
     * }
     */
    public static int vkGetPhysicalDeviceToolPropertiesEXT(MemorySegment physicalDevice, MemorySegment pToolCount, MemorySegment pToolProperties) {
        var mh$ = vkGetPhysicalDeviceToolPropertiesEXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pToolCount, pToolProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_ALL_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT16_NV = 0;
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT16_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT32_NV = 1;
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT32_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT64_NV = 2;
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT64_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_SINT8_NV = 3;
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT8_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_SINT16_NV = 4;
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT16_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_SINT32_NV = 5;
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT32_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_SINT64_NV = 6;
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT64_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_UINT8_NV = 7;
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT8_NV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_UINT16_NV = 8;
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT16_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_UINT32_NV = 9;
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT32_NV() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_UINT64_NV = 10;
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT64_NV() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkComponentTypeNV.VK_COMPONENT_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_COMPONENT_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkScopeNV.VK_SCOPE_DEVICE_NV = 1;
     * }
     */
    public static int VK_SCOPE_DEVICE_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkScopeNV.VK_SCOPE_WORKGROUP_NV = 2;
     * }
     */
    public static int VK_SCOPE_WORKGROUP_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkScopeNV.VK_SCOPE_SUBGROUP_NV = 3;
     * }
     */
    public static int VK_SCOPE_SUBGROUP_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkScopeNV.VK_SCOPE_QUEUE_FAMILY_NV = 5;
     * }
     */
    public static int VK_SCOPE_QUEUE_FAMILY_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkScopeNV.VK_SCOPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_SCOPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetPhysicalDeviceCooperativeMatrixPropertiesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$791.const$2,"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties);
     * }
     */
    public static int vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0;
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_MERGE_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1;
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCoverageReductionStateCreateFlagsNV;
     * }
     */
    public static final OfInt VkPipelineCoverageReductionStateCreateFlagsNV = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$794.const$2,"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations);
     * }
     */
    public static int vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(MemorySegment physicalDevice, MemorySegment pCombinationCount, MemorySegment pCombinations) {
        var mh$ = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pCombinationCount, pCombinations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0;
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1;
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkHeadlessSurfaceCreateFlagsEXT;
     * }
     */
    public static final OfInt VkHeadlessSurfaceCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreateHeadlessSurfaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$799.const$2,"vkCreateHeadlessSurfaceEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
     * }
     */
    public static int vkCreateHeadlessSurfaceEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSurface) {
        var mh$ = vkCreateHeadlessSurfaceEXT$MH();
        try {
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0;
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1;
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2;
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3;
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    public static MethodHandle vkCmdSetLineStippleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$803.const$2,"vkCmdSetLineStippleEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
     * }
     */
    public static void vkCmdSetLineStippleEXT(MemorySegment commandBuffer, int lineStippleFactor, short lineStipplePattern) {
        var mh$ = vkCmdSetLineStippleEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, lineStippleFactor, lineStipplePattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetQueryPoolEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$806.const$1,"vkResetQueryPoolEXT");
    }
    /**
     * {@snippet :
     * void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
     * }
     */
    public static void vkResetQueryPoolEXT(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkResetQueryPoolEXT$MH();
        try {
            mh$.invokeExact(device, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCullModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$809.const$4,"vkCmdSetCullModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
     * }
     */
    public static void vkCmdSetCullModeEXT(MemorySegment commandBuffer, int cullMode) {
        var mh$ = vkCmdSetCullModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, cullMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetFrontFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$809.const$5,"vkCmdSetFrontFaceEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
     * }
     */
    public static void vkCmdSetFrontFaceEXT(MemorySegment commandBuffer, int frontFace) {
        var mh$ = vkCmdSetFrontFaceEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, frontFace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPrimitiveTopologyEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$0,"vkCmdSetPrimitiveTopologyEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
     * }
     */
    public static void vkCmdSetPrimitiveTopologyEXT(MemorySegment commandBuffer, int primitiveTopology) {
        var mh$ = vkCmdSetPrimitiveTopologyEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, primitiveTopology);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportWithCountEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$1,"vkCmdSetViewportWithCountEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports);
     * }
     */
    public static void vkCmdSetViewportWithCountEXT(MemorySegment commandBuffer, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewportWithCountEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, viewportCount, pViewports);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetScissorWithCountEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$2,"vkCmdSetScissorWithCountEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors);
     * }
     */
    public static void vkCmdSetScissorWithCountEXT(MemorySegment commandBuffer, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissorWithCountEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, scissorCount, pScissors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindVertexBuffers2EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$3,"vkCmdBindVertexBuffers2EXT");
    }
    /**
     * {@snippet :
     * void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides);
     * }
     */
    public static void vkCmdBindVertexBuffers2EXT(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes, MemorySegment pStrides) {
        var mh$ = vkCmdBindVertexBuffers2EXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthTestEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$4,"vkCmdSetDepthTestEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
     * }
     */
    public static void vkCmdSetDepthTestEnableEXT(MemorySegment commandBuffer, int depthTestEnable) {
        var mh$ = vkCmdSetDepthTestEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthWriteEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$810.const$5,"vkCmdSetDepthWriteEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
     * }
     */
    public static void vkCmdSetDepthWriteEnableEXT(MemorySegment commandBuffer, int depthWriteEnable) {
        var mh$ = vkCmdSetDepthWriteEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthWriteEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthCompareOpEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$811.const$0,"vkCmdSetDepthCompareOpEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
     * }
     */
    public static void vkCmdSetDepthCompareOpEXT(MemorySegment commandBuffer, int depthCompareOp) {
        var mh$ = vkCmdSetDepthCompareOpEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthCompareOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBoundsTestEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$811.const$1,"vkCmdSetDepthBoundsTestEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
     * }
     */
    public static void vkCmdSetDepthBoundsTestEnableEXT(MemorySegment commandBuffer, int depthBoundsTestEnable) {
        var mh$ = vkCmdSetDepthBoundsTestEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthBoundsTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilTestEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$811.const$2,"vkCmdSetStencilTestEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
     * }
     */
    public static void vkCmdSetStencilTestEnableEXT(MemorySegment commandBuffer, int stencilTestEnable) {
        var mh$ = vkCmdSetStencilTestEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, stencilTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilOpEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$811.const$3,"vkCmdSetStencilOpEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
     * }
     */
    public static void vkCmdSetStencilOpEXT(MemorySegment commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp) {
        var mh$ = vkCmdSetStencilOpEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1;
     * }
     */
    public static int VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2;
     * }
     */
    public static int VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4;
     * }
     */
    public static int VK_PRESENT_SCALING_STRETCH_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPresentScalingFlagsEXT;
     * }
     */
    public static final OfInt VkPresentScalingFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1;
     * }
     */
    public static int VK_PRESENT_GRAVITY_MIN_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2;
     * }
     */
    public static int VK_PRESENT_GRAVITY_MAX_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4;
     * }
     */
    public static int VK_PRESENT_GRAVITY_CENTERED_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPresentGravityFlagsEXT;
     * }
     */
    public static final OfInt VkPresentGravityFlagsEXT = JAVA_INT;
    public static MethodHandle vkReleaseSwapchainImagesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$822.const$0,"vkReleaseSwapchainImagesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo);
     * }
     */
    public static int vkReleaseSwapchainImagesEXT(MemorySegment device, MemorySegment pReleaseInfo) {
        var mh$ = vkReleaseSwapchainImagesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pReleaseInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkIndirectCommandsLayoutNV_T* VkIndirectCommandsLayoutNV;
     * }
     */
    public static final AddressLayout VkIndirectCommandsLayoutNV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV() {
        return (int)1000328000L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1;
     * }
     */
    public static int VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkIndirectStateFlagsNV;
     * }
     */
    public static final OfInt VkIndirectStateFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkIndirectCommandsLayoutUsageFlagsNV;
     * }
     */
    public static final OfInt VkIndirectCommandsLayoutUsageFlagsNV = JAVA_INT;
    public static MethodHandle vkGetGeneratedCommandsMemoryRequirementsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$4,"vkGetGeneratedCommandsMemoryRequirementsNV");
    }
    /**
     * {@snippet :
     * void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetGeneratedCommandsMemoryRequirementsNV(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetGeneratedCommandsMemoryRequirementsNV$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPreprocessGeneratedCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$838.const$5,"vkCmdPreprocessGeneratedCommandsNV");
    }
    /**
     * {@snippet :
     * void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);
     * }
     */
    public static void vkCmdPreprocessGeneratedCommandsNV(MemorySegment commandBuffer, MemorySegment pGeneratedCommandsInfo) {
        var mh$ = vkCmdPreprocessGeneratedCommandsNV$MH();
        try {
            mh$.invokeExact(commandBuffer, pGeneratedCommandsInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdExecuteGeneratedCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$0,"vkCmdExecuteGeneratedCommandsNV");
    }
    /**
     * {@snippet :
     * void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);
     * }
     */
    public static void vkCmdExecuteGeneratedCommandsNV(MemorySegment commandBuffer, int isPreprocessed, MemorySegment pGeneratedCommandsInfo) {
        var mh$ = vkCmdExecuteGeneratedCommandsNV$MH();
        try {
            mh$.invokeExact(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindPipelineShaderGroupNV$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$1,"vkCmdBindPipelineShaderGroupNV");
    }
    /**
     * {@snippet :
     * void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex);
     * }
     */
    public static void vkCmdBindPipelineShaderGroupNV(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment pipeline, int groupIndex) {
        var mh$ = vkCmdBindPipelineShaderGroupNV$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateIndirectCommandsLayoutNV$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$2,"vkCreateIndirectCommandsLayoutNV");
    }
    /**
     * {@snippet :
     * VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout);
     * }
     */
    public static int vkCreateIndirectCommandsLayoutNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pIndirectCommandsLayout) {
        var mh$ = vkCreateIndirectCommandsLayoutNV$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyIndirectCommandsLayoutNV$MH() {
        return RuntimeHelper.requireNonNull(constants$839.const$3,"vkDestroyIndirectCommandsLayoutNV");
    }
    /**
     * {@snippet :
     * void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyIndirectCommandsLayoutNV(MemorySegment device, MemorySegment indirectCommandsLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyIndirectCommandsLayoutNV$MH();
        try {
            mh$.invokeExact(device, indirectCommandsLayout, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceMemoryReportFlagsEXT;
     * }
     */
    public static final OfInt VkDeviceMemoryReportFlagsEXT = JAVA_INT;
    public static MethodHandle vkAcquireDrmDisplayEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$1,"vkAcquireDrmDisplayEXT");
    }
    /**
     * {@snippet :
     * VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display);
     * }
     */
    public static int vkAcquireDrmDisplayEXT(MemorySegment physicalDevice, int drmFd, MemorySegment display) {
        var mh$ = vkAcquireDrmDisplayEXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, drmFd, display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDrmDisplayEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.const$2,"vkGetDrmDisplayEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display);
     * }
     */
    public static int vkGetDrmDisplayEXT(MemorySegment physicalDevice, int drmFd, int connectorId, MemorySegment display) {
        var mh$ = vkGetDrmDisplayEXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, drmFd, connectorId, display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkPrivateDataSlot_T* VkPrivateDataSlotEXT;
     * }
     */
    public static final AddressLayout VkPrivateDataSlotEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int VkPrivateDataSlotCreateFlagsEXT;
     * }
     */
    public static final OfInt VkPrivateDataSlotCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreatePrivateDataSlotEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.const$1,"vkCreatePrivateDataSlotEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot);
     * }
     */
    public static int vkCreatePrivateDataSlotEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPrivateDataSlot) {
        var mh$ = vkCreatePrivateDataSlotEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyPrivateDataSlotEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.const$2,"vkDestroyPrivateDataSlotEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyPrivateDataSlotEXT(MemorySegment device, MemorySegment privateDataSlot, MemorySegment pAllocator) {
        var mh$ = vkDestroyPrivateDataSlotEXT$MH();
        try {
            mh$.invokeExact(device, privateDataSlot, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetPrivateDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.const$3,"vkSetPrivateDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
     * }
     */
    public static int vkSetPrivateDataEXT(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, long data) {
        var mh$ = vkSetPrivateDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPrivateDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.const$4,"vkGetPrivateDataEXT");
    }
    /**
     * {@snippet :
     * void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData);
     * }
     */
    public static void vkGetPrivateDataEXT(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, MemorySegment pData) {
        var mh$ = vkGetPrivateDataEXT$MH();
        try {
            mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1;
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2;
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4;
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8;
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceDiagnosticsConfigFlagsNV;
     * }
     */
    public static final OfInt VkDeviceDiagnosticsConfigFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * typedef struct VkAccelerationStructureKHR_T* VkAccelerationStructureKHR;
     * }
     */
    public static final AddressLayout VkAccelerationStructureKHR = RuntimeHelper.POINTER;
    public static MethodHandle vkGetDescriptorSetLayoutSizeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.const$2,"vkGetDescriptorSetLayoutSizeEXT");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes);
     * }
     */
    public static void vkGetDescriptorSetLayoutSizeEXT(MemorySegment device, MemorySegment layout, MemorySegment pLayoutSizeInBytes) {
        var mh$ = vkGetDescriptorSetLayoutSizeEXT$MH();
        try {
            mh$.invokeExact(device, layout, pLayoutSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorSetLayoutBindingOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.const$3,"vkGetDescriptorSetLayoutBindingOffsetEXT");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset);
     * }
     */
    public static void vkGetDescriptorSetLayoutBindingOffsetEXT(MemorySegment device, MemorySegment layout, int binding, MemorySegment pOffset) {
        var mh$ = vkGetDescriptorSetLayoutBindingOffsetEXT$MH();
        try {
            mh$.invokeExact(device, layout, binding, pOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.const$4,"vkGetDescriptorEXT");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor);
     * }
     */
    public static void vkGetDescriptorEXT(MemorySegment device, MemorySegment pDescriptorInfo, long dataSize, MemorySegment pDescriptor) {
        var mh$ = vkGetDescriptorEXT$MH();
        try {
            mh$.invokeExact(device, pDescriptorInfo, dataSize, pDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindDescriptorBuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.const$5,"vkCmdBindDescriptorBuffersEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos);
     * }
     */
    public static void vkCmdBindDescriptorBuffersEXT(MemorySegment commandBuffer, int bufferCount, MemorySegment pBindingInfos) {
        var mh$ = vkCmdBindDescriptorBuffersEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, bufferCount, pBindingInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDescriptorBufferOffsetsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$0,"vkCmdSetDescriptorBufferOffsetsEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets);
     * }
     */
    public static void vkCmdSetDescriptorBufferOffsetsEXT(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int firstSet, int setCount, MemorySegment pBufferIndices, MemorySegment pOffsets) {
        var mh$ = vkCmdSetDescriptorBufferOffsetsEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindDescriptorBufferEmbeddedSamplersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$1,"vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set);
     * }
     */
    public static void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int set) {
        var mh$ = vkCmdBindDescriptorBufferEmbeddedSamplersEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferOpaqueCaptureDescriptorDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$2,"vkGetBufferOpaqueCaptureDescriptorDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData);
     * }
     */
    public static int vkGetBufferOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetBufferOpaqueCaptureDescriptorDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageOpaqueCaptureDescriptorDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$3,"vkGetImageOpaqueCaptureDescriptorDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData);
     * }
     */
    public static int vkGetImageOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetImageOpaqueCaptureDescriptorDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageViewOpaqueCaptureDescriptorDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$4,"vkGetImageViewOpaqueCaptureDescriptorDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData);
     * }
     */
    public static int vkGetImageViewOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetImageViewOpaqueCaptureDescriptorDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSamplerOpaqueCaptureDescriptorDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.const$5,"vkGetSamplerOpaqueCaptureDescriptorDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData);
     * }
     */
    public static int vkGetSamplerOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetSamplerOpaqueCaptureDescriptorDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.const$0,"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData);
     * }
     */
    public static int vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1;
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2;
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4;
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8;
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkGraphicsPipelineLibraryFlagsEXT;
     * }
     */
    public static final OfInt VkGraphicsPipelineLibraryFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    public static MethodHandle vkCmdSetFragmentShadingRateEnumNV$MH() {
        return RuntimeHelper.requireNonNull(constants$883.const$4,"vkCmdSetFragmentShadingRateEnumNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
     * }
     */
    public static void vkCmdSetFragmentShadingRateEnumNV(MemorySegment commandBuffer, int shadingRate, MemorySegment combinerOps) {
        var mh$ = vkCmdSetFragmentShadingRateEnumNV$MH();
        try {
            mh$.invokeExact(commandBuffer, shadingRate, combinerOps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkAccelerationStructureMotionInfoFlagsNV;
     * }
     */
    public static final OfInt VkAccelerationStructureMotionInfoFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkAccelerationStructureMotionInstanceFlagsNV;
     * }
     */
    public static final OfInt VkAccelerationStructureMotionInstanceFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_DEFAULT_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DISABLED_EXT = 4;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_DISABLED_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageCompressionFlagsEXT;
     * }
     */
    public static final OfInt VkImageCompressionFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageCompressionFixedRateFlagsEXT;
     * }
     */
    public static final OfInt VkImageCompressionFixedRateFlagsEXT = JAVA_INT;
    public static MethodHandle vkGetImageSubresourceLayout2EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.const$3,"vkGetImageSubresourceLayout2EXT");
    }
    /**
     * {@snippet :
     * void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout);
     * }
     */
    public static void vkGetImageSubresourceLayout2EXT(MemorySegment device, MemorySegment image, MemorySegment pSubresource, MemorySegment pLayout) {
        var mh$ = vkGetImageSubresourceLayout2EXT$MH();
        try {
            mh$.invokeExact(device, image, pSubresource, pLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1;
     * }
     */
    public static int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetDeviceFaultInfoEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.const$1,"vkGetDeviceFaultInfoEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo);
     * }
     */
    public static int vkGetDeviceFaultInfoEXT(MemorySegment device, MemorySegment pFaultCounts, MemorySegment pFaultInfo) {
        var mh$ = vkGetDeviceFaultInfoEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pFaultCounts, pFaultInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetVertexInputEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$912.const$1,"vkCmdSetVertexInputEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);
     * }
     */
    public static void vkCmdSetVertexInputEXT(MemorySegment commandBuffer, int vertexBindingDescriptionCount, MemorySegment pVertexBindingDescriptions, int vertexAttributeDescriptionCount, MemorySegment pVertexAttributeDescriptions) {
        var mh$ = vkCmdSetVertexInputEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0;
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1;
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1;
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceAddressBindingFlagsEXT;
     * }
     */
    public static final OfInt VkDeviceAddressBindingFlagsEXT = JAVA_INT;
    public static MethodHandle vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI$MH() {
        return RuntimeHelper.requireNonNull(constants$920.const$2,"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
    }
    /**
     * {@snippet :
     * VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize);
     * }
     */
    public static int vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(MemorySegment device, MemorySegment renderpass, MemorySegment pMaxWorkgroupSize) {
        var mh$ = vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI$MH();
        try {
            return (int)mh$.invokeExact(device, renderpass, pMaxWorkgroupSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSubpassShadingHUAWEI$MH() {
        return RuntimeHelper.requireNonNull(constants$920.const$3,"vkCmdSubpassShadingHUAWEI");
    }
    /**
     * {@snippet :
     * void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdSubpassShadingHUAWEI(MemorySegment commandBuffer) {
        var mh$ = vkCmdSubpassShadingHUAWEI$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindInvocationMaskHUAWEI$MH() {
        return RuntimeHelper.requireNonNull(constants$921.const$3,"vkCmdBindInvocationMaskHUAWEI");
    }
    /**
     * {@snippet :
     * void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
     * }
     */
    public static void vkCmdBindInvocationMaskHUAWEI(MemorySegment commandBuffer, MemorySegment imageView, int imageLayout) {
        var mh$ = vkCmdBindInvocationMaskHUAWEI$MH();
        try {
            mh$.invokeExact(commandBuffer, imageView, imageLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* VkRemoteAddressNV;
     * }
     */
    public static final AddressLayout VkRemoteAddressNV = RuntimeHelper.POINTER;
    public static MethodHandle vkGetMemoryRemoteAddressNV$MH() {
        return RuntimeHelper.requireNonNull(constants$923.const$2,"vkGetMemoryRemoteAddressNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress);
     * }
     */
    public static int vkGetMemoryRemoteAddressNV(MemorySegment device, MemorySegment pMemoryGetRemoteAddressInfo, MemorySegment pAddress) {
        var mh$ = vkGetMemoryRemoteAddressNV$MH();
        try {
            return (int)mh$.invokeExact(device, pMemoryGetRemoteAddressInfo, pAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPipelinePropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$924.const$5,"vkGetPipelinePropertiesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties);
     * }
     */
    public static int vkGetPipelinePropertiesEXT(MemorySegment device, MemorySegment pPipelineInfo, MemorySegment pPipelineProperties) {
        var mh$ = vkGetPipelinePropertiesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pPipelineInfo, pPipelineProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPatchControlPointsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.const$0,"vkCmdSetPatchControlPointsEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints);
     * }
     */
    public static void vkCmdSetPatchControlPointsEXT(MemorySegment commandBuffer, int patchControlPoints) {
        var mh$ = vkCmdSetPatchControlPointsEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, patchControlPoints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRasterizerDiscardEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.const$1,"vkCmdSetRasterizerDiscardEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
     * }
     */
    public static void vkCmdSetRasterizerDiscardEnableEXT(MemorySegment commandBuffer, int rasterizerDiscardEnable) {
        var mh$ = vkCmdSetRasterizerDiscardEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, rasterizerDiscardEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBiasEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.const$2,"vkCmdSetDepthBiasEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
     * }
     */
    public static void vkCmdSetDepthBiasEnableEXT(MemorySegment commandBuffer, int depthBiasEnable) {
        var mh$ = vkCmdSetDepthBiasEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthBiasEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetLogicOpEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.const$3,"vkCmdSetLogicOpEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp);
     * }
     */
    public static void vkCmdSetLogicOpEXT(MemorySegment commandBuffer, int logicOp) {
        var mh$ = vkCmdSetLogicOpEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, logicOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPrimitiveRestartEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.const$4,"vkCmdSetPrimitiveRestartEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
     * }
     */
    public static void vkCmdSetPrimitiveRestartEnableEXT(MemorySegment commandBuffer, int primitiveRestartEnable) {
        var mh$ = vkCmdSetPrimitiveRestartEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, primitiveRestartEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetColorWriteEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$931.const$3,"vkCmdSetColorWriteEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables);
     * }
     */
    public static void vkCmdSetColorWriteEnableEXT(MemorySegment commandBuffer, int attachmentCount, MemorySegment pColorWriteEnables) {
        var mh$ = vkCmdSetColorWriteEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, attachmentCount, pColorWriteEnables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMultiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$937.const$3,"vkCmdDrawMultiEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride);
     * }
     */
    public static void vkCmdDrawMultiEXT(MemorySegment commandBuffer, int drawCount, MemorySegment pVertexInfo, int instanceCount, int firstInstance, int stride) {
        var mh$ = vkCmdDrawMultiEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMultiIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$937.const$4,"vkCmdDrawMultiIndexedEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset);
     * }
     */
    public static void vkCmdDrawMultiIndexedEXT(MemorySegment commandBuffer, int drawCount, MemorySegment pIndexInfo, int instanceCount, int firstInstance, int stride, MemorySegment pVertexOffset) {
        var mh$ = vkCmdDrawMultiIndexedEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkMicromapEXT_T* VkMicromapEXT;
     * }
     */
    public static final AddressLayout VkMicromapEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkMicromapTypeEXT.VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0;
     * }
     */
    public static int VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkMicromapTypeEXT.VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_MICROMAP_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0;
     * }
     */
    public static int VK_BUILD_MICROMAP_MODE_BUILD_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_CLONE_EXT = 0;
     * }
     */
    public static int VK_COPY_MICROMAP_MODE_CLONE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1;
     * }
     */
    public static int VK_COPY_MICROMAP_MODE_SERIALIZE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2;
     * }
     */
    public static int VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3;
     * }
     */
    public static int VK_COPY_MICROMAP_MODE_COMPACT_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1;
     * }
     */
    public static int VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2;
     * }
     */
    public static int VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1;
     * }
     */
    public static int VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2;
     * }
     */
    public static int VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3;
     * }
     */
    public static int VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4;
     * }
     */
    public static int VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1;
     * }
     */
    public static int VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2;
     * }
     */
    public static int VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4;
     * }
     */
    public static int VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkBuildMicromapFlagsEXT;
     * }
     */
    public static final OfInt VkBuildMicromapFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1;
     * }
     */
    public static int VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkMicromapCreateFlagsEXT;
     * }
     */
    public static final OfInt VkMicromapCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreateMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$956.const$2,"vkCreateMicromapEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap);
     * }
     */
    public static int vkCreateMicromapEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pMicromap) {
        var mh$ = vkCreateMicromapEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pMicromap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$956.const$3,"vkDestroyMicromapEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyMicromapEXT(MemorySegment device, MemorySegment micromap, MemorySegment pAllocator) {
        var mh$ = vkDestroyMicromapEXT$MH();
        try {
            mh$.invokeExact(device, micromap, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBuildMicromapsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$956.const$4,"vkCmdBuildMicromapsEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos);
     * }
     */
    public static void vkCmdBuildMicromapsEXT(MemorySegment commandBuffer, int infoCount, MemorySegment pInfos) {
        var mh$ = vkCmdBuildMicromapsEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, infoCount, pInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBuildMicromapsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$956.const$5,"vkBuildMicromapsEXT");
    }
    /**
     * {@snippet :
     * VkResult vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos);
     * }
     */
    public static int vkBuildMicromapsEXT(MemorySegment device, MemorySegment deferredOperation, int infoCount, MemorySegment pInfos) {
        var mh$ = vkBuildMicromapsEXT$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, infoCount, pInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$0,"vkCopyMicromapEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo);
     * }
     */
    public static int vkCopyMicromapEXT(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyMicromapEXT$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyMicromapToMemoryEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$1,"vkCopyMicromapToMemoryEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo);
     * }
     */
    public static int vkCopyMicromapToMemoryEXT(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyMicromapToMemoryEXT$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyMemoryToMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$2,"vkCopyMemoryToMicromapEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo);
     * }
     */
    public static int vkCopyMemoryToMicromapEXT(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyMemoryToMicromapEXT$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWriteMicromapsPropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$3,"vkWriteMicromapsPropertiesEXT");
    }
    /**
     * {@snippet :
     * VkResult vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride);
     * }
     */
    public static int vkWriteMicromapsPropertiesEXT(MemorySegment device, int micromapCount, MemorySegment pMicromaps, int queryType, long dataSize, MemorySegment pData, long stride) {
        var mh$ = vkWriteMicromapsPropertiesEXT$MH();
        try {
            return (int)mh$.invokeExact(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$4,"vkCmdCopyMicromapEXT");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo);
     * }
     */
    public static void vkCmdCopyMicromapEXT(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyMicromapEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMicromapToMemoryEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$957.const$5,"vkCmdCopyMicromapToMemoryEXT");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo);
     * }
     */
    public static void vkCmdCopyMicromapToMemoryEXT(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyMicromapToMemoryEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMemoryToMicromapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.const$0,"vkCmdCopyMemoryToMicromapEXT");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo);
     * }
     */
    public static void vkCmdCopyMemoryToMicromapEXT(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyMemoryToMicromapEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteMicromapsPropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.const$1,"vkCmdWriteMicromapsPropertiesEXT");
    }
    /**
     * {@snippet :
     * void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
     * }
     */
    public static void vkCmdWriteMicromapsPropertiesEXT(MemorySegment commandBuffer, int micromapCount, MemorySegment pMicromaps, int queryType, MemorySegment queryPool, int firstQuery) {
        var mh$ = vkCmdWriteMicromapsPropertiesEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceMicromapCompatibilityEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.const$2,"vkGetDeviceMicromapCompatibilityEXT");
    }
    /**
     * {@snippet :
     * void vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility);
     * }
     */
    public static void vkGetDeviceMicromapCompatibilityEXT(MemorySegment device, MemorySegment pVersionInfo, MemorySegment pCompatibility) {
        var mh$ = vkGetDeviceMicromapCompatibilityEXT$MH();
        try {
            mh$.invokeExact(device, pVersionInfo, pCompatibility);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetMicromapBuildSizesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.const$3,"vkGetMicromapBuildSizesEXT");
    }
    /**
     * {@snippet :
     * void vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo);
     * }
     */
    public static void vkGetMicromapBuildSizesEXT(MemorySegment device, int buildType, MemorySegment pBuildInfo, MemorySegment pSizeInfo) {
        var mh$ = vkGetMicromapBuildSizesEXT$MH();
        try {
            mh$.invokeExact(device, buildType, pBuildInfo, pSizeInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawClusterHUAWEI$MH() {
        return RuntimeHelper.requireNonNull(constants$960.const$4,"vkCmdDrawClusterHUAWEI");
    }
    /**
     * {@snippet :
     * void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
     * }
     */
    public static void vkCmdDrawClusterHUAWEI(MemorySegment commandBuffer, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDrawClusterHUAWEI$MH();
        try {
            mh$.invokeExact(commandBuffer, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawClusterIndirectHUAWEI$MH() {
        return RuntimeHelper.requireNonNull(constants$960.const$5,"vkCmdDrawClusterIndirectHUAWEI");
    }
    /**
     * {@snippet :
     * void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
     * }
     */
    public static void vkCmdDrawClusterIndirectHUAWEI(MemorySegment commandBuffer, MemorySegment buffer, long offset) {
        var mh$ = vkCmdDrawClusterIndirectHUAWEI$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetDeviceMemoryPriorityEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$963.const$4,"vkSetDeviceMemoryPriorityEXT");
    }
    /**
     * {@snippet :
     * void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority);
     * }
     */
    public static void vkSetDeviceMemoryPriorityEXT(MemorySegment device, MemorySegment memory, float priority) {
        var mh$ = vkSetDeviceMemoryPriorityEXT$MH();
        try {
            mh$.invokeExact(device, memory, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorSetLayoutHostMappingInfoVALVE$MH() {
        return RuntimeHelper.requireNonNull(constants$969.const$0,"vkGetDescriptorSetLayoutHostMappingInfoVALVE");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping);
     * }
     */
    public static void vkGetDescriptorSetLayoutHostMappingInfoVALVE(MemorySegment device, MemorySegment pBindingReference, MemorySegment pHostMapping) {
        var mh$ = vkGetDescriptorSetLayoutHostMappingInfoVALVE$MH();
        try {
            mh$.invokeExact(device, pBindingReference, pHostMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorSetHostMappingVALVE$MH() {
        return RuntimeHelper.requireNonNull(constants$969.const$1,"vkGetDescriptorSetHostMappingVALVE");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData);
     * }
     */
    public static void vkGetDescriptorSetHostMappingVALVE(MemorySegment device, MemorySegment descriptorSet, MemorySegment ppData) {
        var mh$ = vkGetDescriptorSetHostMappingVALVE$MH();
        try {
            mh$.invokeExact(device, descriptorSet, ppData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMemoryIndirectNV$MH() {
        return RuntimeHelper.requireNonNull(constants$976.const$0,"vkCmdCopyMemoryIndirectNV");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride);
     * }
     */
    public static void vkCmdCopyMemoryIndirectNV(MemorySegment commandBuffer, long copyBufferAddress, int copyCount, int stride) {
        var mh$ = vkCmdCopyMemoryIndirectNV$MH();
        try {
            mh$.invokeExact(commandBuffer, copyBufferAddress, copyCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMemoryToImageIndirectNV$MH() {
        return RuntimeHelper.requireNonNull(constants$976.const$1,"vkCmdCopyMemoryToImageIndirectNV");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources);
     * }
     */
    public static void vkCmdCopyMemoryToImageIndirectNV(MemorySegment commandBuffer, long copyBufferAddress, int copyCount, int stride, MemorySegment dstImage, int dstImageLayout, MemorySegment pImageSubresources) {
        var mh$ = vkCmdCopyMemoryToImageIndirectNV$MH();
        try {
            mh$.invokeExact(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long VkMemoryDecompressionMethodFlagBitsNV;
     * }
     */
    public static final OfLong VkMemoryDecompressionMethodFlagBitsNV = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkMemoryDecompressionMethodFlagsNV;
     * }
     */
    public static final OfLong VkMemoryDecompressionMethodFlagsNV = JAVA_LONG;
    public static MethodHandle vkCmdDecompressMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$979.const$3,"vkCmdDecompressMemoryNV");
    }
    /**
     * {@snippet :
     * void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions);
     * }
     */
    public static void vkCmdDecompressMemoryNV(MemorySegment commandBuffer, int decompressRegionCount, MemorySegment pDecompressMemoryRegions) {
        var mh$ = vkCmdDecompressMemoryNV$MH();
        try {
            mh$.invokeExact(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDecompressMemoryIndirectCountNV$MH() {
        return RuntimeHelper.requireNonNull(constants$979.const$4,"vkCmdDecompressMemoryIndirectCountNV");
    }
    /**
     * {@snippet :
     * void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride);
     * }
     */
    public static void vkCmdDecompressMemoryIndirectCountNV(MemorySegment commandBuffer, long indirectCommandsAddress, long indirectCommandsCountAddress, int stride) {
        var mh$ = vkCmdDecompressMemoryIndirectCountNV$MH();
        try {
            mh$.invokeExact(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetTessellationDomainOriginEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$1,"vkCmdSetTessellationDomainOriginEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin);
     * }
     */
    public static void vkCmdSetTessellationDomainOriginEXT(MemorySegment commandBuffer, int domainOrigin) {
        var mh$ = vkCmdSetTessellationDomainOriginEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, domainOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthClampEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$2,"vkCmdSetDepthClampEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable);
     * }
     */
    public static void vkCmdSetDepthClampEnableEXT(MemorySegment commandBuffer, int depthClampEnable) {
        var mh$ = vkCmdSetDepthClampEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthClampEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPolygonModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$3,"vkCmdSetPolygonModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode);
     * }
     */
    public static void vkCmdSetPolygonModeEXT(MemorySegment commandBuffer, int polygonMode) {
        var mh$ = vkCmdSetPolygonModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, polygonMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRasterizationSamplesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$4,"vkCmdSetRasterizationSamplesEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples);
     * }
     */
    public static void vkCmdSetRasterizationSamplesEXT(MemorySegment commandBuffer, int rasterizationSamples) {
        var mh$ = vkCmdSetRasterizationSamplesEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, rasterizationSamples);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetSampleMaskEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.const$5,"vkCmdSetSampleMaskEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask);
     * }
     */
    public static void vkCmdSetSampleMaskEXT(MemorySegment commandBuffer, int samples, MemorySegment pSampleMask) {
        var mh$ = vkCmdSetSampleMaskEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, samples, pSampleMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetAlphaToCoverageEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$0,"vkCmdSetAlphaToCoverageEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable);
     * }
     */
    public static void vkCmdSetAlphaToCoverageEnableEXT(MemorySegment commandBuffer, int alphaToCoverageEnable) {
        var mh$ = vkCmdSetAlphaToCoverageEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, alphaToCoverageEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetAlphaToOneEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$1,"vkCmdSetAlphaToOneEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable);
     * }
     */
    public static void vkCmdSetAlphaToOneEnableEXT(MemorySegment commandBuffer, int alphaToOneEnable) {
        var mh$ = vkCmdSetAlphaToOneEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, alphaToOneEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetLogicOpEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$2,"vkCmdSetLogicOpEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable);
     * }
     */
    public static void vkCmdSetLogicOpEnableEXT(MemorySegment commandBuffer, int logicOpEnable) {
        var mh$ = vkCmdSetLogicOpEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, logicOpEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetColorBlendEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$3,"vkCmdSetColorBlendEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables);
     * }
     */
    public static void vkCmdSetColorBlendEnableEXT(MemorySegment commandBuffer, int firstAttachment, int attachmentCount, MemorySegment pColorBlendEnables) {
        var mh$ = vkCmdSetColorBlendEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetColorBlendEquationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$4,"vkCmdSetColorBlendEquationEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations);
     * }
     */
    public static void vkCmdSetColorBlendEquationEXT(MemorySegment commandBuffer, int firstAttachment, int attachmentCount, MemorySegment pColorBlendEquations) {
        var mh$ = vkCmdSetColorBlendEquationEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetColorWriteMaskEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.const$5,"vkCmdSetColorWriteMaskEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks);
     * }
     */
    public static void vkCmdSetColorWriteMaskEXT(MemorySegment commandBuffer, int firstAttachment, int attachmentCount, MemorySegment pColorWriteMasks) {
        var mh$ = vkCmdSetColorWriteMaskEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRasterizationStreamEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$0,"vkCmdSetRasterizationStreamEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream);
     * }
     */
    public static void vkCmdSetRasterizationStreamEXT(MemorySegment commandBuffer, int rasterizationStream) {
        var mh$ = vkCmdSetRasterizationStreamEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, rasterizationStream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetConservativeRasterizationModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$1,"vkCmdSetConservativeRasterizationModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode);
     * }
     */
    public static void vkCmdSetConservativeRasterizationModeEXT(MemorySegment commandBuffer, int conservativeRasterizationMode) {
        var mh$ = vkCmdSetConservativeRasterizationModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, conservativeRasterizationMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetExtraPrimitiveOverestimationSizeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$2,"vkCmdSetExtraPrimitiveOverestimationSizeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
     * }
     */
    public static void vkCmdSetExtraPrimitiveOverestimationSizeEXT(MemorySegment commandBuffer, float extraPrimitiveOverestimationSize) {
        var mh$ = vkCmdSetExtraPrimitiveOverestimationSizeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, extraPrimitiveOverestimationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthClipEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$3,"vkCmdSetDepthClipEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable);
     * }
     */
    public static void vkCmdSetDepthClipEnableEXT(MemorySegment commandBuffer, int depthClipEnable) {
        var mh$ = vkCmdSetDepthClipEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, depthClipEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetSampleLocationsEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$4,"vkCmdSetSampleLocationsEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable);
     * }
     */
    public static void vkCmdSetSampleLocationsEnableEXT(MemorySegment commandBuffer, int sampleLocationsEnable) {
        var mh$ = vkCmdSetSampleLocationsEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, sampleLocationsEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetColorBlendAdvancedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.const$5,"vkCmdSetColorBlendAdvancedEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced);
     * }
     */
    public static void vkCmdSetColorBlendAdvancedEXT(MemorySegment commandBuffer, int firstAttachment, int attachmentCount, MemorySegment pColorBlendAdvanced) {
        var mh$ = vkCmdSetColorBlendAdvancedEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetProvokingVertexModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$0,"vkCmdSetProvokingVertexModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);
     * }
     */
    public static void vkCmdSetProvokingVertexModeEXT(MemorySegment commandBuffer, int provokingVertexMode) {
        var mh$ = vkCmdSetProvokingVertexModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, provokingVertexMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetLineRasterizationModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$1,"vkCmdSetLineRasterizationModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);
     * }
     */
    public static void vkCmdSetLineRasterizationModeEXT(MemorySegment commandBuffer, int lineRasterizationMode) {
        var mh$ = vkCmdSetLineRasterizationModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, lineRasterizationMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetLineStippleEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$2,"vkCmdSetLineStippleEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable);
     * }
     */
    public static void vkCmdSetLineStippleEnableEXT(MemorySegment commandBuffer, int stippledLineEnable) {
        var mh$ = vkCmdSetLineStippleEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, stippledLineEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthClipNegativeOneToOneEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$3,"vkCmdSetDepthClipNegativeOneToOneEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne);
     * }
     */
    public static void vkCmdSetDepthClipNegativeOneToOneEXT(MemorySegment commandBuffer, int negativeOneToOne) {
        var mh$ = vkCmdSetDepthClipNegativeOneToOneEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, negativeOneToOne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportWScalingEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$4,"vkCmdSetViewportWScalingEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable);
     * }
     */
    public static void vkCmdSetViewportWScalingEnableNV(MemorySegment commandBuffer, int viewportWScalingEnable) {
        var mh$ = vkCmdSetViewportWScalingEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, viewportWScalingEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportSwizzleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.const$5,"vkCmdSetViewportSwizzleNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles);
     * }
     */
    public static void vkCmdSetViewportSwizzleNV(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pViewportSwizzles) {
        var mh$ = vkCmdSetViewportSwizzleNV$MH();
        try {
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageToColorEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$0,"vkCmdSetCoverageToColorEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable);
     * }
     */
    public static void vkCmdSetCoverageToColorEnableNV(MemorySegment commandBuffer, int coverageToColorEnable) {
        var mh$ = vkCmdSetCoverageToColorEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageToColorEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageToColorLocationNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$1,"vkCmdSetCoverageToColorLocationNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation);
     * }
     */
    public static void vkCmdSetCoverageToColorLocationNV(MemorySegment commandBuffer, int coverageToColorLocation) {
        var mh$ = vkCmdSetCoverageToColorLocationNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageToColorLocation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageModulationModeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$2,"vkCmdSetCoverageModulationModeNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode);
     * }
     */
    public static void vkCmdSetCoverageModulationModeNV(MemorySegment commandBuffer, int coverageModulationMode) {
        var mh$ = vkCmdSetCoverageModulationModeNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageModulationMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageModulationTableEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$3,"vkCmdSetCoverageModulationTableEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable);
     * }
     */
    public static void vkCmdSetCoverageModulationTableEnableNV(MemorySegment commandBuffer, int coverageModulationTableEnable) {
        var mh$ = vkCmdSetCoverageModulationTableEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageModulationTableEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageModulationTableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$4,"vkCmdSetCoverageModulationTableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, float* pCoverageModulationTable);
     * }
     */
    public static void vkCmdSetCoverageModulationTableNV(MemorySegment commandBuffer, int coverageModulationTableCount, MemorySegment pCoverageModulationTable) {
        var mh$ = vkCmdSetCoverageModulationTableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetShadingRateImageEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.const$5,"vkCmdSetShadingRateImageEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable);
     * }
     */
    public static void vkCmdSetShadingRateImageEnableNV(MemorySegment commandBuffer, int shadingRateImageEnable) {
        var mh$ = vkCmdSetShadingRateImageEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, shadingRateImageEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRepresentativeFragmentTestEnableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$0,"vkCmdSetRepresentativeFragmentTestEnableNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable);
     * }
     */
    public static void vkCmdSetRepresentativeFragmentTestEnableNV(MemorySegment commandBuffer, int representativeFragmentTestEnable) {
        var mh$ = vkCmdSetRepresentativeFragmentTestEnableNV$MH();
        try {
            mh$.invokeExact(commandBuffer, representativeFragmentTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCoverageReductionModeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.const$1,"vkCmdSetCoverageReductionModeNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode);
     * }
     */
    public static void vkCmdSetCoverageReductionModeNV(MemorySegment commandBuffer, int coverageReductionMode) {
        var mh$ = vkCmdSetCoverageReductionModeNV$MH();
        try {
            mh$.invokeExact(commandBuffer, coverageReductionMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_MERGED_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0;
     * }
     */
    public static int VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1;
     * }
     */
    public static int VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647;
     * }
     */
    public static int VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDirectDriverLoadingFlagsLUNARG;
     * }
     */
    public static final OfInt VkDirectDriverLoadingFlagsLUNARG = JAVA_INT;
    public static MethodHandle vkGetShaderModuleIdentifierEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.const$5,"vkGetShaderModuleIdentifierEXT");
    }
    /**
     * {@snippet :
     * void vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier);
     * }
     */
    public static void vkGetShaderModuleIdentifierEXT(MemorySegment device, MemorySegment shaderModule, MemorySegment pIdentifier) {
        var mh$ = vkGetShaderModuleIdentifierEXT$MH();
        try {
            mh$.invokeExact(device, shaderModule, pIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetShaderModuleCreateInfoIdentifierEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.const$0,"vkGetShaderModuleCreateInfoIdentifierEXT");
    }
    /**
     * {@snippet :
     * void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier);
     * }
     */
    public static void vkGetShaderModuleCreateInfoIdentifierEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pIdentifier) {
        var mh$ = vkGetShaderModuleCreateInfoIdentifierEXT$MH();
        try {
            mh$.invokeExact(device, pCreateInfo, pIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkOpticalFlowSessionNV_T* VkOpticalFlowSessionNV;
     * }
     */
    public static final AddressLayout VkOpticalFlowSessionNV = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0;
     * }
     */
    public static int VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2;
     * }
     */
    public static int VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3;
     * }
     */
    public static int VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkOpticalFlowGridSizeFlagsNV;
     * }
     */
    public static final OfInt VkOpticalFlowGridSizeFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_COST_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkOpticalFlowUsageFlagsNV;
     * }
     */
    public static final OfInt VkOpticalFlowUsageFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkOpticalFlowSessionCreateFlagsNV;
     * }
     */
    public static final OfInt VkOpticalFlowSessionCreateFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1;
     * }
     */
    public static int VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkOpticalFlowExecuteFlagsNV;
     * }
     */
    public static final OfInt VkOpticalFlowExecuteFlagsNV = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceOpticalFlowImageFormatsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$4,"vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceOpticalFlowImageFormatsNV(MemorySegment physicalDevice, MemorySegment pOpticalFlowImageFormatInfo, MemorySegment pFormatCount, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceOpticalFlowImageFormatsNV$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateOpticalFlowSessionNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.const$5,"vkCreateOpticalFlowSessionNV");
    }
    /**
     * {@snippet :
     * VkResult vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession);
     * }
     */
    public static int vkCreateOpticalFlowSessionNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSession) {
        var mh$ = vkCreateOpticalFlowSessionNV$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSession);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyOpticalFlowSessionNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.const$0,"vkDestroyOpticalFlowSessionNV");
    }
    /**
     * {@snippet :
     * void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyOpticalFlowSessionNV(MemorySegment device, MemorySegment session, MemorySegment pAllocator) {
        var mh$ = vkDestroyOpticalFlowSessionNV$MH();
        try {
            mh$.invokeExact(device, session, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindOpticalFlowSessionImageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.const$1,"vkBindOpticalFlowSessionImageNV");
    }
    /**
     * {@snippet :
     * VkResult vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout);
     * }
     */
    public static int vkBindOpticalFlowSessionImageNV(MemorySegment device, MemorySegment session, int bindingPoint, MemorySegment view, int layout) {
        var mh$ = vkBindOpticalFlowSessionImageNV$MH();
        try {
            return (int)mh$.invokeExact(device, session, bindingPoint, view, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdOpticalFlowExecuteNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.const$2,"vkCmdOpticalFlowExecuteNV");
    }
    /**
     * {@snippet :
     * void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo);
     * }
     */
    public static void vkCmdOpticalFlowExecuteNV(MemorySegment commandBuffer, MemorySegment session, MemorySegment pExecuteInfo) {
        var mh$ = vkCmdOpticalFlowExecuteNV$MH();
        try {
            mh$.invokeExact(commandBuffer, session, pExecuteInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkShaderEXT_T* VkShaderEXT;
     * }
     */
    public static final AddressLayout VkShaderEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_BINARY_EXT = 0;
     * }
     */
    public static int VK_SHADER_CODE_TYPE_BINARY_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_SPIRV_EXT = 1;
     * }
     */
    public static int VK_SHADER_CODE_TYPE_SPIRV_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_SHADER_CODE_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1;
     * }
     */
    public static int VK_SHADER_CREATE_LINK_STAGE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2;
     * }
     */
    public static int VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4;
     * }
     */
    public static int VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8;
     * }
     */
    public static int VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16;
     * }
     */
    public static int VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32;
     * }
     */
    public static int VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64;
     * }
     */
    public static int VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkShaderCreateFlagsEXT;
     * }
     */
    public static final OfInt VkShaderCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreateShadersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$2,"vkCreateShadersEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders);
     * }
     */
    public static int vkCreateShadersEXT(MemorySegment device, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pShaders) {
        var mh$ = vkCreateShadersEXT$MH();
        try {
            return (int)mh$.invokeExact(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyShaderEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$3,"vkDestroyShaderEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyShaderEXT(MemorySegment device, MemorySegment shader, MemorySegment pAllocator) {
        var mh$ = vkDestroyShaderEXT$MH();
        try {
            mh$.invokeExact(device, shader, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetShaderBinaryDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$4,"vkGetShaderBinaryDataEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData);
     * }
     */
    public static int vkGetShaderBinaryDataEXT(MemorySegment device, MemorySegment shader, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetShaderBinaryDataEXT$MH();
        try {
            return (int)mh$.invokeExact(device, shader, pDataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindShadersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.const$5,"vkCmdBindShadersEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders);
     * }
     */
    public static void vkCmdBindShadersEXT(MemorySegment commandBuffer, int stageCount, MemorySegment pStages, MemorySegment pShaders) {
        var mh$ = vkCmdBindShadersEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, stageCount, pStages, pShaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetFramebufferTilePropertiesQCOM$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$3,"vkGetFramebufferTilePropertiesQCOM");
    }
    /**
     * {@snippet :
     * VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties);
     * }
     */
    public static int vkGetFramebufferTilePropertiesQCOM(MemorySegment device, MemorySegment framebuffer, MemorySegment pPropertiesCount, MemorySegment pProperties) {
        var mh$ = vkGetFramebufferTilePropertiesQCOM$MH();
        try {
            return (int)mh$.invokeExact(device, framebuffer, pPropertiesCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDynamicRenderingTilePropertiesQCOM$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.const$4,"vkGetDynamicRenderingTilePropertiesQCOM");
    }
    /**
     * {@snippet :
     * VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties);
     * }
     */
    public static int vkGetDynamicRenderingTilePropertiesQCOM(MemorySegment device, MemorySegment pRenderingInfo, MemorySegment pProperties) {
        var mh$ = vkGetDynamicRenderingTilePropertiesQCOM$MH();
        try {
            return (int)mh$.invokeExact(device, pRenderingInfo, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0;
     * }
     */
    public static int VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1;
     * }
     */
    public static int VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    public static MethodHandle vkCmdSetAttachmentFeedbackLoopEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.const$0,"vkCmdSetAttachmentFeedbackLoopEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask);
     * }
     */
    public static void vkCmdSetAttachmentFeedbackLoopEnableEXT(MemorySegment commandBuffer, int aspectMask) {
        var mh$ = vkCmdSetAttachmentFeedbackLoopEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, aspectMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkAccelerationStructureCreateFlagsKHR;
     * }
     */
    public static final OfInt VkAccelerationStructureCreateFlagsKHR = JAVA_INT;
    public static MethodHandle vkCreateAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$3,"vkCreateAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure);
     * }
     */
    public static int vkCreateAccelerationStructureKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pAccelerationStructure) {
        var mh$ = vkCreateAccelerationStructureKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pAccelerationStructure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$4,"vkDestroyAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyAccelerationStructureKHR(MemorySegment device, MemorySegment accelerationStructure, MemorySegment pAllocator) {
        var mh$ = vkDestroyAccelerationStructureKHR$MH();
        try {
            mh$.invokeExact(device, accelerationStructure, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBuildAccelerationStructuresKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.const$5,"vkCmdBuildAccelerationStructuresKHR");
    }
    /**
     * {@snippet :
     * void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);
     * }
     */
    public static void vkCmdBuildAccelerationStructuresKHR(MemorySegment commandBuffer, int infoCount, MemorySegment pInfos, MemorySegment ppBuildRangeInfos) {
        var mh$ = vkCmdBuildAccelerationStructuresKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBuildAccelerationStructuresIndirectKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$0,"vkCmdBuildAccelerationStructuresIndirectKHR");
    }
    /**
     * {@snippet :
     * void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t** ppMaxPrimitiveCounts);
     * }
     */
    public static void vkCmdBuildAccelerationStructuresIndirectKHR(MemorySegment commandBuffer, int infoCount, MemorySegment pInfos, MemorySegment pIndirectDeviceAddresses, MemorySegment pIndirectStrides, MemorySegment ppMaxPrimitiveCounts) {
        var mh$ = vkCmdBuildAccelerationStructuresIndirectKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBuildAccelerationStructuresKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$1,"vkBuildAccelerationStructuresKHR");
    }
    /**
     * {@snippet :
     * VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);
     * }
     */
    public static int vkBuildAccelerationStructuresKHR(MemorySegment device, MemorySegment deferredOperation, int infoCount, MemorySegment pInfos, MemorySegment ppBuildRangeInfos) {
        var mh$ = vkBuildAccelerationStructuresKHR$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$2,"vkCopyAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo);
     * }
     */
    public static int vkCopyAccelerationStructureKHR(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyAccelerationStructureKHR$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyAccelerationStructureToMemoryKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$3,"vkCopyAccelerationStructureToMemoryKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);
     * }
     */
    public static int vkCopyAccelerationStructureToMemoryKHR(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyAccelerationStructureToMemoryKHR$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCopyMemoryToAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$4,"vkCopyMemoryToAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);
     * }
     */
    public static int vkCopyMemoryToAccelerationStructureKHR(MemorySegment device, MemorySegment deferredOperation, MemorySegment pInfo) {
        var mh$ = vkCopyMemoryToAccelerationStructureKHR$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWriteAccelerationStructuresPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.const$5,"vkWriteAccelerationStructuresPropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride);
     * }
     */
    public static int vkWriteAccelerationStructuresPropertiesKHR(MemorySegment device, int accelerationStructureCount, MemorySegment pAccelerationStructures, int queryType, long dataSize, MemorySegment pData, long stride) {
        var mh$ = vkWriteAccelerationStructuresPropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$0,"vkCmdCopyAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo);
     * }
     */
    public static void vkCmdCopyAccelerationStructureKHR(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyAccelerationStructureKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyAccelerationStructureToMemoryKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$1,"vkCmdCopyAccelerationStructureToMemoryKHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);
     * }
     */
    public static void vkCmdCopyAccelerationStructureToMemoryKHR(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyAccelerationStructureToMemoryKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyMemoryToAccelerationStructureKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$2,"vkCmdCopyMemoryToAccelerationStructureKHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);
     * }
     */
    public static void vkCmdCopyMemoryToAccelerationStructureKHR(MemorySegment commandBuffer, MemorySegment pInfo) {
        var mh$ = vkCmdCopyMemoryToAccelerationStructureKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetAccelerationStructureDeviceAddressKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$3,"vkGetAccelerationStructureDeviceAddressKHR");
    }
    /**
     * {@snippet :
     * VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo);
     * }
     */
    public static long vkGetAccelerationStructureDeviceAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetAccelerationStructureDeviceAddressKHR$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteAccelerationStructuresPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$4,"vkCmdWriteAccelerationStructuresPropertiesKHR");
    }
    /**
     * {@snippet :
     * void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
     * }
     */
    public static void vkCmdWriteAccelerationStructuresPropertiesKHR(MemorySegment commandBuffer, int accelerationStructureCount, MemorySegment pAccelerationStructures, int queryType, MemorySegment queryPool, int firstQuery) {
        var mh$ = vkCmdWriteAccelerationStructuresPropertiesKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceAccelerationStructureCompatibilityKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.const$5,"vkGetDeviceAccelerationStructureCompatibilityKHR");
    }
    /**
     * {@snippet :
     * void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility);
     * }
     */
    public static void vkGetDeviceAccelerationStructureCompatibilityKHR(MemorySegment device, MemorySegment pVersionInfo, MemorySegment pCompatibility) {
        var mh$ = vkGetDeviceAccelerationStructureCompatibilityKHR$MH();
        try {
            mh$.invokeExact(device, pVersionInfo, pCompatibility);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetAccelerationStructureBuildSizesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.const$0,"vkGetAccelerationStructureBuildSizesKHR");
    }
    /**
     * {@snippet :
     * void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);
     * }
     */
    public static void vkGetAccelerationStructureBuildSizesKHR(MemorySegment device, int buildType, MemorySegment pBuildInfo, MemorySegment pMaxPrimitiveCounts, MemorySegment pSizeInfo) {
        var mh$ = vkGetAccelerationStructureBuildSizesKHR$MH();
        try {
            mh$.invokeExact(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0;
     * }
     */
    public static int VK_SHADER_GROUP_SHADER_GENERAL_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1;
     * }
     */
    public static int VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2;
     * }
     */
    public static int VK_SHADER_GROUP_SHADER_ANY_HIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3;
     * }
     */
    public static int VK_SHADER_GROUP_SHADER_INTERSECTION_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    public static MethodHandle vkCmdTraceRaysKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.const$5,"vkCmdTraceRaysKHR");
    }
    /**
     * {@snippet :
     * void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth);
     * }
     */
    public static void vkCmdTraceRaysKHR(MemorySegment commandBuffer, MemorySegment pRaygenShaderBindingTable, MemorySegment pMissShaderBindingTable, MemorySegment pHitShaderBindingTable, MemorySegment pCallableShaderBindingTable, int width, int height, int depth) {
        var mh$ = vkCmdTraceRaysKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateRayTracingPipelinesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.const$0,"vkCreateRayTracingPipelinesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
     * }
     */
    public static int vkCreateRayTracingPipelinesKHR(MemorySegment device, MemorySegment deferredOperation, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateRayTracingPipelinesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRayTracingCaptureReplayShaderGroupHandlesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.const$1,"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData);
     * }
     */
    public static int vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(MemorySegment device, MemorySegment pipeline, int firstGroup, int groupCount, long dataSize, MemorySegment pData) {
        var mh$ = vkGetRayTracingCaptureReplayShaderGroupHandlesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdTraceRaysIndirectKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.const$2,"vkCmdTraceRaysIndirectKHR");
    }
    /**
     * {@snippet :
     * void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
     * }
     */
    public static void vkCmdTraceRaysIndirectKHR(MemorySegment commandBuffer, MemorySegment pRaygenShaderBindingTable, MemorySegment pMissShaderBindingTable, MemorySegment pHitShaderBindingTable, MemorySegment pCallableShaderBindingTable, long indirectDeviceAddress) {
        var mh$ = vkCmdTraceRaysIndirectKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRayTracingShaderGroupStackSizeKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.const$3,"vkGetRayTracingShaderGroupStackSizeKHR");
    }
    /**
     * {@snippet :
     * VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader);
     * }
     */
    public static long vkGetRayTracingShaderGroupStackSizeKHR(MemorySegment device, MemorySegment pipeline, int group, int groupShader) {
        var mh$ = vkGetRayTracingShaderGroupStackSizeKHR$MH();
        try {
            return (long)mh$.invokeExact(device, pipeline, group, groupShader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRayTracingPipelineStackSizeKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.const$4,"vkCmdSetRayTracingPipelineStackSizeKHR");
    }
    /**
     * {@snippet :
     * void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);
     * }
     */
    public static void vkCmdSetRayTracingPipelineStackSizeKHR(MemorySegment commandBuffer, int pipelineStackSize) {
        var mh$ = vkCmdSetRayTracingPipelineStackSizeKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineStackSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMeshTasksEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.const$3,"vkCmdDrawMeshTasksEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
     * }
     */
    public static void vkCmdDrawMeshTasksEXT(MemorySegment commandBuffer, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDrawMeshTasksEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMeshTasksIndirectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.const$4,"vkCmdDrawMeshTasksIndirectEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectEXT(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawMeshTasksIndirectCountEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.const$5,"vkCmdDrawMeshTasksIndirectCountEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectCountEXT(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectCountEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int GLenum;
     * }
     */
    public static final OfInt GLenum = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char GLboolean;
     * }
     */
    public static final OfByte GLboolean = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned int GLbitfield;
     * }
     */
    public static final OfInt GLbitfield = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char GLbyte;
     * }
     */
    public static final OfByte GLbyte = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short GLshort;
     * }
     */
    public static final OfShort GLshort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int GLint;
     * }
     */
    public static final OfInt GLint = JAVA_INT;
    /**
     * {@snippet :
     * typedef int GLsizei;
     * }
     */
    public static final OfInt GLsizei = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char GLubyte;
     * }
     */
    public static final OfByte GLubyte = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short GLushort;
     * }
     */
    public static final OfShort GLushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int GLuint;
     * }
     */
    public static final OfInt GLuint = JAVA_INT;
    /**
     * {@snippet :
     * typedef float GLfloat;
     * }
     */
    public static final OfFloat GLfloat = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef float GLclampf;
     * }
     */
    public static final OfFloat GLclampf = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double GLdouble;
     * }
     */
    public static final OfDouble GLdouble = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double GLclampd;
     * }
     */
    public static final OfDouble GLclampd = JAVA_DOUBLE;
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.const$1,"glAccum");
    }
    /**
     * {@snippet :
     * void glAccum(GLenum op, GLfloat value);
     * }
     */
    public static void glAccum(int op, float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.const$2,"glAlphaFunc");
    }
    /**
     * {@snippet :
     * void glAlphaFunc(GLenum func, GLclampf ref);
     * }
     */
    public static void glAlphaFunc(int func, float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.const$4,"glAreTexturesResident");
    }
    /**
     * {@snippet :
     * GLboolean glAreTexturesResident(GLsizei n, const GLuint* textures, GLboolean* residences);
     * }
     */
    public static byte glAreTexturesResident(int n, MemorySegment textures, MemorySegment residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.const$6,"glArrayElement");
    }
    /**
     * {@snippet :
     * void glArrayElement(GLint i);
     * }
     */
    public static void glArrayElement(int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.const$0,"glBegin");
    }
    /**
     * {@snippet :
     * void glBegin(GLenum mode);
     * }
     */
    public static void glBegin(int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.const$2,"glBindTexture");
    }
    /**
     * {@snippet :
     * void glBindTexture(GLenum target, GLuint texture);
     * }
     */
    public static void glBindTexture(int target, int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.const$4,"glBitmap");
    }
    /**
     * {@snippet :
     * void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
     * }
     */
    public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, MemorySegment bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.const$5,"glBlendFunc");
    }
    /**
     * {@snippet :
     * void glBlendFunc(GLenum sfactor, GLenum dfactor);
     * }
     */
    public static void glBlendFunc(int sfactor, int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.const$0,"glCallList");
    }
    /**
     * {@snippet :
     * void glCallList(GLuint list);
     * }
     */
    public static void glCallList(int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.const$2,"glCallLists");
    }
    /**
     * {@snippet :
     * void glCallLists(GLsizei n, GLenum type, const GLvoid* lists);
     * }
     */
    public static void glCallLists(int n, int type, MemorySegment lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.const$3,"glClear");
    }
    /**
     * {@snippet :
     * void glClear(GLbitfield mask);
     * }
     */
    public static void glClear(int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.const$5,"glClearAccum");
    }
    /**
     * {@snippet :
     * void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
     * }
     */
    public static void glClearAccum(float red, float green, float blue, float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.const$0,"glClearColor");
    }
    /**
     * {@snippet :
     * void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
     * }
     */
    public static void glClearColor(float red, float green, float blue, float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.const$2,"glClearDepth");
    }
    /**
     * {@snippet :
     * void glClearDepth(GLclampd depth);
     * }
     */
    public static void glClearDepth(double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.const$4,"glClearIndex");
    }
    /**
     * {@snippet :
     * void glClearIndex(GLfloat c);
     * }
     */
    public static void glClearIndex(float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.const$5,"glClearStencil");
    }
    /**
     * {@snippet :
     * void glClearStencil(GLint s);
     * }
     */
    public static void glClearStencil(int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.const$1,"glClipPlane");
    }
    /**
     * {@snippet :
     * void glClipPlane(GLenum plane, const GLdouble* equation);
     * }
     */
    public static void glClipPlane(int plane, MemorySegment equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.const$3,"glColor3b");
    }
    /**
     * {@snippet :
     * void glColor3b(GLbyte red, GLbyte green, GLbyte blue);
     * }
     */
    public static void glColor3b(byte red, byte green, byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.const$4,"glColor3bv");
    }
    /**
     * {@snippet :
     * void glColor3bv(const GLbyte* v);
     * }
     */
    public static void glColor3bv(MemorySegment v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.const$6,"glColor3d");
    }
    /**
     * {@snippet :
     * void glColor3d(GLdouble red, GLdouble green, GLdouble blue);
     * }
     */
    public static void glColor3d(double red, double green, double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.const$0,"glColor3dv");
    }
    /**
     * {@snippet :
     * void glColor3dv(const GLdouble* v);
     * }
     */
    public static void glColor3dv(MemorySegment v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.const$2,"glColor3f");
    }
    /**
     * {@snippet :
     * void glColor3f(GLfloat red, GLfloat green, GLfloat blue);
     * }
     */
    public static void glColor3f(float red, float green, float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.const$3,"glColor3fv");
    }
    /**
     * {@snippet :
     * void glColor3fv(const GLfloat* v);
     * }
     */
    public static void glColor3fv(MemorySegment v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.const$5,"glColor3i");
    }
    /**
     * {@snippet :
     * void glColor3i(GLint red, GLint green, GLint blue);
     * }
     */
    public static void glColor3i(int red, int green, int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.const$0,"glColor3iv");
    }
    /**
     * {@snippet :
     * void glColor3iv(const GLint* v);
     * }
     */
    public static void glColor3iv(MemorySegment v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.const$2,"glColor3s");
    }
    /**
     * {@snippet :
     * void glColor3s(GLshort red, GLshort green, GLshort blue);
     * }
     */
    public static void glColor3s(short red, short green, short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.const$3,"glColor3sv");
    }
    /**
     * {@snippet :
     * void glColor3sv(const GLshort* v);
     * }
     */
    public static void glColor3sv(MemorySegment v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.const$4,"glColor3ub");
    }
    /**
     * {@snippet :
     * void glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
     * }
     */
    public static void glColor3ub(byte red, byte green, byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.const$5,"glColor3ubv");
    }
    /**
     * {@snippet :
     * void glColor3ubv(const GLubyte* v);
     * }
     */
    public static void glColor3ubv(MemorySegment v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.const$0,"glColor3ui");
    }
    /**
     * {@snippet :
     * void glColor3ui(GLuint red, GLuint green, GLuint blue);
     * }
     */
    public static void glColor3ui(int red, int green, int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.const$1,"glColor3uiv");
    }
    /**
     * {@snippet :
     * void glColor3uiv(const GLuint* v);
     * }
     */
    public static void glColor3uiv(MemorySegment v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.const$2,"glColor3us");
    }
    /**
     * {@snippet :
     * void glColor3us(GLushort red, GLushort green, GLushort blue);
     * }
     */
    public static void glColor3us(short red, short green, short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.const$3,"glColor3usv");
    }
    /**
     * {@snippet :
     * void glColor3usv(const GLushort* v);
     * }
     */
    public static void glColor3usv(MemorySegment v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.const$5,"glColor4b");
    }
    /**
     * {@snippet :
     * void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
     * }
     */
    public static void glColor4b(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.const$0,"glColor4bv");
    }
    /**
     * {@snippet :
     * void glColor4bv(const GLbyte* v);
     * }
     */
    public static void glColor4bv(MemorySegment v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.const$2,"glColor4d");
    }
    /**
     * {@snippet :
     * void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
     * }
     */
    public static void glColor4d(double red, double green, double blue, double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.const$3,"glColor4dv");
    }
    /**
     * {@snippet :
     * void glColor4dv(const GLdouble* v);
     * }
     */
    public static void glColor4dv(MemorySegment v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.const$4,"glColor4f");
    }
    /**
     * {@snippet :
     * void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
     * }
     */
    public static void glColor4f(float red, float green, float blue, float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.const$5,"glColor4fv");
    }
    /**
     * {@snippet :
     * void glColor4fv(const GLfloat* v);
     * }
     */
    public static void glColor4fv(MemorySegment v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.const$1,"glColor4i");
    }
    /**
     * {@snippet :
     * void glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
     * }
     */
    public static void glColor4i(int red, int green, int blue, int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.const$2,"glColor4iv");
    }
    /**
     * {@snippet :
     * void glColor4iv(const GLint* v);
     * }
     */
    public static void glColor4iv(MemorySegment v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.const$4,"glColor4s");
    }
    /**
     * {@snippet :
     * void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
     * }
     */
    public static void glColor4s(short red, short green, short blue, short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.const$5,"glColor4sv");
    }
    /**
     * {@snippet :
     * void glColor4sv(const GLshort* v);
     * }
     */
    public static void glColor4sv(MemorySegment v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$0,"glColor4ub");
    }
    /**
     * {@snippet :
     * void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
     * }
     */
    public static void glColor4ub(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$1,"glColor4ubv");
    }
    /**
     * {@snippet :
     * void glColor4ubv(const GLubyte* v);
     * }
     */
    public static void glColor4ubv(MemorySegment v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$2,"glColor4ui");
    }
    /**
     * {@snippet :
     * void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
     * }
     */
    public static void glColor4ui(int red, int green, int blue, int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$3,"glColor4uiv");
    }
    /**
     * {@snippet :
     * void glColor4uiv(const GLuint* v);
     * }
     */
    public static void glColor4uiv(MemorySegment v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$4,"glColor4us");
    }
    /**
     * {@snippet :
     * void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
     * }
     */
    public static void glColor4us(short red, short green, short blue, short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$1092.const$5,"glColor4usv");
    }
    /**
     * {@snippet :
     * void glColor4usv(const GLushort* v);
     * }
     */
    public static void glColor4usv(MemorySegment v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1093.const$0,"glColorMask");
    }
    /**
     * {@snippet :
     * void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
     * }
     */
    public static void glColorMask(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$1093.const$1,"glColorMaterial");
    }
    /**
     * {@snippet :
     * void glColorMaterial(GLenum face, GLenum mode);
     * }
     */
    public static void glColorMaterial(int face, int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1093.const$3,"glColorPointer");
    }
    /**
     * {@snippet :
     * void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glColorPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1093.const$5,"glCopyPixels");
    }
    /**
     * {@snippet :
     * void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
     * }
     */
    public static void glCopyPixels(int x, int y, int width, int height, int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1094.const$1,"glCopyTexImage1D");
    }
    /**
     * {@snippet :
     * void glCopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
     * }
     */
    public static void glCopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1094.const$3,"glCopyTexImage2D");
    }
    /**
     * {@snippet :
     * void glCopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
     * }
     */
    public static void glCopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1094.const$5,"glCopyTexSubImage1D");
    }
    /**
     * {@snippet :
     * void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
     * }
     */
    public static void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$0,"glCopyTexSubImage2D");
    }
    /**
     * {@snippet :
     * void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
     * }
     */
    public static void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$1,"glCullFace");
    }
    /**
     * {@snippet :
     * void glCullFace(GLenum mode);
     * }
     */
    public static void glCullFace(int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$2,"glDeleteLists");
    }
    /**
     * {@snippet :
     * void glDeleteLists(GLuint list, GLsizei range);
     * }
     */
    public static void glDeleteLists(int list, int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$3,"glDeleteTextures");
    }
    /**
     * {@snippet :
     * void glDeleteTextures(GLsizei n, const GLuint* textures);
     * }
     */
    public static void glDeleteTextures(int n, MemorySegment textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$4,"glDepthFunc");
    }
    /**
     * {@snippet :
     * void glDepthFunc(GLenum func);
     * }
     */
    public static void glDepthFunc(int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.const$6,"glDepthMask");
    }
    /**
     * {@snippet :
     * void glDepthMask(GLboolean flag);
     * }
     */
    public static void glDepthMask(byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.const$1,"glDepthRange");
    }
    /**
     * {@snippet :
     * void glDepthRange(GLclampd zNear, GLclampd zFar);
     * }
     */
    public static void glDepthRange(double zNear, double zFar) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.const$2,"glDisable");
    }
    /**
     * {@snippet :
     * void glDisable(GLenum cap);
     * }
     */
    public static void glDisable(int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.const$3,"glDisableClientState");
    }
    /**
     * {@snippet :
     * void glDisableClientState(GLenum array);
     * }
     */
    public static void glDisableClientState(int array) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.const$4,"glDrawArrays");
    }
    /**
     * {@snippet :
     * void glDrawArrays(GLenum mode, GLint first, GLsizei count);
     * }
     */
    public static void glDrawArrays(int mode, int first, int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.const$5,"glDrawBuffer");
    }
    /**
     * {@snippet :
     * void glDrawBuffer(GLenum mode);
     * }
     */
    public static void glDrawBuffer(int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.const$0,"glDrawElements");
    }
    /**
     * {@snippet :
     * void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
     * }
     */
    public static void glDrawElements(int mode, int count, int type, MemorySegment indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.const$2,"glDrawPixels");
    }
    /**
     * {@snippet :
     * void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
     * }
     */
    public static void glDrawPixels(int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.const$3,"glEdgeFlag");
    }
    /**
     * {@snippet :
     * void glEdgeFlag(GLboolean flag);
     * }
     */
    public static void glEdgeFlag(byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.const$4,"glEdgeFlagPointer");
    }
    /**
     * {@snippet :
     * void glEdgeFlagPointer(GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glEdgeFlagPointer(int stride, MemorySegment pointer) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.const$5,"glEdgeFlagv");
    }
    /**
     * {@snippet :
     * void glEdgeFlagv(const GLboolean* flag);
     * }
     */
    public static void glEdgeFlagv(MemorySegment flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$0,"glEnable");
    }
    /**
     * {@snippet :
     * void glEnable(GLenum cap);
     * }
     */
    public static void glEnable(int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$1,"glEnableClientState");
    }
    /**
     * {@snippet :
     * void glEnableClientState(GLenum array);
     * }
     */
    public static void glEnableClientState(int array) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$2,"glEnd");
    }
    /**
     * {@snippet :
     * void glEnd();
     * }
     */
    public static void glEnd() {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$3,"glEndList");
    }
    /**
     * {@snippet :
     * void glEndList();
     * }
     */
    public static void glEndList() {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$4,"glEvalCoord1d");
    }
    /**
     * {@snippet :
     * void glEvalCoord1d(GLdouble u);
     * }
     */
    public static void glEvalCoord1d(double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.const$5,"glEvalCoord1dv");
    }
    /**
     * {@snippet :
     * void glEvalCoord1dv(const GLdouble* u);
     * }
     */
    public static void glEvalCoord1dv(MemorySegment u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.const$0,"glEvalCoord1f");
    }
    /**
     * {@snippet :
     * void glEvalCoord1f(GLfloat u);
     * }
     */
    public static void glEvalCoord1f(float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.const$1,"glEvalCoord1fv");
    }
    /**
     * {@snippet :
     * void glEvalCoord1fv(const GLfloat* u);
     * }
     */
    public static void glEvalCoord1fv(MemorySegment u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.const$2,"glEvalCoord2d");
    }
    /**
     * {@snippet :
     * void glEvalCoord2d(GLdouble u, GLdouble v);
     * }
     */
    public static void glEvalCoord2d(double u, double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.const$3,"glEvalCoord2dv");
    }
    /**
     * {@snippet :
     * void glEvalCoord2dv(const GLdouble* u);
     * }
     */
    public static void glEvalCoord2dv(MemorySegment u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.const$5,"glEvalCoord2f");
    }
    /**
     * {@snippet :
     * void glEvalCoord2f(GLfloat u, GLfloat v);
     * }
     */
    public static void glEvalCoord2f(float u, float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$0,"glEvalCoord2fv");
    }
    /**
     * {@snippet :
     * void glEvalCoord2fv(const GLfloat* u);
     * }
     */
    public static void glEvalCoord2fv(MemorySegment u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$1,"glEvalMesh1");
    }
    /**
     * {@snippet :
     * void glEvalMesh1(GLenum mode, GLint i1, GLint i2);
     * }
     */
    public static void glEvalMesh1(int mode, int i1, int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$2,"glEvalMesh2");
    }
    /**
     * {@snippet :
     * void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
     * }
     */
    public static void glEvalMesh2(int mode, int i1, int i2, int j1, int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$3,"glEvalPoint1");
    }
    /**
     * {@snippet :
     * void glEvalPoint1(GLint i);
     * }
     */
    public static void glEvalPoint1(int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$4,"glEvalPoint2");
    }
    /**
     * {@snippet :
     * void glEvalPoint2(GLint i, GLint j);
     * }
     */
    public static void glEvalPoint2(int i, int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.const$5,"glFeedbackBuffer");
    }
    /**
     * {@snippet :
     * void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat* buffer);
     * }
     */
    public static void glFeedbackBuffer(int size, int type, MemorySegment buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$0,"glFinish");
    }
    /**
     * {@snippet :
     * void glFinish();
     * }
     */
    public static void glFinish() {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$1,"glFlush");
    }
    /**
     * {@snippet :
     * void glFlush();
     * }
     */
    public static void glFlush() {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$2,"glFogf");
    }
    /**
     * {@snippet :
     * void glFogf(GLenum pname, GLfloat param);
     * }
     */
    public static void glFogf(int pname, float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$3,"glFogfv");
    }
    /**
     * {@snippet :
     * void glFogfv(GLenum pname, const GLfloat* params);
     * }
     */
    public static void glFogfv(int pname, MemorySegment params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$4,"glFogi");
    }
    /**
     * {@snippet :
     * void glFogi(GLenum pname, GLint param);
     * }
     */
    public static void glFogi(int pname, int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.const$5,"glFogiv");
    }
    /**
     * {@snippet :
     * void glFogiv(GLenum pname, const GLint* params);
     * }
     */
    public static void glFogiv(int pname, MemorySegment params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.const$0,"glFrontFace");
    }
    /**
     * {@snippet :
     * void glFrontFace(GLenum mode);
     * }
     */
    public static void glFrontFace(int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.const$2,"glFrustum");
    }
    /**
     * {@snippet :
     * void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
     * }
     */
    public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.const$4,"glGenLists");
    }
    /**
     * {@snippet :
     * GLuint glGenLists(GLsizei range);
     * }
     */
    public static int glGenLists(int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.const$5,"glGenTextures");
    }
    /**
     * {@snippet :
     * void glGenTextures(GLsizei n, GLuint* textures);
     * }
     */
    public static void glGenTextures(int n, MemorySegment textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.const$0,"glGetBooleanv");
    }
    /**
     * {@snippet :
     * void glGetBooleanv(GLenum pname, GLboolean* params);
     * }
     */
    public static void glGetBooleanv(int pname, MemorySegment params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.const$1,"glGetClipPlane");
    }
    /**
     * {@snippet :
     * void glGetClipPlane(GLenum plane, GLdouble* equation);
     * }
     */
    public static void glGetClipPlane(int plane, MemorySegment equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.const$2,"glGetDoublev");
    }
    /**
     * {@snippet :
     * void glGetDoublev(GLenum pname, GLdouble* params);
     * }
     */
    public static void glGetDoublev(int pname, MemorySegment params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.const$4,"glGetError");
    }
    /**
     * {@snippet :
     * GLenum glGetError();
     * }
     */
    public static int glGetError() {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.const$5,"glGetFloatv");
    }
    /**
     * {@snippet :
     * void glGetFloatv(GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetFloatv(int pname, MemorySegment params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$0,"glGetIntegerv");
    }
    /**
     * {@snippet :
     * void glGetIntegerv(GLenum pname, GLint* params);
     * }
     */
    public static void glGetIntegerv(int pname, MemorySegment params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$1,"glGetLightfv");
    }
    /**
     * {@snippet :
     * void glGetLightfv(GLenum light, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetLightfv(int light, int pname, MemorySegment params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$2,"glGetLightiv");
    }
    /**
     * {@snippet :
     * void glGetLightiv(GLenum light, GLenum pname, GLint* params);
     * }
     */
    public static void glGetLightiv(int light, int pname, MemorySegment params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$3,"glGetMapdv");
    }
    /**
     * {@snippet :
     * void glGetMapdv(GLenum target, GLenum query, GLdouble* v);
     * }
     */
    public static void glGetMapdv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$4,"glGetMapfv");
    }
    /**
     * {@snippet :
     * void glGetMapfv(GLenum target, GLenum query, GLfloat* v);
     * }
     */
    public static void glGetMapfv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.const$5,"glGetMapiv");
    }
    /**
     * {@snippet :
     * void glGetMapiv(GLenum target, GLenum query, GLint* v);
     * }
     */
    public static void glGetMapiv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$0,"glGetMaterialfv");
    }
    /**
     * {@snippet :
     * void glGetMaterialfv(GLenum face, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetMaterialfv(int face, int pname, MemorySegment params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$1,"glGetMaterialiv");
    }
    /**
     * {@snippet :
     * void glGetMaterialiv(GLenum face, GLenum pname, GLint* params);
     * }
     */
    public static void glGetMaterialiv(int face, int pname, MemorySegment params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$2,"glGetPixelMapfv");
    }
    /**
     * {@snippet :
     * void glGetPixelMapfv(GLenum map, GLfloat* values);
     * }
     */
    public static void glGetPixelMapfv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$3,"glGetPixelMapuiv");
    }
    /**
     * {@snippet :
     * void glGetPixelMapuiv(GLenum map, GLuint* values);
     * }
     */
    public static void glGetPixelMapuiv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$4,"glGetPixelMapusv");
    }
    /**
     * {@snippet :
     * void glGetPixelMapusv(GLenum map, GLushort* values);
     * }
     */
    public static void glGetPixelMapusv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.const$5,"glGetPointerv");
    }
    /**
     * {@snippet :
     * void glGetPointerv(GLenum pname, GLvoid** params);
     * }
     */
    public static void glGetPointerv(int pname, MemorySegment params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.const$0,"glGetPolygonStipple");
    }
    /**
     * {@snippet :
     * void glGetPolygonStipple(GLubyte* mask);
     * }
     */
    public static void glGetPolygonStipple(MemorySegment mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.const$2,"glGetString");
    }
    /**
     * {@snippet :
     * const GLubyte* glGetString(GLenum name);
     * }
     */
    public static MemorySegment glGetString(int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.const$3,"glGetTexEnvfv");
    }
    /**
     * {@snippet :
     * void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetTexEnvfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.const$4,"glGetTexEnviv");
    }
    /**
     * {@snippet :
     * void glGetTexEnviv(GLenum target, GLenum pname, GLint* params);
     * }
     */
    public static void glGetTexEnviv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.const$5,"glGetTexGendv");
    }
    /**
     * {@snippet :
     * void glGetTexGendv(GLenum coord, GLenum pname, GLdouble* params);
     * }
     */
    public static void glGetTexGendv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$0,"glGetTexGenfv");
    }
    /**
     * {@snippet :
     * void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetTexGenfv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$1,"glGetTexGeniv");
    }
    /**
     * {@snippet :
     * void glGetTexGeniv(GLenum coord, GLenum pname, GLint* params);
     * }
     */
    public static void glGetTexGeniv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$2,"glGetTexImage");
    }
    /**
     * {@snippet :
     * void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
     * }
     */
    public static void glGetTexImage(int target, int level, int format, int type, MemorySegment pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$3,"glGetTexLevelParameterfv");
    }
    /**
     * {@snippet :
     * void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetTexLevelParameterfv(int target, int level, int pname, MemorySegment params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$4,"glGetTexLevelParameteriv");
    }
    /**
     * {@snippet :
     * void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params);
     * }
     */
    public static void glGetTexLevelParameteriv(int target, int level, int pname, MemorySegment params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.const$5,"glGetTexParameterfv");
    }
    /**
     * {@snippet :
     * void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
     * }
     */
    public static void glGetTexParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$0,"glGetTexParameteriv");
    }
    /**
     * {@snippet :
     * void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
     * }
     */
    public static void glGetTexParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$1,"glHint");
    }
    /**
     * {@snippet :
     * void glHint(GLenum target, GLenum mode);
     * }
     */
    public static void glHint(int target, int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$2,"glIndexMask");
    }
    /**
     * {@snippet :
     * void glIndexMask(GLuint mask);
     * }
     */
    public static void glIndexMask(int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$3,"glIndexPointer");
    }
    /**
     * {@snippet :
     * void glIndexPointer(GLenum type, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glIndexPointer(int type, int stride, MemorySegment pointer) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$4,"glIndexd");
    }
    /**
     * {@snippet :
     * void glIndexd(GLdouble c);
     * }
     */
    public static void glIndexd(double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.const$5,"glIndexdv");
    }
    /**
     * {@snippet :
     * void glIndexdv(const GLdouble* c);
     * }
     */
    public static void glIndexdv(MemorySegment c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.const$0,"glIndexf");
    }
    /**
     * {@snippet :
     * void glIndexf(GLfloat c);
     * }
     */
    public static void glIndexf(float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.const$1,"glIndexfv");
    }
    /**
     * {@snippet :
     * void glIndexfv(const GLfloat* c);
     * }
     */
    public static void glIndexfv(MemorySegment c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.const$2,"glIndexi");
    }
    /**
     * {@snippet :
     * void glIndexi(GLint c);
     * }
     */
    public static void glIndexi(int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.const$3,"glIndexiv");
    }
    /**
     * {@snippet :
     * void glIndexiv(const GLint* c);
     * }
     */
    public static void glIndexiv(MemorySegment c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.const$5,"glIndexs");
    }
    /**
     * {@snippet :
     * void glIndexs(GLshort c);
     * }
     */
    public static void glIndexs(short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$0,"glIndexsv");
    }
    /**
     * {@snippet :
     * void glIndexsv(const GLshort* c);
     * }
     */
    public static void glIndexsv(MemorySegment c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$1,"glIndexub");
    }
    /**
     * {@snippet :
     * void glIndexub(GLubyte c);
     * }
     */
    public static void glIndexub(byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$2,"glIndexubv");
    }
    /**
     * {@snippet :
     * void glIndexubv(const GLubyte* c);
     * }
     */
    public static void glIndexubv(MemorySegment c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$3,"glInitNames");
    }
    /**
     * {@snippet :
     * void glInitNames();
     * }
     */
    public static void glInitNames() {
        var mh$ = glInitNames$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$4,"glInterleavedArrays");
    }
    /**
     * {@snippet :
     * void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glInterleavedArrays(int format, int stride, MemorySegment pointer) {
        var mh$ = glInterleavedArrays$MH();
        try {
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.const$6,"glIsEnabled");
    }
    /**
     * {@snippet :
     * GLboolean glIsEnabled(GLenum cap);
     * }
     */
    public static byte glIsEnabled(int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$0,"glIsList");
    }
    /**
     * {@snippet :
     * GLboolean glIsList(GLuint list);
     * }
     */
    public static byte glIsList(int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$1,"glIsTexture");
    }
    /**
     * {@snippet :
     * GLboolean glIsTexture(GLuint texture);
     * }
     */
    public static byte glIsTexture(int texture) {
        var mh$ = glIsTexture$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$2,"glLightModelf");
    }
    /**
     * {@snippet :
     * void glLightModelf(GLenum pname, GLfloat param);
     * }
     */
    public static void glLightModelf(int pname, float param) {
        var mh$ = glLightModelf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$3,"glLightModelfv");
    }
    /**
     * {@snippet :
     * void glLightModelfv(GLenum pname, const GLfloat* params);
     * }
     */
    public static void glLightModelfv(int pname, MemorySegment params) {
        var mh$ = glLightModelfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$4,"glLightModeli");
    }
    /**
     * {@snippet :
     * void glLightModeli(GLenum pname, GLint param);
     * }
     */
    public static void glLightModeli(int pname, int param) {
        var mh$ = glLightModeli$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.const$5,"glLightModeliv");
    }
    /**
     * {@snippet :
     * void glLightModeliv(GLenum pname, const GLint* params);
     * }
     */
    public static void glLightModeliv(int pname, MemorySegment params) {
        var mh$ = glLightModeliv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.const$1,"glLightf");
    }
    /**
     * {@snippet :
     * void glLightf(GLenum light, GLenum pname, GLfloat param);
     * }
     */
    public static void glLightf(int light, int pname, float param) {
        var mh$ = glLightf$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.const$2,"glLightfv");
    }
    /**
     * {@snippet :
     * void glLightfv(GLenum light, GLenum pname, const GLfloat* params);
     * }
     */
    public static void glLightfv(int light, int pname, MemorySegment params) {
        var mh$ = glLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.const$3,"glLighti");
    }
    /**
     * {@snippet :
     * void glLighti(GLenum light, GLenum pname, GLint param);
     * }
     */
    public static void glLighti(int light, int pname, int param) {
        var mh$ = glLighti$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.const$4,"glLightiv");
    }
    /**
     * {@snippet :
     * void glLightiv(GLenum light, GLenum pname, const GLint* params);
     * }
     */
    public static void glLightiv(int light, int pname, MemorySegment params) {
        var mh$ = glLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.const$6,"glLineStipple");
    }
    /**
     * {@snippet :
     * void glLineStipple(GLint factor, GLushort pattern);
     * }
     */
    public static void glLineStipple(int factor, short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$0,"glLineWidth");
    }
    /**
     * {@snippet :
     * void glLineWidth(GLfloat width);
     * }
     */
    public static void glLineWidth(float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$1,"glListBase");
    }
    /**
     * {@snippet :
     * void glListBase(GLuint base);
     * }
     */
    public static void glListBase(int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$2,"glLoadIdentity");
    }
    /**
     * {@snippet :
     * void glLoadIdentity();
     * }
     */
    public static void glLoadIdentity() {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$3,"glLoadMatrixd");
    }
    /**
     * {@snippet :
     * void glLoadMatrixd(const GLdouble* m);
     * }
     */
    public static void glLoadMatrixd(MemorySegment m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$4,"glLoadMatrixf");
    }
    /**
     * {@snippet :
     * void glLoadMatrixf(const GLfloat* m);
     * }
     */
    public static void glLoadMatrixf(MemorySegment m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.const$5,"glLoadName");
    }
    /**
     * {@snippet :
     * void glLoadName(GLuint name);
     * }
     */
    public static void glLoadName(int name) {
        var mh$ = glLoadName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.const$0,"glLogicOp");
    }
    /**
     * {@snippet :
     * void glLogicOp(GLenum opcode);
     * }
     */
    public static void glLogicOp(int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.const$2,"glMap1d");
    }
    /**
     * {@snippet :
     * void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
     * }
     */
    public static void glMap1d(int target, double u1, double u2, int stride, int order, MemorySegment points) {
        var mh$ = glMap1d$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.const$4,"glMap1f");
    }
    /**
     * {@snippet :
     * void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
     * }
     */
    public static void glMap1f(int target, float u1, float u2, int stride, int order, MemorySegment points) {
        var mh$ = glMap1f$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.const$6,"glMap2d");
    }
    /**
     * {@snippet :
     * void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
     * }
     */
    public static void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMap2d$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.const$1,"glMap2f");
    }
    /**
     * {@snippet :
     * void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
     * }
     */
    public static void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMap2f$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.const$3,"glMapGrid1d");
    }
    /**
     * {@snippet :
     * void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
     * }
     */
    public static void glMapGrid1d(int un, double u1, double u2) {
        var mh$ = glMapGrid1d$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.const$5,"glMapGrid1f");
    }
    /**
     * {@snippet :
     * void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
     * }
     */
    public static void glMapGrid1f(int un, float u1, float u2) {
        var mh$ = glMapGrid1f$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.const$1,"glMapGrid2d");
    }
    /**
     * {@snippet :
     * void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
     * }
     */
    public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) {
        var mh$ = glMapGrid2d$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.const$3,"glMapGrid2f");
    }
    /**
     * {@snippet :
     * void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
     * }
     */
    public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) {
        var mh$ = glMapGrid2f$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.const$4,"glMaterialf");
    }
    /**
     * {@snippet :
     * void glMaterialf(GLenum face, GLenum pname, GLfloat param);
     * }
     */
    public static void glMaterialf(int face, int pname, float param) {
        var mh$ = glMaterialf$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.const$5,"glMaterialfv");
    }
    /**
     * {@snippet :
     * void glMaterialfv(GLenum face, GLenum pname, const GLfloat* params);
     * }
     */
    public static void glMaterialfv(int face, int pname, MemorySegment params) {
        var mh$ = glMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$0,"glMateriali");
    }
    /**
     * {@snippet :
     * void glMateriali(GLenum face, GLenum pname, GLint param);
     * }
     */
    public static void glMateriali(int face, int pname, int param) {
        var mh$ = glMateriali$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$1,"glMaterialiv");
    }
    /**
     * {@snippet :
     * void glMaterialiv(GLenum face, GLenum pname, const GLint* params);
     * }
     */
    public static void glMaterialiv(int face, int pname, MemorySegment params) {
        var mh$ = glMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$2,"glMatrixMode");
    }
    /**
     * {@snippet :
     * void glMatrixMode(GLenum mode);
     * }
     */
    public static void glMatrixMode(int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$3,"glMultMatrixd");
    }
    /**
     * {@snippet :
     * void glMultMatrixd(const GLdouble* m);
     * }
     */
    public static void glMultMatrixd(MemorySegment m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$4,"glMultMatrixf");
    }
    /**
     * {@snippet :
     * void glMultMatrixf(const GLfloat* m);
     * }
     */
    public static void glMultMatrixf(MemorySegment m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.const$5,"glNewList");
    }
    /**
     * {@snippet :
     * void glNewList(GLuint list, GLenum mode);
     * }
     */
    public static void glNewList(int list, int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$0,"glNormal3b");
    }
    /**
     * {@snippet :
     * void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
     * }
     */
    public static void glNormal3b(byte nx, byte ny, byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$1,"glNormal3bv");
    }
    /**
     * {@snippet :
     * void glNormal3bv(const GLbyte* v);
     * }
     */
    public static void glNormal3bv(MemorySegment v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$2,"glNormal3d");
    }
    /**
     * {@snippet :
     * void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
     * }
     */
    public static void glNormal3d(double nx, double ny, double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$3,"glNormal3dv");
    }
    /**
     * {@snippet :
     * void glNormal3dv(const GLdouble* v);
     * }
     */
    public static void glNormal3dv(MemorySegment v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$4,"glNormal3f");
    }
    /**
     * {@snippet :
     * void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
     * }
     */
    public static void glNormal3f(float nx, float ny, float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.const$5,"glNormal3fv");
    }
    /**
     * {@snippet :
     * void glNormal3fv(const GLfloat* v);
     * }
     */
    public static void glNormal3fv(MemorySegment v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$0,"glNormal3i");
    }
    /**
     * {@snippet :
     * void glNormal3i(GLint nx, GLint ny, GLint nz);
     * }
     */
    public static void glNormal3i(int nx, int ny, int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$1,"glNormal3iv");
    }
    /**
     * {@snippet :
     * void glNormal3iv(const GLint* v);
     * }
     */
    public static void glNormal3iv(MemorySegment v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$2,"glNormal3s");
    }
    /**
     * {@snippet :
     * void glNormal3s(GLshort nx, GLshort ny, GLshort nz);
     * }
     */
    public static void glNormal3s(short nx, short ny, short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$3,"glNormal3sv");
    }
    /**
     * {@snippet :
     * void glNormal3sv(const GLshort* v);
     * }
     */
    public static void glNormal3sv(MemorySegment v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$4,"glNormalPointer");
    }
    /**
     * {@snippet :
     * void glNormalPointer(GLenum type, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glNormalPointer(int type, int stride, MemorySegment pointer) {
        var mh$ = glNormalPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.const$5,"glOrtho");
    }
    /**
     * {@snippet :
     * void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
     * }
     */
    public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$0,"glPassThrough");
    }
    /**
     * {@snippet :
     * void glPassThrough(GLfloat token);
     * }
     */
    public static void glPassThrough(float token) {
        var mh$ = glPassThrough$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$1,"glPixelMapfv");
    }
    /**
     * {@snippet :
     * void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat* values);
     * }
     */
    public static void glPixelMapfv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapfv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$2,"glPixelMapuiv");
    }
    /**
     * {@snippet :
     * void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint* values);
     * }
     */
    public static void glPixelMapuiv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$3,"glPixelMapusv");
    }
    /**
     * {@snippet :
     * void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort* values);
     * }
     */
    public static void glPixelMapusv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapusv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$4,"glPixelStoref");
    }
    /**
     * {@snippet :
     * void glPixelStoref(GLenum pname, GLfloat param);
     * }
     */
    public static void glPixelStoref(int pname, float param) {
        var mh$ = glPixelStoref$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.const$5,"glPixelStorei");
    }
    /**
     * {@snippet :
     * void glPixelStorei(GLenum pname, GLint param);
     * }
     */
    public static void glPixelStorei(int pname, int param) {
        var mh$ = glPixelStorei$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$0,"glPixelTransferf");
    }
    /**
     * {@snippet :
     * void glPixelTransferf(GLenum pname, GLfloat param);
     * }
     */
    public static void glPixelTransferf(int pname, float param) {
        var mh$ = glPixelTransferf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$1,"glPixelTransferi");
    }
    /**
     * {@snippet :
     * void glPixelTransferi(GLenum pname, GLint param);
     * }
     */
    public static void glPixelTransferi(int pname, int param) {
        var mh$ = glPixelTransferi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$2,"glPixelZoom");
    }
    /**
     * {@snippet :
     * void glPixelZoom(GLfloat xfactor, GLfloat yfactor);
     * }
     */
    public static void glPixelZoom(float xfactor, float yfactor) {
        var mh$ = glPixelZoom$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$3,"glPointSize");
    }
    /**
     * {@snippet :
     * void glPointSize(GLfloat size);
     * }
     */
    public static void glPointSize(float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$4,"glPolygonMode");
    }
    /**
     * {@snippet :
     * void glPolygonMode(GLenum face, GLenum mode);
     * }
     */
    public static void glPolygonMode(int face, int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.const$5,"glPolygonOffset");
    }
    /**
     * {@snippet :
     * void glPolygonOffset(GLfloat factor, GLfloat units);
     * }
     */
    public static void glPolygonOffset(float factor, float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$0,"glPolygonStipple");
    }
    /**
     * {@snippet :
     * void glPolygonStipple(const GLubyte* mask);
     * }
     */
    public static void glPolygonStipple(MemorySegment mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$1,"glPopAttrib");
    }
    /**
     * {@snippet :
     * void glPopAttrib();
     * }
     */
    public static void glPopAttrib() {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$2,"glPopClientAttrib");
    }
    /**
     * {@snippet :
     * void glPopClientAttrib();
     * }
     */
    public static void glPopClientAttrib() {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$3,"glPopMatrix");
    }
    /**
     * {@snippet :
     * void glPopMatrix();
     * }
     */
    public static void glPopMatrix() {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$4,"glPopName");
    }
    /**
     * {@snippet :
     * void glPopName();
     * }
     */
    public static void glPopName() {
        var mh$ = glPopName$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.const$6,"glPrioritizeTextures");
    }
    /**
     * {@snippet :
     * void glPrioritizeTextures(GLsizei n, const GLuint* textures, const GLclampf* priorities);
     * }
     */
    public static void glPrioritizeTextures(int n, MemorySegment textures, MemorySegment priorities) {
        var mh$ = glPrioritizeTextures$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$0,"glPushAttrib");
    }
    /**
     * {@snippet :
     * void glPushAttrib(GLbitfield mask);
     * }
     */
    public static void glPushAttrib(int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$1,"glPushClientAttrib");
    }
    /**
     * {@snippet :
     * void glPushClientAttrib(GLbitfield mask);
     * }
     */
    public static void glPushClientAttrib(int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$2,"glPushMatrix");
    }
    /**
     * {@snippet :
     * void glPushMatrix();
     * }
     */
    public static void glPushMatrix() {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$3,"glPushName");
    }
    /**
     * {@snippet :
     * void glPushName(GLuint name);
     * }
     */
    public static void glPushName(int name) {
        var mh$ = glPushName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$4,"glRasterPos2d");
    }
    /**
     * {@snippet :
     * void glRasterPos2d(GLdouble x, GLdouble y);
     * }
     */
    public static void glRasterPos2d(double x, double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1123.const$5,"glRasterPos2dv");
    }
    /**
     * {@snippet :
     * void glRasterPos2dv(const GLdouble* v);
     * }
     */
    public static void glRasterPos2dv(MemorySegment v) {
        var mh$ = glRasterPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$0,"glRasterPos2f");
    }
    /**
     * {@snippet :
     * void glRasterPos2f(GLfloat x, GLfloat y);
     * }
     */
    public static void glRasterPos2f(float x, float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$1,"glRasterPos2fv");
    }
    /**
     * {@snippet :
     * void glRasterPos2fv(const GLfloat* v);
     * }
     */
    public static void glRasterPos2fv(MemorySegment v) {
        var mh$ = glRasterPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$2,"glRasterPos2i");
    }
    /**
     * {@snippet :
     * void glRasterPos2i(GLint x, GLint y);
     * }
     */
    public static void glRasterPos2i(int x, int y) {
        var mh$ = glRasterPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$3,"glRasterPos2iv");
    }
    /**
     * {@snippet :
     * void glRasterPos2iv(const GLint* v);
     * }
     */
    public static void glRasterPos2iv(MemorySegment v) {
        var mh$ = glRasterPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.const$5,"glRasterPos2s");
    }
    /**
     * {@snippet :
     * void glRasterPos2s(GLshort x, GLshort y);
     * }
     */
    public static void glRasterPos2s(short x, short y) {
        var mh$ = glRasterPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$0,"glRasterPos2sv");
    }
    /**
     * {@snippet :
     * void glRasterPos2sv(const GLshort* v);
     * }
     */
    public static void glRasterPos2sv(MemorySegment v) {
        var mh$ = glRasterPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$1,"glRasterPos3d");
    }
    /**
     * {@snippet :
     * void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
     * }
     */
    public static void glRasterPos3d(double x, double y, double z) {
        var mh$ = glRasterPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$2,"glRasterPos3dv");
    }
    /**
     * {@snippet :
     * void glRasterPos3dv(const GLdouble* v);
     * }
     */
    public static void glRasterPos3dv(MemorySegment v) {
        var mh$ = glRasterPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$3,"glRasterPos3f");
    }
    /**
     * {@snippet :
     * void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
     * }
     */
    public static void glRasterPos3f(float x, float y, float z) {
        var mh$ = glRasterPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$4,"glRasterPos3fv");
    }
    /**
     * {@snippet :
     * void glRasterPos3fv(const GLfloat* v);
     * }
     */
    public static void glRasterPos3fv(MemorySegment v) {
        var mh$ = glRasterPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.const$5,"glRasterPos3i");
    }
    /**
     * {@snippet :
     * void glRasterPos3i(GLint x, GLint y, GLint z);
     * }
     */
    public static void glRasterPos3i(int x, int y, int z) {
        var mh$ = glRasterPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$0,"glRasterPos3iv");
    }
    /**
     * {@snippet :
     * void glRasterPos3iv(const GLint* v);
     * }
     */
    public static void glRasterPos3iv(MemorySegment v) {
        var mh$ = glRasterPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$1,"glRasterPos3s");
    }
    /**
     * {@snippet :
     * void glRasterPos3s(GLshort x, GLshort y, GLshort z);
     * }
     */
    public static void glRasterPos3s(short x, short y, short z) {
        var mh$ = glRasterPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$2,"glRasterPos3sv");
    }
    /**
     * {@snippet :
     * void glRasterPos3sv(const GLshort* v);
     * }
     */
    public static void glRasterPos3sv(MemorySegment v) {
        var mh$ = glRasterPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$3,"glRasterPos4d");
    }
    /**
     * {@snippet :
     * void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
     * }
     */
    public static void glRasterPos4d(double x, double y, double z, double w) {
        var mh$ = glRasterPos4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$4,"glRasterPos4dv");
    }
    /**
     * {@snippet :
     * void glRasterPos4dv(const GLdouble* v);
     * }
     */
    public static void glRasterPos4dv(MemorySegment v) {
        var mh$ = glRasterPos4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1126.const$5,"glRasterPos4f");
    }
    /**
     * {@snippet :
     * void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
     * }
     */
    public static void glRasterPos4f(float x, float y, float z, float w) {
        var mh$ = glRasterPos4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$0,"glRasterPos4fv");
    }
    /**
     * {@snippet :
     * void glRasterPos4fv(const GLfloat* v);
     * }
     */
    public static void glRasterPos4fv(MemorySegment v) {
        var mh$ = glRasterPos4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$1,"glRasterPos4i");
    }
    /**
     * {@snippet :
     * void glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
     * }
     */
    public static void glRasterPos4i(int x, int y, int z, int w) {
        var mh$ = glRasterPos4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$2,"glRasterPos4iv");
    }
    /**
     * {@snippet :
     * void glRasterPos4iv(const GLint* v);
     * }
     */
    public static void glRasterPos4iv(MemorySegment v) {
        var mh$ = glRasterPos4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$3,"glRasterPos4s");
    }
    /**
     * {@snippet :
     * void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
     * }
     */
    public static void glRasterPos4s(short x, short y, short z, short w) {
        var mh$ = glRasterPos4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$4,"glRasterPos4sv");
    }
    /**
     * {@snippet :
     * void glRasterPos4sv(const GLshort* v);
     * }
     */
    public static void glRasterPos4sv(MemorySegment v) {
        var mh$ = glRasterPos4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.const$5,"glReadBuffer");
    }
    /**
     * {@snippet :
     * void glReadBuffer(GLenum mode);
     * }
     */
    public static void glReadBuffer(int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1128.const$1,"glReadPixels");
    }
    /**
     * {@snippet :
     * void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
     * }
     */
    public static void glReadPixels(int x, int y, int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glReadPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$1128.const$2,"glRectd");
    }
    /**
     * {@snippet :
     * void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
     * }
     */
    public static void glRectd(double x1, double y1, double x2, double y2) {
        var mh$ = glRectd$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1128.const$3,"glRectdv");
    }
    /**
     * {@snippet :
     * void glRectdv(const GLdouble* v1, const GLdouble* v2);
     * }
     */
    public static void glRectdv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectdv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$1128.const$4,"glRectf");
    }
    /**
     * {@snippet :
     * void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
     * }
     */
    public static void glRectf(float x1, float y1, float x2, float y2) {
        var mh$ = glRectf$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1128.const$5,"glRectfv");
    }
    /**
     * {@snippet :
     * void glRectfv(const GLfloat* v1, const GLfloat* v2);
     * }
     */
    public static void glRectfv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectfv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$0,"glRecti");
    }
    /**
     * {@snippet :
     * void glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
     * }
     */
    public static void glRecti(int x1, int y1, int x2, int y2) {
        var mh$ = glRecti$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$1,"glRectiv");
    }
    /**
     * {@snippet :
     * void glRectiv(const GLint* v1, const GLint* v2);
     * }
     */
    public static void glRectiv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectiv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$2,"glRects");
    }
    /**
     * {@snippet :
     * void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
     * }
     */
    public static void glRects(short x1, short y1, short x2, short y2) {
        var mh$ = glRects$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$3,"glRectsv");
    }
    /**
     * {@snippet :
     * void glRectsv(const GLshort* v1, const GLshort* v2);
     * }
     */
    public static void glRectsv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectsv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$4,"glRenderMode");
    }
    /**
     * {@snippet :
     * GLint glRenderMode(GLenum mode);
     * }
     */
    public static int glRenderMode(int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$1129.const$5,"glRotated");
    }
    /**
     * {@snippet :
     * void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
     * }
     */
    public static void glRotated(double angle, double x, double y, double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$0,"glRotatef");
    }
    /**
     * {@snippet :
     * void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
     * }
     */
    public static void glRotatef(float angle, float x, float y, float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$1,"glScaled");
    }
    /**
     * {@snippet :
     * void glScaled(GLdouble x, GLdouble y, GLdouble z);
     * }
     */
    public static void glScaled(double x, double y, double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$2,"glScalef");
    }
    /**
     * {@snippet :
     * void glScalef(GLfloat x, GLfloat y, GLfloat z);
     * }
     */
    public static void glScalef(float x, float y, float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$3,"glScissor");
    }
    /**
     * {@snippet :
     * void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
     * }
     */
    public static void glScissor(int x, int y, int width, int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$4,"glSelectBuffer");
    }
    /**
     * {@snippet :
     * void glSelectBuffer(GLsizei size, GLuint* buffer);
     * }
     */
    public static void glSelectBuffer(int size, MemorySegment buffer) {
        var mh$ = glSelectBuffer$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.const$5,"glShadeModel");
    }
    /**
     * {@snippet :
     * void glShadeModel(GLenum mode);
     * }
     */
    public static void glShadeModel(int mode) {
        var mh$ = glShadeModel$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$0,"glStencilFunc");
    }
    /**
     * {@snippet :
     * void glStencilFunc(GLenum func, GLint ref, GLuint mask);
     * }
     */
    public static void glStencilFunc(int func, int ref, int mask) {
        var mh$ = glStencilFunc$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$1,"glStencilMask");
    }
    /**
     * {@snippet :
     * void glStencilMask(GLuint mask);
     * }
     */
    public static void glStencilMask(int mask) {
        var mh$ = glStencilMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$2,"glStencilOp");
    }
    /**
     * {@snippet :
     * void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
     * }
     */
    public static void glStencilOp(int fail, int zfail, int zpass) {
        var mh$ = glStencilOp$MH();
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$3,"glTexCoord1d");
    }
    /**
     * {@snippet :
     * void glTexCoord1d(GLdouble s);
     * }
     */
    public static void glTexCoord1d(double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$4,"glTexCoord1dv");
    }
    /**
     * {@snippet :
     * void glTexCoord1dv(const GLdouble* v);
     * }
     */
    public static void glTexCoord1dv(MemorySegment v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.const$5,"glTexCoord1f");
    }
    /**
     * {@snippet :
     * void glTexCoord1f(GLfloat s);
     * }
     */
    public static void glTexCoord1f(float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$0,"glTexCoord1fv");
    }
    /**
     * {@snippet :
     * void glTexCoord1fv(const GLfloat* v);
     * }
     */
    public static void glTexCoord1fv(MemorySegment v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$1,"glTexCoord1i");
    }
    /**
     * {@snippet :
     * void glTexCoord1i(GLint s);
     * }
     */
    public static void glTexCoord1i(int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$2,"glTexCoord1iv");
    }
    /**
     * {@snippet :
     * void glTexCoord1iv(const GLint* v);
     * }
     */
    public static void glTexCoord1iv(MemorySegment v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$3,"glTexCoord1s");
    }
    /**
     * {@snippet :
     * void glTexCoord1s(GLshort s);
     * }
     */
    public static void glTexCoord1s(short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$4,"glTexCoord1sv");
    }
    /**
     * {@snippet :
     * void glTexCoord1sv(const GLshort* v);
     * }
     */
    public static void glTexCoord1sv(MemorySegment v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.const$5,"glTexCoord2d");
    }
    /**
     * {@snippet :
     * void glTexCoord2d(GLdouble s, GLdouble t);
     * }
     */
    public static void glTexCoord2d(double s, double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$0,"glTexCoord2dv");
    }
    /**
     * {@snippet :
     * void glTexCoord2dv(const GLdouble* v);
     * }
     */
    public static void glTexCoord2dv(MemorySegment v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$1,"glTexCoord2f");
    }
    /**
     * {@snippet :
     * void glTexCoord2f(GLfloat s, GLfloat t);
     * }
     */
    public static void glTexCoord2f(float s, float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$2,"glTexCoord2fv");
    }
    /**
     * {@snippet :
     * void glTexCoord2fv(const GLfloat* v);
     * }
     */
    public static void glTexCoord2fv(MemorySegment v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$3,"glTexCoord2i");
    }
    /**
     * {@snippet :
     * void glTexCoord2i(GLint s, GLint t);
     * }
     */
    public static void glTexCoord2i(int s, int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$4,"glTexCoord2iv");
    }
    /**
     * {@snippet :
     * void glTexCoord2iv(const GLint* v);
     * }
     */
    public static void glTexCoord2iv(MemorySegment v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1133.const$5,"glTexCoord2s");
    }
    /**
     * {@snippet :
     * void glTexCoord2s(GLshort s, GLshort t);
     * }
     */
    public static void glTexCoord2s(short s, short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$0,"glTexCoord2sv");
    }
    /**
     * {@snippet :
     * void glTexCoord2sv(const GLshort* v);
     * }
     */
    public static void glTexCoord2sv(MemorySegment v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$1,"glTexCoord3d");
    }
    /**
     * {@snippet :
     * void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
     * }
     */
    public static void glTexCoord3d(double s, double t, double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$2,"glTexCoord3dv");
    }
    /**
     * {@snippet :
     * void glTexCoord3dv(const GLdouble* v);
     * }
     */
    public static void glTexCoord3dv(MemorySegment v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$3,"glTexCoord3f");
    }
    /**
     * {@snippet :
     * void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
     * }
     */
    public static void glTexCoord3f(float s, float t, float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$4,"glTexCoord3fv");
    }
    /**
     * {@snippet :
     * void glTexCoord3fv(const GLfloat* v);
     * }
     */
    public static void glTexCoord3fv(MemorySegment v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1134.const$5,"glTexCoord3i");
    }
    /**
     * {@snippet :
     * void glTexCoord3i(GLint s, GLint t, GLint r);
     * }
     */
    public static void glTexCoord3i(int s, int t, int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$0,"glTexCoord3iv");
    }
    /**
     * {@snippet :
     * void glTexCoord3iv(const GLint* v);
     * }
     */
    public static void glTexCoord3iv(MemorySegment v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$1,"glTexCoord3s");
    }
    /**
     * {@snippet :
     * void glTexCoord3s(GLshort s, GLshort t, GLshort r);
     * }
     */
    public static void glTexCoord3s(short s, short t, short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$2,"glTexCoord3sv");
    }
    /**
     * {@snippet :
     * void glTexCoord3sv(const GLshort* v);
     * }
     */
    public static void glTexCoord3sv(MemorySegment v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$3,"glTexCoord4d");
    }
    /**
     * {@snippet :
     * void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
     * }
     */
    public static void glTexCoord4d(double s, double t, double r, double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$4,"glTexCoord4dv");
    }
    /**
     * {@snippet :
     * void glTexCoord4dv(const GLdouble* v);
     * }
     */
    public static void glTexCoord4dv(MemorySegment v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1135.const$5,"glTexCoord4f");
    }
    /**
     * {@snippet :
     * void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
     * }
     */
    public static void glTexCoord4f(float s, float t, float r, float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$0,"glTexCoord4fv");
    }
    /**
     * {@snippet :
     * void glTexCoord4fv(const GLfloat* v);
     * }
     */
    public static void glTexCoord4fv(MemorySegment v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$1,"glTexCoord4i");
    }
    /**
     * {@snippet :
     * void glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
     * }
     */
    public static void glTexCoord4i(int s, int t, int r, int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$2,"glTexCoord4iv");
    }
    /**
     * {@snippet :
     * void glTexCoord4iv(const GLint* v);
     * }
     */
    public static void glTexCoord4iv(MemorySegment v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$3,"glTexCoord4s");
    }
    /**
     * {@snippet :
     * void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
     * }
     */
    public static void glTexCoord4s(short s, short t, short r, short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$4,"glTexCoord4sv");
    }
    /**
     * {@snippet :
     * void glTexCoord4sv(const GLshort* v);
     * }
     */
    public static void glTexCoord4sv(MemorySegment v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1136.const$5,"glTexCoordPointer");
    }
    /**
     * {@snippet :
     * void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glTexCoordPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glTexCoordPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$0,"glTexEnvf");
    }
    /**
     * {@snippet :
     * void glTexEnvf(GLenum target, GLenum pname, GLfloat param);
     * }
     */
    public static void glTexEnvf(int target, int pname, float param) {
        var mh$ = glTexEnvf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$1,"glTexEnvfv");
    }
    /**
     * {@snippet :
     * void glTexEnvfv(GLenum target, GLenum pname, const GLfloat* params);
     * }
     */
    public static void glTexEnvfv(int target, int pname, MemorySegment params) {
        var mh$ = glTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$2,"glTexEnvi");
    }
    /**
     * {@snippet :
     * void glTexEnvi(GLenum target, GLenum pname, GLint param);
     * }
     */
    public static void glTexEnvi(int target, int pname, int param) {
        var mh$ = glTexEnvi$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$3,"glTexEnviv");
    }
    /**
     * {@snippet :
     * void glTexEnviv(GLenum target, GLenum pname, const GLint* params);
     * }
     */
    public static void glTexEnviv(int target, int pname, MemorySegment params) {
        var mh$ = glTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$1137.const$5,"glTexGend");
    }
    /**
     * {@snippet :
     * void glTexGend(GLenum coord, GLenum pname, GLdouble param);
     * }
     */
    public static void glTexGend(int coord, int pname, double param) {
        var mh$ = glTexGend$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$0,"glTexGendv");
    }
    /**
     * {@snippet :
     * void glTexGendv(GLenum coord, GLenum pname, const GLdouble* params);
     * }
     */
    public static void glTexGendv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$1,"glTexGenf");
    }
    /**
     * {@snippet :
     * void glTexGenf(GLenum coord, GLenum pname, GLfloat param);
     * }
     */
    public static void glTexGenf(int coord, int pname, float param) {
        var mh$ = glTexGenf$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$2,"glTexGenfv");
    }
    /**
     * {@snippet :
     * void glTexGenfv(GLenum coord, GLenum pname, const GLfloat* params);
     * }
     */
    public static void glTexGenfv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$3,"glTexGeni");
    }
    /**
     * {@snippet :
     * void glTexGeni(GLenum coord, GLenum pname, GLint param);
     * }
     */
    public static void glTexGeni(int coord, int pname, int param) {
        var mh$ = glTexGeni$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$4,"glTexGeniv");
    }
    /**
     * {@snippet :
     * void glTexGeniv(GLenum coord, GLenum pname, const GLint* params);
     * }
     */
    public static void glTexGeniv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1138.const$6,"glTexImage1D");
    }
    /**
     * {@snippet :
     * void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
     * }
     */
    public static void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, MemorySegment pixels) {
        var mh$ = glTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.const$1,"glTexImage2D");
    }
    /**
     * {@snippet :
     * void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
     * }
     */
    public static void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, MemorySegment pixels) {
        var mh$ = glTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.const$2,"glTexParameterf");
    }
    /**
     * {@snippet :
     * void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
     * }
     */
    public static void glTexParameterf(int target, int pname, float param) {
        var mh$ = glTexParameterf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.const$3,"glTexParameterfv");
    }
    /**
     * {@snippet :
     * void glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
     * }
     */
    public static void glTexParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.const$4,"glTexParameteri");
    }
    /**
     * {@snippet :
     * void glTexParameteri(GLenum target, GLenum pname, GLint param);
     * }
     */
    public static void glTexParameteri(int target, int pname, int param) {
        var mh$ = glTexParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1139.const$5,"glTexParameteriv");
    }
    /**
     * {@snippet :
     * void glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
     * }
     */
    public static void glTexParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$0,"glTexSubImage1D");
    }
    /**
     * {@snippet :
     * void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
     * }
     */
    public static void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, MemorySegment pixels) {
        var mh$ = glTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$1,"glTexSubImage2D");
    }
    /**
     * {@snippet :
     * void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
     * }
     */
    public static void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$2,"glTranslated");
    }
    /**
     * {@snippet :
     * void glTranslated(GLdouble x, GLdouble y, GLdouble z);
     * }
     */
    public static void glTranslated(double x, double y, double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$3,"glTranslatef");
    }
    /**
     * {@snippet :
     * void glTranslatef(GLfloat x, GLfloat y, GLfloat z);
     * }
     */
    public static void glTranslatef(float x, float y, float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$4,"glVertex2d");
    }
    /**
     * {@snippet :
     * void glVertex2d(GLdouble x, GLdouble y);
     * }
     */
    public static void glVertex2d(double x, double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1140.const$5,"glVertex2dv");
    }
    /**
     * {@snippet :
     * void glVertex2dv(const GLdouble* v);
     * }
     */
    public static void glVertex2dv(MemorySegment v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$0,"glVertex2f");
    }
    /**
     * {@snippet :
     * void glVertex2f(GLfloat x, GLfloat y);
     * }
     */
    public static void glVertex2f(float x, float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$1,"glVertex2fv");
    }
    /**
     * {@snippet :
     * void glVertex2fv(const GLfloat* v);
     * }
     */
    public static void glVertex2fv(MemorySegment v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$2,"glVertex2i");
    }
    /**
     * {@snippet :
     * void glVertex2i(GLint x, GLint y);
     * }
     */
    public static void glVertex2i(int x, int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$3,"glVertex2iv");
    }
    /**
     * {@snippet :
     * void glVertex2iv(const GLint* v);
     * }
     */
    public static void glVertex2iv(MemorySegment v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$4,"glVertex2s");
    }
    /**
     * {@snippet :
     * void glVertex2s(GLshort x, GLshort y);
     * }
     */
    public static void glVertex2s(short x, short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1141.const$5,"glVertex2sv");
    }
    /**
     * {@snippet :
     * void glVertex2sv(const GLshort* v);
     * }
     */
    public static void glVertex2sv(MemorySegment v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$0,"glVertex3d");
    }
    /**
     * {@snippet :
     * void glVertex3d(GLdouble x, GLdouble y, GLdouble z);
     * }
     */
    public static void glVertex3d(double x, double y, double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$1,"glVertex3dv");
    }
    /**
     * {@snippet :
     * void glVertex3dv(const GLdouble* v);
     * }
     */
    public static void glVertex3dv(MemorySegment v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$2,"glVertex3f");
    }
    /**
     * {@snippet :
     * void glVertex3f(GLfloat x, GLfloat y, GLfloat z);
     * }
     */
    public static void glVertex3f(float x, float y, float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$3,"glVertex3fv");
    }
    /**
     * {@snippet :
     * void glVertex3fv(const GLfloat* v);
     * }
     */
    public static void glVertex3fv(MemorySegment v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$4,"glVertex3i");
    }
    /**
     * {@snippet :
     * void glVertex3i(GLint x, GLint y, GLint z);
     * }
     */
    public static void glVertex3i(int x, int y, int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1142.const$5,"glVertex3iv");
    }
    /**
     * {@snippet :
     * void glVertex3iv(const GLint* v);
     * }
     */
    public static void glVertex3iv(MemorySegment v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$0,"glVertex3s");
    }
    /**
     * {@snippet :
     * void glVertex3s(GLshort x, GLshort y, GLshort z);
     * }
     */
    public static void glVertex3s(short x, short y, short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$1,"glVertex3sv");
    }
    /**
     * {@snippet :
     * void glVertex3sv(const GLshort* v);
     * }
     */
    public static void glVertex3sv(MemorySegment v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$2,"glVertex4d");
    }
    /**
     * {@snippet :
     * void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
     * }
     */
    public static void glVertex4d(double x, double y, double z, double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$3,"glVertex4dv");
    }
    /**
     * {@snippet :
     * void glVertex4dv(const GLdouble* v);
     * }
     */
    public static void glVertex4dv(MemorySegment v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$4,"glVertex4f");
    }
    /**
     * {@snippet :
     * void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
     * }
     */
    public static void glVertex4f(float x, float y, float z, float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1143.const$5,"glVertex4fv");
    }
    /**
     * {@snippet :
     * void glVertex4fv(const GLfloat* v);
     * }
     */
    public static void glVertex4fv(MemorySegment v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$0,"glVertex4i");
    }
    /**
     * {@snippet :
     * void glVertex4i(GLint x, GLint y, GLint z, GLint w);
     * }
     */
    public static void glVertex4i(int x, int y, int z, int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$1,"glVertex4iv");
    }
    /**
     * {@snippet :
     * void glVertex4iv(const GLint* v);
     * }
     */
    public static void glVertex4iv(MemorySegment v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$2,"glVertex4s");
    }
    /**
     * {@snippet :
     * void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
     * }
     */
    public static void glVertex4s(short x, short y, short z, short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$3,"glVertex4sv");
    }
    /**
     * {@snippet :
     * void glVertex4sv(const GLshort* v);
     * }
     */
    public static void glVertex4sv(MemorySegment v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$4,"glVertexPointer");
    }
    /**
     * {@snippet :
     * void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
     * }
     */
    public static void glVertexPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glVertexPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$1144.const$5,"glViewport");
    }
    /**
     * {@snippet :
     * void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
     * }
     */
    public static void glViewport(int x, int y, int width, int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwInit$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.const$2,"glfwInit");
    }
    /**
     * {@snippet :
     * int glfwInit();
     * }
     */
    public static int glfwInit() {
        var mh$ = glfwInit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwTerminate$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.const$3,"glfwTerminate");
    }
    /**
     * {@snippet :
     * void glfwTerminate();
     * }
     */
    public static void glfwTerminate() {
        var mh$ = glfwTerminate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwInitHint$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.const$4,"glfwInitHint");
    }
    /**
     * {@snippet :
     * void glfwInitHint(int hint, int value);
     * }
     */
    public static void glfwInitHint(int hint, int value) {
        var mh$ = glfwInitHint$MH();
        try {
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwInitAllocator$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.const$5,"glfwInitAllocator");
    }
    /**
     * {@snippet :
     * void glfwInitAllocator(const GLFWallocator* allocator);
     * }
     */
    public static void glfwInitAllocator(MemorySegment allocator) {
        var mh$ = glfwInitAllocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwInitVulkanLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.const$0,"glfwInitVulkanLoader");
    }
    /**
     * {@snippet :
     * void glfwInitVulkanLoader(PFN_vkGetInstanceProcAddr loader);
     * }
     */
    public static void glfwInitVulkanLoader(MemorySegment loader) {
        var mh$ = glfwInitVulkanLoader$MH();
        try {
            mh$.invokeExact(loader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.const$1,"glfwGetVersion");
    }
    /**
     * {@snippet :
     * void glfwGetVersion(int* major, int* minor, int* rev);
     * }
     */
    public static void glfwGetVersion(MemorySegment major, MemorySegment minor, MemorySegment rev) {
        var mh$ = glfwGetVersion$MH();
        try {
            mh$.invokeExact(major, minor, rev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetVersionString$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.const$3,"glfwGetVersionString");
    }
    /**
     * {@snippet :
     * char* glfwGetVersionString();
     * }
     */
    public static MemorySegment glfwGetVersionString() {
        var mh$ = glfwGetVersionString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.const$4,"glfwGetError");
    }
    /**
     * {@snippet :
     * int glfwGetError(char** description);
     * }
     */
    public static int glfwGetError(MemorySegment description) {
        var mh$ = glfwGetError$MH();
        try {
            return (int)mh$.invokeExact(description);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwSetErrorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.const$6,"glfwSetErrorCallback");
    }
    /**
     * {@snippet :
     * GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback);
     * }
     */
    public static MemorySegment glfwSetErrorCallback(MemorySegment callback) {
        var mh$ = glfwSetErrorCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetPlatform$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$0,"glfwGetPlatform");
    }
    /**
     * {@snippet :
     * int glfwGetPlatform();
     * }
     */
    public static int glfwGetPlatform() {
        var mh$ = glfwGetPlatform$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwPlatformSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$1,"glfwPlatformSupported");
    }
    /**
     * {@snippet :
     * int glfwPlatformSupported(int platform);
     * }
     */
    public static int glfwPlatformSupported(int platform) {
        var mh$ = glfwPlatformSupported$MH();
        try {
            return (int)mh$.invokeExact(platform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitors$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$2,"glfwGetMonitors");
    }
    /**
     * {@snippet :
     * GLFWmonitor** glfwGetMonitors(int* count);
     * }
     */
    public static MemorySegment glfwGetMonitors(MemorySegment count) {
        var mh$ = glfwGetMonitors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetPrimaryMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$3,"glfwGetPrimaryMonitor");
    }
    /**
     * {@snippet :
     * GLFWmonitor* glfwGetPrimaryMonitor();
     * }
     */
    public static MemorySegment glfwGetPrimaryMonitor() {
        var mh$ = glfwGetPrimaryMonitor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$4,"glfwGetMonitorPos");
    }
    /**
     * {@snippet :
     * void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
     * }
     */
    public static void glfwGetMonitorPos(MemorySegment monitor, MemorySegment xpos, MemorySegment ypos) {
        var mh$ = glfwGetMonitorPos$MH();
        try {
            mh$.invokeExact(monitor, xpos, ypos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorWorkarea$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.const$6,"glfwGetMonitorWorkarea");
    }
    /**
     * {@snippet :
     * void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
     * }
     */
    public static void glfwGetMonitorWorkarea(MemorySegment monitor, MemorySegment xpos, MemorySegment ypos, MemorySegment width, MemorySegment height) {
        var mh$ = glfwGetMonitorWorkarea$MH();
        try {
            mh$.invokeExact(monitor, xpos, ypos, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorPhysicalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$0,"glfwGetMonitorPhysicalSize");
    }
    /**
     * {@snippet :
     * void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
     * }
     */
    public static void glfwGetMonitorPhysicalSize(MemorySegment monitor, MemorySegment widthMM, MemorySegment heightMM) {
        var mh$ = glfwGetMonitorPhysicalSize$MH();
        try {
            mh$.invokeExact(monitor, widthMM, heightMM);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorContentScale$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$1,"glfwGetMonitorContentScale");
    }
    /**
     * {@snippet :
     * void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
     * }
     */
    public static void glfwGetMonitorContentScale(MemorySegment monitor, MemorySegment xscale, MemorySegment yscale) {
        var mh$ = glfwGetMonitorContentScale$MH();
        try {
            mh$.invokeExact(monitor, xscale, yscale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorName$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$2,"glfwGetMonitorName");
    }
    /**
     * {@snippet :
     * char* glfwGetMonitorName(GLFWmonitor* monitor);
     * }
     */
    public static MemorySegment glfwGetMonitorName(MemorySegment monitor) {
        var mh$ = glfwGetMonitorName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwSetMonitorUserPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$3,"glfwSetMonitorUserPointer");
    }
    /**
     * {@snippet :
     * void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer);
     * }
     */
    public static void glfwSetMonitorUserPointer(MemorySegment monitor, MemorySegment pointer) {
        var mh$ = glfwSetMonitorUserPointer$MH();
        try {
            mh$.invokeExact(monitor, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetMonitorUserPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$4,"glfwGetMonitorUserPointer");
    }
    /**
     * {@snippet :
     * void* glfwGetMonitorUserPointer(GLFWmonitor* monitor);
     * }
     */
    public static MemorySegment glfwGetMonitorUserPointer(MemorySegment monitor) {
        var mh$ = glfwGetMonitorUserPointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwSetMonitorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.const$5,"glfwSetMonitorCallback");
    }
    /**
     * {@snippet :
     * GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback);
     * }
     */
    public static MemorySegment glfwSetMonitorCallback(MemorySegment callback) {
        var mh$ = glfwSetMonitorCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetVideoModes$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$0,"glfwGetVideoModes");
    }
    /**
     * {@snippet :
     * const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
     * }
     */
    public static MemorySegment glfwGetVideoModes(MemorySegment monitor, MemorySegment count) {
        var mh$ = glfwGetVideoModes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetVideoMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$1,"glfwGetVideoMode");
    }
    /**
     * {@snippet :
     * const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
     * }
     */
    public static MemorySegment glfwGetVideoMode(MemorySegment monitor) {
        var mh$ = glfwGetVideoMode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwSetGamma$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$2,"glfwSetGamma");
    }
    /**
     * {@snippet :
     * void glfwSetGamma(GLFWmonitor* monitor, float gamma);
     * }
     */
    public static void glfwSetGamma(MemorySegment monitor, float gamma) {
        var mh$ = glfwSetGamma$MH();
        try {
            mh$.invokeExact(monitor, gamma);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwGetGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$3,"glfwGetGammaRamp");
    }
    /**
     * {@snippet :
     * const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
     * }
     */
    public static MemorySegment glfwGetGammaRamp(MemorySegment monitor) {
        var mh$ = glfwGetGammaRamp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwSetGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$4,"glfwSetGammaRamp");
    }
    /**
     * {@snippet :
     * void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
     * }
     */
    public static void glfwSetGammaRamp(MemorySegment monitor, MemorySegment ramp) {
        var mh$ = glfwSetGammaRamp$MH();
        try {
            mh$.invokeExact(monitor, ramp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwDefaultWindowHints$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.const$5,"glfwDefaultWindowHints");
    }
    /**
     * {@snippet :
     * void glfwDefaultWindowHints();
     * }
     */
    public static void glfwDefaultWindowHints() {
        var mh$ = glfwDefaultWindowHints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwWindowHint$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.const$0,"glfwWindowHint");
    }
    /**
     * {@snippet :
     * void glfwWindowHint(int hint, int value);
     * }
     */
    public static void glfwWindowHint(int hint, int value) {
        var mh$ = glfwWindowHint$MH();
        try {
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwWindowHintString$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.const$1,"glfwWindowHintString");
    }
    /**
     * {@snippet :
     * void glfwWindowHintString(int hint, char* value);
     * }
     */
    public static void glfwWindowHintString(int hint, MemorySegment value) {
        var mh$ = glfwWindowHintString$MH();
        try {
            mh$.invokeExact(hint, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.const$3,"glfwCreateWindow");
    }
    /**
     * {@snippet :
     * GLFWwindow* glfwCreateWindow(int width, int height, char* title, GLFWmonitor* monitor, GLFWwindow* share);
     * }
     */
    public static MemorySegment glfwCreateWindow(int width, int height, MemorySegment title, MemorySegment monitor, MemorySegment share) {
        var mh$ = glfwCreateWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(width, height, title, monitor, share);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glfwDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.const$4,"glfwDestroyWindow");
    }
    /**
     * {@snippet :
     * void glfwDestroyWindow(GLFWwindow* window);
     * }
     */
    public static void glfwDestroyWindow(MemorySegment window) {
        var mh$ = glfwDestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


