// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkColorBlendAdvancedEXT {
 *     VkBlendOp advancedBlendOp;
 *     VkBool32 srcPremultiplied;
 *     VkBool32 dstPremultiplied;
 *     VkBlendOverlapEXT blendOverlap;
 *     VkBool32 clampResults;
 * };
 * }
 */
public class VkColorBlendAdvancedEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$991.const$0;
    }
    public static VarHandle advancedBlendOp$VH() {
        return constants$991.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendOp advancedBlendOp;
     * }
     */
    public static int advancedBlendOp$get(MemorySegment seg) {
        return (int)constants$991.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendOp advancedBlendOp;
     * }
     */
    public static void advancedBlendOp$set(MemorySegment seg, int x) {
        constants$991.const$1.set(seg, x);
    }
    public static int advancedBlendOp$get(MemorySegment seg, long index) {
        return (int)constants$991.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void advancedBlendOp$set(MemorySegment seg, long index, int x) {
        constants$991.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcPremultiplied$VH() {
        return constants$991.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 srcPremultiplied;
     * }
     */
    public static int srcPremultiplied$get(MemorySegment seg) {
        return (int)constants$991.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 srcPremultiplied;
     * }
     */
    public static void srcPremultiplied$set(MemorySegment seg, int x) {
        constants$991.const$2.set(seg, x);
    }
    public static int srcPremultiplied$get(MemorySegment seg, long index) {
        return (int)constants$991.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void srcPremultiplied$set(MemorySegment seg, long index, int x) {
        constants$991.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstPremultiplied$VH() {
        return constants$991.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 dstPremultiplied;
     * }
     */
    public static int dstPremultiplied$get(MemorySegment seg) {
        return (int)constants$991.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 dstPremultiplied;
     * }
     */
    public static void dstPremultiplied$set(MemorySegment seg, int x) {
        constants$991.const$3.set(seg, x);
    }
    public static int dstPremultiplied$get(MemorySegment seg, long index) {
        return (int)constants$991.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dstPremultiplied$set(MemorySegment seg, long index, int x) {
        constants$991.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blendOverlap$VH() {
        return constants$991.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendOverlapEXT blendOverlap;
     * }
     */
    public static int blendOverlap$get(MemorySegment seg) {
        return (int)constants$991.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendOverlapEXT blendOverlap;
     * }
     */
    public static void blendOverlap$set(MemorySegment seg, int x) {
        constants$991.const$4.set(seg, x);
    }
    public static int blendOverlap$get(MemorySegment seg, long index) {
        return (int)constants$991.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void blendOverlap$set(MemorySegment seg, long index, int x) {
        constants$991.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clampResults$VH() {
        return constants$991.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 clampResults;
     * }
     */
    public static int clampResults$get(MemorySegment seg) {
        return (int)constants$991.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 clampResults;
     * }
     */
    public static void clampResults$set(MemorySegment seg, int x) {
        constants$991.const$5.set(seg, x);
    }
    public static int clampResults$get(MemorySegment seg, long index) {
        return (int)constants$991.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void clampResults$set(MemorySegment seg, long index, int x) {
        constants$991.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


