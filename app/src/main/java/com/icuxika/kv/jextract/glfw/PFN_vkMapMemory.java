// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum VkResult (*PFN_vkMapMemory)(struct VkDevice_T* device,struct VkDeviceMemory_T* memory,unsigned long long offset,unsigned long long size,unsigned int flags,void** ppData);
 * }
 */
public interface PFN_vkMapMemory {

    int apply(java.lang.foreign.MemorySegment device, java.lang.foreign.MemorySegment memory, long offset, long size, int flags, java.lang.foreign.MemorySegment ppData);
    static MemorySegment allocate(PFN_vkMapMemory fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$147.const$1, fi, constants$147.const$0, scope);
    }
    static PFN_vkMapMemory ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _device, java.lang.foreign.MemorySegment _memory, long _offset, long _size, int _flags, java.lang.foreign.MemorySegment _ppData) -> {
            try {
                return (int)constants$147.const$2.invokeExact(symbol, _device, _memory, _offset, _size, _flags, _ppData);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


