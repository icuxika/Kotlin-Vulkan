// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH264SpsVuiFlags {
 *      *     uint32_t aspect_ratio_info_present_flag;
 *     uint32_t overscan_info_present_flag;
 *     uint32_t overscan_appropriate_flag;
 *     uint32_t video_signal_type_present_flag;
 *     uint32_t video_full_range_flag;
 *     uint32_t color_description_present_flag;
 *     uint32_t chroma_loc_info_present_flag;
 *     uint32_t timing_info_present_flag;
 *     uint32_t fixed_frame_rate_flag;
 *     uint32_t bitstream_restriction_flag;
 *     uint32_t nal_hrd_parameters_present_flag;
 *     uint32_t vcl_hrd_parameters_present_flag;
 * };
 * }
 */
public class StdVideoH264SpsVuiFlags {

    public static MemoryLayout $LAYOUT() {
        return constants$477.const$1;
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


