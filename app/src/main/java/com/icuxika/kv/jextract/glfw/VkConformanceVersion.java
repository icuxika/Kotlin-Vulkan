// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkConformanceVersion {
 *     uint8_t major;
 *     uint8_t minor;
 *     uint8_t subminor;
 *     uint8_t patch;
 * };
 * }
 */
public class VkConformanceVersion {

    public static MemoryLayout $LAYOUT() {
        return constants$281.const$0;
    }
    public static VarHandle major$VH() {
        return constants$281.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t major;
     * }
     */
    public static byte major$get(MemorySegment seg) {
        return (byte)constants$281.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t major;
     * }
     */
    public static void major$set(MemorySegment seg, byte x) {
        constants$281.const$1.set(seg, x);
    }
    public static byte major$get(MemorySegment seg, long index) {
        return (byte)constants$281.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void major$set(MemorySegment seg, long index, byte x) {
        constants$281.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minor$VH() {
        return constants$281.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t minor;
     * }
     */
    public static byte minor$get(MemorySegment seg) {
        return (byte)constants$281.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t minor;
     * }
     */
    public static void minor$set(MemorySegment seg, byte x) {
        constants$281.const$2.set(seg, x);
    }
    public static byte minor$get(MemorySegment seg, long index) {
        return (byte)constants$281.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void minor$set(MemorySegment seg, long index, byte x) {
        constants$281.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subminor$VH() {
        return constants$281.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t subminor;
     * }
     */
    public static byte subminor$get(MemorySegment seg) {
        return (byte)constants$281.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t subminor;
     * }
     */
    public static void subminor$set(MemorySegment seg, byte x) {
        constants$281.const$3.set(seg, x);
    }
    public static byte subminor$get(MemorySegment seg, long index) {
        return (byte)constants$281.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void subminor$set(MemorySegment seg, long index, byte x) {
        constants$281.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle patch$VH() {
        return constants$281.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t patch;
     * }
     */
    public static byte patch$get(MemorySegment seg) {
        return (byte)constants$281.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t patch;
     * }
     */
    public static void patch$set(MemorySegment seg, byte x) {
        constants$281.const$4.set(seg, x);
    }
    public static byte patch$get(MemorySegment seg, long index) {
        return (byte)constants$281.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void patch$set(MemorySegment seg, long index, byte x) {
        constants$281.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


