// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkDisplayPlaneCapabilitiesKHR {
 *     VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
 *     VkOffset2D minSrcPosition;
 *     VkOffset2D maxSrcPosition;
 *     VkExtent2D minSrcExtent;
 *     VkExtent2D maxSrcExtent;
 *     VkOffset2D minDstPosition;
 *     VkOffset2D maxDstPosition;
 *     VkExtent2D minDstExtent;
 *     VkExtent2D maxDstExtent;
 * };
 * }
 */
public class VkDisplayPlaneCapabilitiesKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$446.const$0;
    }
    public static VarHandle supportedAlpha$VH() {
        return constants$446.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
     * }
     */
    public static int supportedAlpha$get(MemorySegment seg) {
        return (int)constants$446.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
     * }
     */
    public static void supportedAlpha$set(MemorySegment seg, int x) {
        constants$446.const$1.set(seg, x);
    }
    public static int supportedAlpha$get(MemorySegment seg, long index) {
        return (int)constants$446.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedAlpha$set(MemorySegment seg, long index, int x) {
        constants$446.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment minSrcPosition$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    public static MemorySegment maxSrcPosition$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static MemorySegment minSrcExtent$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static MemorySegment maxSrcExtent$slice(MemorySegment seg) {
        return seg.asSlice(28, 8);
    }
    public static MemorySegment minDstPosition$slice(MemorySegment seg) {
        return seg.asSlice(36, 8);
    }
    public static MemorySegment maxDstPosition$slice(MemorySegment seg) {
        return seg.asSlice(44, 8);
    }
    public static MemorySegment minDstExtent$slice(MemorySegment seg) {
        return seg.asSlice(52, 8);
    }
    public static MemorySegment maxDstExtent$slice(MemorySegment seg) {
        return seg.asSlice(60, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


