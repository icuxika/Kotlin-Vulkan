// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdCopyQueryPoolResults)(struct VkCommandBuffer_T* commandBuffer,struct VkQueryPool_T* queryPool,unsigned int firstQuery,unsigned int queryCount,struct VkBuffer_T* dstBuffer,unsigned long long dstOffset,unsigned long long stride,unsigned int flags);
 * }
 */
public interface PFN_vkCmdCopyQueryPoolResults {

    void apply(java.lang.foreign.MemorySegment commandBuffer, java.lang.foreign.MemorySegment queryPool, int firstQuery, int queryCount, java.lang.foreign.MemorySegment dstBuffer, long dstOffset, long stride, int flags);
    static MemorySegment allocate(PFN_vkCmdCopyQueryPoolResults fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$177.const$3, fi, constants$177.const$2, scope);
    }
    static PFN_vkCmdCopyQueryPoolResults ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, java.lang.foreign.MemorySegment _queryPool, int _firstQuery, int _queryCount, java.lang.foreign.MemorySegment _dstBuffer, long _dstOffset, long _stride, int _flags) -> {
            try {
                constants$177.const$4.invokeExact(symbol, _commandBuffer, _queryPool, _firstQuery, _queryCount, _dstBuffer, _dstOffset, _stride, _flags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


