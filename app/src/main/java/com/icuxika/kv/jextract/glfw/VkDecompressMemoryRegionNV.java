// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkDecompressMemoryRegionNV {
 *     VkDeviceAddress srcAddress;
 *     VkDeviceAddress dstAddress;
 *     VkDeviceSize compressedSize;
 *     VkDeviceSize decompressedSize;
 *     VkMemoryDecompressionMethodFlagsNV decompressionMethod;
 * };
 * }
 */
public class VkDecompressMemoryRegionNV {

    public static MemoryLayout $LAYOUT() {
        return constants$976.const$2;
    }
    public static VarHandle srcAddress$VH() {
        return constants$976.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress srcAddress;
     * }
     */
    public static long srcAddress$get(MemorySegment seg) {
        return (long)constants$976.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress srcAddress;
     * }
     */
    public static void srcAddress$set(MemorySegment seg, long x) {
        constants$976.const$3.set(seg, x);
    }
    public static long srcAddress$get(MemorySegment seg, long index) {
        return (long)constants$976.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void srcAddress$set(MemorySegment seg, long index, long x) {
        constants$976.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstAddress$VH() {
        return constants$976.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceAddress dstAddress;
     * }
     */
    public static long dstAddress$get(MemorySegment seg) {
        return (long)constants$976.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceAddress dstAddress;
     * }
     */
    public static void dstAddress$set(MemorySegment seg, long x) {
        constants$976.const$4.set(seg, x);
    }
    public static long dstAddress$get(MemorySegment seg, long index) {
        return (long)constants$976.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dstAddress$set(MemorySegment seg, long index, long x) {
        constants$976.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle compressedSize$VH() {
        return constants$976.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize compressedSize;
     * }
     */
    public static long compressedSize$get(MemorySegment seg) {
        return (long)constants$976.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize compressedSize;
     * }
     */
    public static void compressedSize$set(MemorySegment seg, long x) {
        constants$976.const$5.set(seg, x);
    }
    public static long compressedSize$get(MemorySegment seg, long index) {
        return (long)constants$976.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void compressedSize$set(MemorySegment seg, long index, long x) {
        constants$976.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle decompressedSize$VH() {
        return constants$977.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize decompressedSize;
     * }
     */
    public static long decompressedSize$get(MemorySegment seg) {
        return (long)constants$977.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize decompressedSize;
     * }
     */
    public static void decompressedSize$set(MemorySegment seg, long x) {
        constants$977.const$0.set(seg, x);
    }
    public static long decompressedSize$get(MemorySegment seg, long index) {
        return (long)constants$977.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void decompressedSize$set(MemorySegment seg, long index, long x) {
        constants$977.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle decompressionMethod$VH() {
        return constants$977.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkMemoryDecompressionMethodFlagsNV decompressionMethod;
     * }
     */
    public static long decompressionMethod$get(MemorySegment seg) {
        return (long)constants$977.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkMemoryDecompressionMethodFlagsNV decompressionMethod;
     * }
     */
    public static void decompressionMethod$set(MemorySegment seg, long x) {
        constants$977.const$1.set(seg, x);
    }
    public static long decompressionMethod$get(MemorySegment seg, long index) {
        return (long)constants$977.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void decompressionMethod$set(MemorySegment seg, long index, long x) {
        constants$977.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


