// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkSurfaceCapabilities2EXT {
 *     VkStructureType sType;
 *     void* pNext;
 *     uint32_t minImageCount;
 *     uint32_t maxImageCount;
 *     VkExtent2D currentExtent;
 *     VkExtent2D minImageExtent;
 *     VkExtent2D maxImageExtent;
 *     uint32_t maxImageArrayLayers;
 *     VkSurfaceTransformFlagsKHR supportedTransforms;
 *     VkSurfaceTransformFlagBitsKHR currentTransform;
 *     VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
 *     VkImageUsageFlags supportedUsageFlags;
 *     VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
 * };
 * }
 */
public class VkSurfaceCapabilities2EXT {

    public static MemoryLayout $LAYOUT() {
        return constants$655.const$5;
    }
    public static VarHandle sType$VH() {
        return constants$656.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$656.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$656.const$0.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$656.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$656.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$656.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$656.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$656.const$1.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$656.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$656.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minImageCount$VH() {
        return constants$656.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t minImageCount;
     * }
     */
    public static int minImageCount$get(MemorySegment seg) {
        return (int)constants$656.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t minImageCount;
     * }
     */
    public static void minImageCount$set(MemorySegment seg, int x) {
        constants$656.const$2.set(seg, x);
    }
    public static int minImageCount$get(MemorySegment seg, long index) {
        return (int)constants$656.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void minImageCount$set(MemorySegment seg, long index, int x) {
        constants$656.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxImageCount$VH() {
        return constants$656.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageCount;
     * }
     */
    public static int maxImageCount$get(MemorySegment seg) {
        return (int)constants$656.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageCount;
     * }
     */
    public static void maxImageCount$set(MemorySegment seg, int x) {
        constants$656.const$3.set(seg, x);
    }
    public static int maxImageCount$get(MemorySegment seg, long index) {
        return (int)constants$656.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageCount$set(MemorySegment seg, long index, int x) {
        constants$656.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment currentExtent$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment minImageExtent$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment maxImageExtent$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static VarHandle maxImageArrayLayers$VH() {
        return constants$656.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageArrayLayers;
     * }
     */
    public static int maxImageArrayLayers$get(MemorySegment seg) {
        return (int)constants$656.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageArrayLayers;
     * }
     */
    public static void maxImageArrayLayers$set(MemorySegment seg, int x) {
        constants$656.const$4.set(seg, x);
    }
    public static int maxImageArrayLayers$get(MemorySegment seg, long index) {
        return (int)constants$656.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageArrayLayers$set(MemorySegment seg, long index, int x) {
        constants$656.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedTransforms$VH() {
        return constants$656.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSurfaceTransformFlagsKHR supportedTransforms;
     * }
     */
    public static int supportedTransforms$get(MemorySegment seg) {
        return (int)constants$656.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSurfaceTransformFlagsKHR supportedTransforms;
     * }
     */
    public static void supportedTransforms$set(MemorySegment seg, int x) {
        constants$656.const$5.set(seg, x);
    }
    public static int supportedTransforms$get(MemorySegment seg, long index) {
        return (int)constants$656.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedTransforms$set(MemorySegment seg, long index, int x) {
        constants$656.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle currentTransform$VH() {
        return constants$657.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSurfaceTransformFlagBitsKHR currentTransform;
     * }
     */
    public static int currentTransform$get(MemorySegment seg) {
        return (int)constants$657.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSurfaceTransformFlagBitsKHR currentTransform;
     * }
     */
    public static void currentTransform$set(MemorySegment seg, int x) {
        constants$657.const$0.set(seg, x);
    }
    public static int currentTransform$get(MemorySegment seg, long index) {
        return (int)constants$657.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void currentTransform$set(MemorySegment seg, long index, int x) {
        constants$657.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedCompositeAlpha$VH() {
        return constants$657.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
     * }
     */
    public static int supportedCompositeAlpha$get(MemorySegment seg) {
        return (int)constants$657.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
     * }
     */
    public static void supportedCompositeAlpha$set(MemorySegment seg, int x) {
        constants$657.const$1.set(seg, x);
    }
    public static int supportedCompositeAlpha$get(MemorySegment seg, long index) {
        return (int)constants$657.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedCompositeAlpha$set(MemorySegment seg, long index, int x) {
        constants$657.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedUsageFlags$VH() {
        return constants$657.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageUsageFlags supportedUsageFlags;
     * }
     */
    public static int supportedUsageFlags$get(MemorySegment seg) {
        return (int)constants$657.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageUsageFlags supportedUsageFlags;
     * }
     */
    public static void supportedUsageFlags$set(MemorySegment seg, int x) {
        constants$657.const$2.set(seg, x);
    }
    public static int supportedUsageFlags$get(MemorySegment seg, long index) {
        return (int)constants$657.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedUsageFlags$set(MemorySegment seg, long index, int x) {
        constants$657.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedSurfaceCounters$VH() {
        return constants$657.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
     * }
     */
    public static int supportedSurfaceCounters$get(MemorySegment seg) {
        return (int)constants$657.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
     * }
     */
    public static void supportedSurfaceCounters$set(MemorySegment seg, int x) {
        constants$657.const$3.set(seg, x);
    }
    public static int supportedSurfaceCounters$get(MemorySegment seg, long index) {
        return (int)constants$657.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedSurfaceCounters$set(MemorySegment seg, long index, int x) {
        constants$657.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


