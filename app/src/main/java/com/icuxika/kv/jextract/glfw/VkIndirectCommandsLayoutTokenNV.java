// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkIndirectCommandsLayoutTokenNV {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkIndirectCommandsTokenTypeNV tokenType;
 *     uint32_t stream;
 *     uint32_t offset;
 *     uint32_t vertexBindingUnit;
 *     VkBool32 vertexDynamicStride;
 *     VkPipelineLayout pushconstantPipelineLayout;
 *     VkShaderStageFlags pushconstantShaderStageFlags;
 *     uint32_t pushconstantOffset;
 *     uint32_t pushconstantSize;
 *     VkIndirectStateFlagsNV indirectStateFlags;
 *     uint32_t indexTypeCount;
 *     const VkIndexType* pIndexTypes;
 *     const uint32_t* pIndexTypeValues;
 * };
 * }
 */
public class VkIndirectCommandsLayoutTokenNV {

    public static MemoryLayout $LAYOUT() {
        return constants$829.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$829.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$829.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$829.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$829.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$829.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$830.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$830.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$830.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$830.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$830.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tokenType$VH() {
        return constants$830.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkIndirectCommandsTokenTypeNV tokenType;
     * }
     */
    public static int tokenType$get(MemorySegment seg) {
        return (int)constants$830.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkIndirectCommandsTokenTypeNV tokenType;
     * }
     */
    public static void tokenType$set(MemorySegment seg, int x) {
        constants$830.const$1.set(seg, x);
    }
    public static int tokenType$get(MemorySegment seg, long index) {
        return (int)constants$830.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tokenType$set(MemorySegment seg, long index, int x) {
        constants$830.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stream$VH() {
        return constants$830.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t stream;
     * }
     */
    public static int stream$get(MemorySegment seg) {
        return (int)constants$830.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t stream;
     * }
     */
    public static void stream$set(MemorySegment seg, int x) {
        constants$830.const$2.set(seg, x);
    }
    public static int stream$get(MemorySegment seg, long index) {
        return (int)constants$830.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void stream$set(MemorySegment seg, long index, int x) {
        constants$830.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset$VH() {
        return constants$830.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t offset;
     * }
     */
    public static int offset$get(MemorySegment seg) {
        return (int)constants$830.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t offset;
     * }
     */
    public static void offset$set(MemorySegment seg, int x) {
        constants$830.const$3.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)constants$830.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        constants$830.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexBindingUnit$VH() {
        return constants$830.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t vertexBindingUnit;
     * }
     */
    public static int vertexBindingUnit$get(MemorySegment seg) {
        return (int)constants$830.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t vertexBindingUnit;
     * }
     */
    public static void vertexBindingUnit$set(MemorySegment seg, int x) {
        constants$830.const$4.set(seg, x);
    }
    public static int vertexBindingUnit$get(MemorySegment seg, long index) {
        return (int)constants$830.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexBindingUnit$set(MemorySegment seg, long index, int x) {
        constants$830.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexDynamicStride$VH() {
        return constants$830.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 vertexDynamicStride;
     * }
     */
    public static int vertexDynamicStride$get(MemorySegment seg) {
        return (int)constants$830.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 vertexDynamicStride;
     * }
     */
    public static void vertexDynamicStride$set(MemorySegment seg, int x) {
        constants$830.const$5.set(seg, x);
    }
    public static int vertexDynamicStride$get(MemorySegment seg, long index) {
        return (int)constants$830.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexDynamicStride$set(MemorySegment seg, long index, int x) {
        constants$830.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pushconstantPipelineLayout$VH() {
        return constants$831.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineLayout pushconstantPipelineLayout;
     * }
     */
    public static MemorySegment pushconstantPipelineLayout$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$831.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineLayout pushconstantPipelineLayout;
     * }
     */
    public static void pushconstantPipelineLayout$set(MemorySegment seg, MemorySegment x) {
        constants$831.const$0.set(seg, x);
    }
    public static MemorySegment pushconstantPipelineLayout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$831.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pushconstantPipelineLayout$set(MemorySegment seg, long index, MemorySegment x) {
        constants$831.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pushconstantShaderStageFlags$VH() {
        return constants$831.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderStageFlags pushconstantShaderStageFlags;
     * }
     */
    public static int pushconstantShaderStageFlags$get(MemorySegment seg) {
        return (int)constants$831.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderStageFlags pushconstantShaderStageFlags;
     * }
     */
    public static void pushconstantShaderStageFlags$set(MemorySegment seg, int x) {
        constants$831.const$1.set(seg, x);
    }
    public static int pushconstantShaderStageFlags$get(MemorySegment seg, long index) {
        return (int)constants$831.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pushconstantShaderStageFlags$set(MemorySegment seg, long index, int x) {
        constants$831.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pushconstantOffset$VH() {
        return constants$831.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pushconstantOffset;
     * }
     */
    public static int pushconstantOffset$get(MemorySegment seg) {
        return (int)constants$831.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pushconstantOffset;
     * }
     */
    public static void pushconstantOffset$set(MemorySegment seg, int x) {
        constants$831.const$2.set(seg, x);
    }
    public static int pushconstantOffset$get(MemorySegment seg, long index) {
        return (int)constants$831.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pushconstantOffset$set(MemorySegment seg, long index, int x) {
        constants$831.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pushconstantSize$VH() {
        return constants$831.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pushconstantSize;
     * }
     */
    public static int pushconstantSize$get(MemorySegment seg) {
        return (int)constants$831.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pushconstantSize;
     * }
     */
    public static void pushconstantSize$set(MemorySegment seg, int x) {
        constants$831.const$3.set(seg, x);
    }
    public static int pushconstantSize$get(MemorySegment seg, long index) {
        return (int)constants$831.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pushconstantSize$set(MemorySegment seg, long index, int x) {
        constants$831.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indirectStateFlags$VH() {
        return constants$831.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkIndirectStateFlagsNV indirectStateFlags;
     * }
     */
    public static int indirectStateFlags$get(MemorySegment seg) {
        return (int)constants$831.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkIndirectStateFlagsNV indirectStateFlags;
     * }
     */
    public static void indirectStateFlags$set(MemorySegment seg, int x) {
        constants$831.const$4.set(seg, x);
    }
    public static int indirectStateFlags$get(MemorySegment seg, long index) {
        return (int)constants$831.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void indirectStateFlags$set(MemorySegment seg, long index, int x) {
        constants$831.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indexTypeCount$VH() {
        return constants$831.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t indexTypeCount;
     * }
     */
    public static int indexTypeCount$get(MemorySegment seg) {
        return (int)constants$831.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t indexTypeCount;
     * }
     */
    public static void indexTypeCount$set(MemorySegment seg, int x) {
        constants$831.const$5.set(seg, x);
    }
    public static int indexTypeCount$get(MemorySegment seg, long index) {
        return (int)constants$831.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void indexTypeCount$set(MemorySegment seg, long index, int x) {
        constants$831.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pIndexTypes$VH() {
        return constants$832.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkIndexType* pIndexTypes;
     * }
     */
    public static MemorySegment pIndexTypes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$832.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkIndexType* pIndexTypes;
     * }
     */
    public static void pIndexTypes$set(MemorySegment seg, MemorySegment x) {
        constants$832.const$0.set(seg, x);
    }
    public static MemorySegment pIndexTypes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$832.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pIndexTypes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$832.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pIndexTypeValues$VH() {
        return constants$832.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint32_t* pIndexTypeValues;
     * }
     */
    public static MemorySegment pIndexTypeValues$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$832.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint32_t* pIndexTypeValues;
     * }
     */
    public static void pIndexTypeValues$set(MemorySegment seg, MemorySegment x) {
        constants$832.const$1.set(seg, x);
    }
    public static MemorySegment pIndexTypeValues$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$832.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pIndexTypeValues$set(MemorySegment seg, long index, MemorySegment x) {
        constants$832.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


