// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdPushConstants)(struct VkCommandBuffer_T* commandBuffer,struct VkPipelineLayout_T* layout,unsigned int stageFlags,unsigned int offset,unsigned int size,void* pValues);
 * }
 */
public interface PFN_vkCmdPushConstants {

    void apply(java.lang.foreign.MemorySegment commandBuffer, java.lang.foreign.MemorySegment layout, int stageFlags, int offset, int size, java.lang.foreign.MemorySegment pValues);
    static MemorySegment allocate(PFN_vkCmdPushConstants fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$178.const$0, fi, constants$177.const$5, scope);
    }
    static PFN_vkCmdPushConstants ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, java.lang.foreign.MemorySegment _layout, int _stageFlags, int _offset, int _size, java.lang.foreign.MemorySegment _pValues) -> {
            try {
                constants$178.const$1.invokeExact(symbol, _commandBuffer, _layout, _stageFlags, _offset, _size, _pValues);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


