// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
 *     VkStructureType sType;
 *     void* pNext;
 *     float primitiveOverestimationSize;
 *     float maxExtraPrimitiveOverestimationSize;
 *     float extraPrimitiveOverestimationSizeGranularity;
 *     VkBool32 primitiveUnderestimation;
 *     VkBool32 conservativePointAndLineRasterization;
 *     VkBool32 degenerateTrianglesRasterized;
 *     VkBool32 degenerateLinesRasterized;
 *     VkBool32 fullyCoveredFragmentShaderInputVariable;
 *     VkBool32 conservativeRasterizationPostDepthCoverage;
 * };
 * }
 */
public class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$670.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$670.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$670.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$670.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$670.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$670.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$671.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$671.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$671.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$671.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$671.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle primitiveOverestimationSize$VH() {
        return constants$671.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float primitiveOverestimationSize;
     * }
     */
    public static float primitiveOverestimationSize$get(MemorySegment seg) {
        return (float)constants$671.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float primitiveOverestimationSize;
     * }
     */
    public static void primitiveOverestimationSize$set(MemorySegment seg, float x) {
        constants$671.const$1.set(seg, x);
    }
    public static float primitiveOverestimationSize$get(MemorySegment seg, long index) {
        return (float)constants$671.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void primitiveOverestimationSize$set(MemorySegment seg, long index, float x) {
        constants$671.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxExtraPrimitiveOverestimationSize$VH() {
        return constants$671.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxExtraPrimitiveOverestimationSize;
     * }
     */
    public static float maxExtraPrimitiveOverestimationSize$get(MemorySegment seg) {
        return (float)constants$671.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxExtraPrimitiveOverestimationSize;
     * }
     */
    public static void maxExtraPrimitiveOverestimationSize$set(MemorySegment seg, float x) {
        constants$671.const$2.set(seg, x);
    }
    public static float maxExtraPrimitiveOverestimationSize$get(MemorySegment seg, long index) {
        return (float)constants$671.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxExtraPrimitiveOverestimationSize$set(MemorySegment seg, long index, float x) {
        constants$671.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extraPrimitiveOverestimationSizeGranularity$VH() {
        return constants$671.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float extraPrimitiveOverestimationSizeGranularity;
     * }
     */
    public static float extraPrimitiveOverestimationSizeGranularity$get(MemorySegment seg) {
        return (float)constants$671.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float extraPrimitiveOverestimationSizeGranularity;
     * }
     */
    public static void extraPrimitiveOverestimationSizeGranularity$set(MemorySegment seg, float x) {
        constants$671.const$3.set(seg, x);
    }
    public static float extraPrimitiveOverestimationSizeGranularity$get(MemorySegment seg, long index) {
        return (float)constants$671.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extraPrimitiveOverestimationSizeGranularity$set(MemorySegment seg, long index, float x) {
        constants$671.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle primitiveUnderestimation$VH() {
        return constants$671.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 primitiveUnderestimation;
     * }
     */
    public static int primitiveUnderestimation$get(MemorySegment seg) {
        return (int)constants$671.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 primitiveUnderestimation;
     * }
     */
    public static void primitiveUnderestimation$set(MemorySegment seg, int x) {
        constants$671.const$4.set(seg, x);
    }
    public static int primitiveUnderestimation$get(MemorySegment seg, long index) {
        return (int)constants$671.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void primitiveUnderestimation$set(MemorySegment seg, long index, int x) {
        constants$671.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conservativePointAndLineRasterization$VH() {
        return constants$671.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 conservativePointAndLineRasterization;
     * }
     */
    public static int conservativePointAndLineRasterization$get(MemorySegment seg) {
        return (int)constants$671.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 conservativePointAndLineRasterization;
     * }
     */
    public static void conservativePointAndLineRasterization$set(MemorySegment seg, int x) {
        constants$671.const$5.set(seg, x);
    }
    public static int conservativePointAndLineRasterization$get(MemorySegment seg, long index) {
        return (int)constants$671.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void conservativePointAndLineRasterization$set(MemorySegment seg, long index, int x) {
        constants$671.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle degenerateTrianglesRasterized$VH() {
        return constants$672.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 degenerateTrianglesRasterized;
     * }
     */
    public static int degenerateTrianglesRasterized$get(MemorySegment seg) {
        return (int)constants$672.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 degenerateTrianglesRasterized;
     * }
     */
    public static void degenerateTrianglesRasterized$set(MemorySegment seg, int x) {
        constants$672.const$0.set(seg, x);
    }
    public static int degenerateTrianglesRasterized$get(MemorySegment seg, long index) {
        return (int)constants$672.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void degenerateTrianglesRasterized$set(MemorySegment seg, long index, int x) {
        constants$672.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle degenerateLinesRasterized$VH() {
        return constants$672.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 degenerateLinesRasterized;
     * }
     */
    public static int degenerateLinesRasterized$get(MemorySegment seg) {
        return (int)constants$672.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 degenerateLinesRasterized;
     * }
     */
    public static void degenerateLinesRasterized$set(MemorySegment seg, int x) {
        constants$672.const$1.set(seg, x);
    }
    public static int degenerateLinesRasterized$get(MemorySegment seg, long index) {
        return (int)constants$672.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void degenerateLinesRasterized$set(MemorySegment seg, long index, int x) {
        constants$672.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fullyCoveredFragmentShaderInputVariable$VH() {
        return constants$672.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fullyCoveredFragmentShaderInputVariable;
     * }
     */
    public static int fullyCoveredFragmentShaderInputVariable$get(MemorySegment seg) {
        return (int)constants$672.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fullyCoveredFragmentShaderInputVariable;
     * }
     */
    public static void fullyCoveredFragmentShaderInputVariable$set(MemorySegment seg, int x) {
        constants$672.const$2.set(seg, x);
    }
    public static int fullyCoveredFragmentShaderInputVariable$get(MemorySegment seg, long index) {
        return (int)constants$672.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fullyCoveredFragmentShaderInputVariable$set(MemorySegment seg, long index, int x) {
        constants$672.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conservativeRasterizationPostDepthCoverage$VH() {
        return constants$672.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 conservativeRasterizationPostDepthCoverage;
     * }
     */
    public static int conservativeRasterizationPostDepthCoverage$get(MemorySegment seg) {
        return (int)constants$672.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 conservativeRasterizationPostDepthCoverage;
     * }
     */
    public static void conservativeRasterizationPostDepthCoverage$set(MemorySegment seg, int x) {
        constants$672.const$3.set(seg, x);
    }
    public static int conservativeRasterizationPostDepthCoverage$get(MemorySegment seg, long index) {
        return (int)constants$672.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void conservativeRasterizationPostDepthCoverage$set(MemorySegment seg, long index, int x) {
        constants$672.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


