// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkShaderCreateInfoEXT {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkShaderCreateFlagsEXT flags;
 *     VkShaderStageFlagBits stage;
 *     VkShaderStageFlags nextStage;
 *     VkShaderCodeTypeEXT codeType;
 *     size_t codeSize;
 *     void* pCode;
 *     char* pName;
 *     uint32_t setLayoutCount;
 *     const VkDescriptorSetLayout* pSetLayouts;
 *     uint32_t pushConstantRangeCount;
 *     const VkPushConstantRange* pPushConstantRanges;
 *     const VkSpecializationInfo* pSpecializationInfo;
 * };
 * }
 */
public class VkShaderCreateInfoEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$1024.const$1;
    }
    public static VarHandle sType$VH() {
        return constants$1024.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$1024.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$1024.const$2.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$1024.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$1024.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$1024.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1024.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$1024.const$3.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1024.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1024.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$1024.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderCreateFlagsEXT flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$1024.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderCreateFlagsEXT flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$1024.const$4.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$1024.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$1024.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stage$VH() {
        return constants$1024.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderStageFlagBits stage;
     * }
     */
    public static int stage$get(MemorySegment seg) {
        return (int)constants$1024.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderStageFlagBits stage;
     * }
     */
    public static void stage$set(MemorySegment seg, int x) {
        constants$1024.const$5.set(seg, x);
    }
    public static int stage$get(MemorySegment seg, long index) {
        return (int)constants$1024.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void stage$set(MemorySegment seg, long index, int x) {
        constants$1024.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nextStage$VH() {
        return constants$1025.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderStageFlags nextStage;
     * }
     */
    public static int nextStage$get(MemorySegment seg) {
        return (int)constants$1025.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderStageFlags nextStage;
     * }
     */
    public static void nextStage$set(MemorySegment seg, int x) {
        constants$1025.const$0.set(seg, x);
    }
    public static int nextStage$get(MemorySegment seg, long index) {
        return (int)constants$1025.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nextStage$set(MemorySegment seg, long index, int x) {
        constants$1025.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codeType$VH() {
        return constants$1025.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderCodeTypeEXT codeType;
     * }
     */
    public static int codeType$get(MemorySegment seg) {
        return (int)constants$1025.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderCodeTypeEXT codeType;
     * }
     */
    public static void codeType$set(MemorySegment seg, int x) {
        constants$1025.const$1.set(seg, x);
    }
    public static int codeType$get(MemorySegment seg, long index) {
        return (int)constants$1025.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void codeType$set(MemorySegment seg, long index, int x) {
        constants$1025.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codeSize$VH() {
        return constants$1025.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t codeSize;
     * }
     */
    public static long codeSize$get(MemorySegment seg) {
        return (long)constants$1025.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t codeSize;
     * }
     */
    public static void codeSize$set(MemorySegment seg, long x) {
        constants$1025.const$2.set(seg, x);
    }
    public static long codeSize$get(MemorySegment seg, long index) {
        return (long)constants$1025.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void codeSize$set(MemorySegment seg, long index, long x) {
        constants$1025.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pCode$VH() {
        return constants$1025.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pCode;
     * }
     */
    public static MemorySegment pCode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1025.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pCode;
     * }
     */
    public static void pCode$set(MemorySegment seg, MemorySegment x) {
        constants$1025.const$3.set(seg, x);
    }
    public static MemorySegment pCode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1025.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pCode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1025.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pName$VH() {
        return constants$1025.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* pName;
     * }
     */
    public static MemorySegment pName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1025.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* pName;
     * }
     */
    public static void pName$set(MemorySegment seg, MemorySegment x) {
        constants$1025.const$4.set(seg, x);
    }
    public static MemorySegment pName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1025.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pName$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1025.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle setLayoutCount$VH() {
        return constants$1025.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t setLayoutCount;
     * }
     */
    public static int setLayoutCount$get(MemorySegment seg) {
        return (int)constants$1025.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t setLayoutCount;
     * }
     */
    public static void setLayoutCount$set(MemorySegment seg, int x) {
        constants$1025.const$5.set(seg, x);
    }
    public static int setLayoutCount$get(MemorySegment seg, long index) {
        return (int)constants$1025.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void setLayoutCount$set(MemorySegment seg, long index, int x) {
        constants$1025.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSetLayouts$VH() {
        return constants$1026.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkDescriptorSetLayout* pSetLayouts;
     * }
     */
    public static MemorySegment pSetLayouts$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkDescriptorSetLayout* pSetLayouts;
     * }
     */
    public static void pSetLayouts$set(MemorySegment seg, MemorySegment x) {
        constants$1026.const$0.set(seg, x);
    }
    public static MemorySegment pSetLayouts$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pSetLayouts$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1026.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pushConstantRangeCount$VH() {
        return constants$1026.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pushConstantRangeCount;
     * }
     */
    public static int pushConstantRangeCount$get(MemorySegment seg) {
        return (int)constants$1026.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pushConstantRangeCount;
     * }
     */
    public static void pushConstantRangeCount$set(MemorySegment seg, int x) {
        constants$1026.const$1.set(seg, x);
    }
    public static int pushConstantRangeCount$get(MemorySegment seg, long index) {
        return (int)constants$1026.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pushConstantRangeCount$set(MemorySegment seg, long index, int x) {
        constants$1026.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pPushConstantRanges$VH() {
        return constants$1026.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkPushConstantRange* pPushConstantRanges;
     * }
     */
    public static MemorySegment pPushConstantRanges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkPushConstantRange* pPushConstantRanges;
     * }
     */
    public static void pPushConstantRanges$set(MemorySegment seg, MemorySegment x) {
        constants$1026.const$2.set(seg, x);
    }
    public static MemorySegment pPushConstantRanges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pPushConstantRanges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1026.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSpecializationInfo$VH() {
        return constants$1026.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkSpecializationInfo* pSpecializationInfo;
     * }
     */
    public static MemorySegment pSpecializationInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkSpecializationInfo* pSpecializationInfo;
     * }
     */
    public static void pSpecializationInfo$set(MemorySegment seg, MemorySegment x) {
        constants$1026.const$3.set(seg, x);
    }
    public static MemorySegment pSpecializationInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1026.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pSpecializationInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1026.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


