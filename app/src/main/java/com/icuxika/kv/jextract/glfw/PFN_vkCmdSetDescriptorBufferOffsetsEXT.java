// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdSetDescriptorBufferOffsetsEXT)(struct VkCommandBuffer_T* commandBuffer,enum VkPipelineBindPoint pipelineBindPoint,struct VkPipelineLayout_T* layout,unsigned int firstSet,unsigned int setCount,unsigned int* pBufferIndices,unsigned long long* pOffsets);
 * }
 */
public interface PFN_vkCmdSetDescriptorBufferOffsetsEXT {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int pipelineBindPoint, java.lang.foreign.MemorySegment layout, int firstSet, int setCount, java.lang.foreign.MemorySegment pBufferIndices, java.lang.foreign.MemorySegment pOffsets);
    static MemorySegment allocate(PFN_vkCmdSetDescriptorBufferOffsetsEXT fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$875.const$0, fi, constants$874.const$5, scope);
    }
    static PFN_vkCmdSetDescriptorBufferOffsetsEXT ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _pipelineBindPoint, java.lang.foreign.MemorySegment _layout, int _firstSet, int _setCount, java.lang.foreign.MemorySegment _pBufferIndices, java.lang.foreign.MemorySegment _pOffsets) -> {
            try {
                constants$875.const$1.invokeExact(symbol, _commandBuffer, _pipelineBindPoint, _layout, _firstSet, _setCount, _pBufferIndices, _pOffsets);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


