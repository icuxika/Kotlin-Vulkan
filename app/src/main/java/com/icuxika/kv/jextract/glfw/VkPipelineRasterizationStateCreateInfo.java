// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPipelineRasterizationStateCreateInfo {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkPipelineRasterizationStateCreateFlags flags;
 *     VkBool32 depthClampEnable;
 *     VkBool32 rasterizerDiscardEnable;
 *     VkPolygonMode polygonMode;
 *     VkCullModeFlags cullMode;
 *     VkFrontFace frontFace;
 *     VkBool32 depthBiasEnable;
 *     float depthBiasConstantFactor;
 *     float depthBiasClamp;
 *     float depthBiasSlopeFactor;
 *     float lineWidth;
 * };
 * }
 */
public class VkPipelineRasterizationStateCreateInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$92.const$2;
    }
    public static VarHandle sType$VH() {
        return constants$92.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$92.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$92.const$3.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$92.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$92.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$92.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$92.const$4.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$92.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$92.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineRasterizationStateCreateFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$92.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineRasterizationStateCreateFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$92.const$5.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$92.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$92.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthClampEnable$VH() {
        return constants$93.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthClampEnable;
     * }
     */
    public static int depthClampEnable$get(MemorySegment seg) {
        return (int)constants$93.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthClampEnable;
     * }
     */
    public static void depthClampEnable$set(MemorySegment seg, int x) {
        constants$93.const$0.set(seg, x);
    }
    public static int depthClampEnable$get(MemorySegment seg, long index) {
        return (int)constants$93.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depthClampEnable$set(MemorySegment seg, long index, int x) {
        constants$93.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rasterizerDiscardEnable$VH() {
        return constants$93.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 rasterizerDiscardEnable;
     * }
     */
    public static int rasterizerDiscardEnable$get(MemorySegment seg) {
        return (int)constants$93.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 rasterizerDiscardEnable;
     * }
     */
    public static void rasterizerDiscardEnable$set(MemorySegment seg, int x) {
        constants$93.const$1.set(seg, x);
    }
    public static int rasterizerDiscardEnable$get(MemorySegment seg, long index) {
        return (int)constants$93.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void rasterizerDiscardEnable$set(MemorySegment seg, long index, int x) {
        constants$93.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle polygonMode$VH() {
        return constants$93.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPolygonMode polygonMode;
     * }
     */
    public static int polygonMode$get(MemorySegment seg) {
        return (int)constants$93.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPolygonMode polygonMode;
     * }
     */
    public static void polygonMode$set(MemorySegment seg, int x) {
        constants$93.const$2.set(seg, x);
    }
    public static int polygonMode$get(MemorySegment seg, long index) {
        return (int)constants$93.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void polygonMode$set(MemorySegment seg, long index, int x) {
        constants$93.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cullMode$VH() {
        return constants$93.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkCullModeFlags cullMode;
     * }
     */
    public static int cullMode$get(MemorySegment seg) {
        return (int)constants$93.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkCullModeFlags cullMode;
     * }
     */
    public static void cullMode$set(MemorySegment seg, int x) {
        constants$93.const$3.set(seg, x);
    }
    public static int cullMode$get(MemorySegment seg, long index) {
        return (int)constants$93.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cullMode$set(MemorySegment seg, long index, int x) {
        constants$93.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle frontFace$VH() {
        return constants$93.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFrontFace frontFace;
     * }
     */
    public static int frontFace$get(MemorySegment seg) {
        return (int)constants$93.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFrontFace frontFace;
     * }
     */
    public static void frontFace$set(MemorySegment seg, int x) {
        constants$93.const$4.set(seg, x);
    }
    public static int frontFace$get(MemorySegment seg, long index) {
        return (int)constants$93.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void frontFace$set(MemorySegment seg, long index, int x) {
        constants$93.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBiasEnable$VH() {
        return constants$93.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthBiasEnable;
     * }
     */
    public static int depthBiasEnable$get(MemorySegment seg) {
        return (int)constants$93.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthBiasEnable;
     * }
     */
    public static void depthBiasEnable$set(MemorySegment seg, int x) {
        constants$93.const$5.set(seg, x);
    }
    public static int depthBiasEnable$get(MemorySegment seg, long index) {
        return (int)constants$93.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBiasEnable$set(MemorySegment seg, long index, int x) {
        constants$93.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBiasConstantFactor$VH() {
        return constants$94.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float depthBiasConstantFactor;
     * }
     */
    public static float depthBiasConstantFactor$get(MemorySegment seg) {
        return (float)constants$94.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float depthBiasConstantFactor;
     * }
     */
    public static void depthBiasConstantFactor$set(MemorySegment seg, float x) {
        constants$94.const$0.set(seg, x);
    }
    public static float depthBiasConstantFactor$get(MemorySegment seg, long index) {
        return (float)constants$94.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBiasConstantFactor$set(MemorySegment seg, long index, float x) {
        constants$94.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBiasClamp$VH() {
        return constants$94.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float depthBiasClamp;
     * }
     */
    public static float depthBiasClamp$get(MemorySegment seg) {
        return (float)constants$94.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float depthBiasClamp;
     * }
     */
    public static void depthBiasClamp$set(MemorySegment seg, float x) {
        constants$94.const$1.set(seg, x);
    }
    public static float depthBiasClamp$get(MemorySegment seg, long index) {
        return (float)constants$94.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBiasClamp$set(MemorySegment seg, long index, float x) {
        constants$94.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBiasSlopeFactor$VH() {
        return constants$94.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float depthBiasSlopeFactor;
     * }
     */
    public static float depthBiasSlopeFactor$get(MemorySegment seg) {
        return (float)constants$94.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float depthBiasSlopeFactor;
     * }
     */
    public static void depthBiasSlopeFactor$set(MemorySegment seg, float x) {
        constants$94.const$2.set(seg, x);
    }
    public static float depthBiasSlopeFactor$get(MemorySegment seg, long index) {
        return (float)constants$94.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBiasSlopeFactor$set(MemorySegment seg, long index, float x) {
        constants$94.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lineWidth$VH() {
        return constants$94.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float lineWidth;
     * }
     */
    public static float lineWidth$get(MemorySegment seg) {
        return (float)constants$94.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float lineWidth;
     * }
     */
    public static void lineWidth$set(MemorySegment seg, float x) {
        constants$94.const$3.set(seg, x);
    }
    public static float lineWidth$get(MemorySegment seg, long index) {
        return (float)constants$94.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lineWidth$set(MemorySegment seg, long index, float x) {
        constants$94.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


