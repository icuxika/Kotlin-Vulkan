// Generated by jextract

package com.icuxika.kv.jextract.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ffm_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define WH_KEYBOARD_LL 13
     * }
     */
    public static int WH_KEYBOARD_LL() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define WH_MOUSE_LL 14
     * }
     */
    public static int WH_MOUSE_LL() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define WM_KEYDOWN 256
     * }
     */
    public static int WM_KEYDOWN() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define WM_KEYUP 257
     * }
     */
    public static int WM_KEYUP() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * typedef unsigned long DWORD;
     * }
     */
    public static final OfInt DWORD = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long ULONG_PTR;
     * }
     */
    public static final OfLong ULONG_PTR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short WCHAR;
     * }
     */
    public static final OfShort WCHAR = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short* LPWSTR;
     * }
     */
    public static final AddressLayout LPWSTR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HINSTANCE__* HINSTANCE;
     * }
     */
    public static final AddressLayout HINSTANCE = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HWND__* HWND;
     * }
     */
    public static final AddressLayout HWND = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct HHOOK__* HHOOK;
     * }
     */
    public static final AddressLayout HHOOK = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagMSG* LPMSG;
     * }
     */
    public static final AddressLayout LPMSG = RuntimeHelper.POINTER;
    public static MethodHandle GetMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"GetMessageA");
    }
    /**
     * {@snippet :
     * BOOL GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
     * }
     */
    public static int GetMessageA(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax) {
        var mh$ = GetMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$5,"GetMessageW");
    }
    /**
     * {@snippet :
     * BOOL GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
     * }
     */
    public static int GetMessageW(MemorySegment lpMsg, MemorySegment hWnd, int wMsgFilterMin, int wMsgFilterMax) {
        var mh$ = GetMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"GetKeyNameTextA");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextA(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextA$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$2,"GetKeyNameTextW");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextW(LONG lParam, LPWSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextW(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextW$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExA$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"SetWindowsHookExA");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookExA(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
     * }
     */
    public static MemorySegment SetWindowsHookExA(int idHook, MemorySegment lpfn, MemorySegment hmod, int dwThreadId) {
        var mh$ = SetWindowsHookExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExW$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"SetWindowsHookExW");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookExW(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
     * }
     */
    public static MemorySegment SetWindowsHookExW(int idHook, MemorySegment lpfn, MemorySegment hmod, int dwThreadId) {
        var mh$ = SetWindowsHookExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWindowsHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"UnhookWindowsHookEx");
    }
    /**
     * {@snippet :
     * BOOL UnhookWindowsHookEx(HHOOK hhk);
     * }
     */
    public static int UnhookWindowsHookEx(MemorySegment hhk) {
        var mh$ = UnhookWindowsHookEx$MH();
        try {
            return (int)mh$.invokeExact(hhk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNextHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"CallNextHookEx");
    }
    /**
     * {@snippet :
     * LRESULT CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long CallNextHookEx(MemorySegment hhk, int nCode, long wParam, long lParam) {
        var mh$ = CallNextHookEx$MH();
        try {
            return (long)mh$.invokeExact(hhk, nCode, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


