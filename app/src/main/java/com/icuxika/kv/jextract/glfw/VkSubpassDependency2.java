// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkSubpassDependency2 {
 *     VkStructureType sType;
 *     void* pNext;
 *     uint32_t srcSubpass;
 *     uint32_t dstSubpass;
 *     VkPipelineStageFlags srcStageMask;
 *     VkPipelineStageFlags dstStageMask;
 *     VkAccessFlags srcAccessMask;
 *     VkAccessFlags dstAccessMask;
 *     VkDependencyFlags dependencyFlags;
 *     int32_t viewOffset;
 * };
 * }
 */
public class VkSubpassDependency2 {

    public static MemoryLayout $LAYOUT() {
        return constants$296.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$296.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$296.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$296.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$296.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$296.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$297.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$297.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$297.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$297.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$297.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcSubpass$VH() {
        return constants$297.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t srcSubpass;
     * }
     */
    public static int srcSubpass$get(MemorySegment seg) {
        return (int)constants$297.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t srcSubpass;
     * }
     */
    public static void srcSubpass$set(MemorySegment seg, int x) {
        constants$297.const$1.set(seg, x);
    }
    public static int srcSubpass$get(MemorySegment seg, long index) {
        return (int)constants$297.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void srcSubpass$set(MemorySegment seg, long index, int x) {
        constants$297.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstSubpass$VH() {
        return constants$297.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t dstSubpass;
     * }
     */
    public static int dstSubpass$get(MemorySegment seg) {
        return (int)constants$297.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t dstSubpass;
     * }
     */
    public static void dstSubpass$set(MemorySegment seg, int x) {
        constants$297.const$2.set(seg, x);
    }
    public static int dstSubpass$get(MemorySegment seg, long index) {
        return (int)constants$297.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dstSubpass$set(MemorySegment seg, long index, int x) {
        constants$297.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcStageMask$VH() {
        return constants$297.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineStageFlags srcStageMask;
     * }
     */
    public static int srcStageMask$get(MemorySegment seg) {
        return (int)constants$297.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineStageFlags srcStageMask;
     * }
     */
    public static void srcStageMask$set(MemorySegment seg, int x) {
        constants$297.const$3.set(seg, x);
    }
    public static int srcStageMask$get(MemorySegment seg, long index) {
        return (int)constants$297.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void srcStageMask$set(MemorySegment seg, long index, int x) {
        constants$297.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstStageMask$VH() {
        return constants$297.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineStageFlags dstStageMask;
     * }
     */
    public static int dstStageMask$get(MemorySegment seg) {
        return (int)constants$297.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineStageFlags dstStageMask;
     * }
     */
    public static void dstStageMask$set(MemorySegment seg, int x) {
        constants$297.const$4.set(seg, x);
    }
    public static int dstStageMask$get(MemorySegment seg, long index) {
        return (int)constants$297.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dstStageMask$set(MemorySegment seg, long index, int x) {
        constants$297.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcAccessMask$VH() {
        return constants$297.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAccessFlags srcAccessMask;
     * }
     */
    public static int srcAccessMask$get(MemorySegment seg) {
        return (int)constants$297.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAccessFlags srcAccessMask;
     * }
     */
    public static void srcAccessMask$set(MemorySegment seg, int x) {
        constants$297.const$5.set(seg, x);
    }
    public static int srcAccessMask$get(MemorySegment seg, long index) {
        return (int)constants$297.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void srcAccessMask$set(MemorySegment seg, long index, int x) {
        constants$297.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstAccessMask$VH() {
        return constants$298.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAccessFlags dstAccessMask;
     * }
     */
    public static int dstAccessMask$get(MemorySegment seg) {
        return (int)constants$298.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAccessFlags dstAccessMask;
     * }
     */
    public static void dstAccessMask$set(MemorySegment seg, int x) {
        constants$298.const$0.set(seg, x);
    }
    public static int dstAccessMask$get(MemorySegment seg, long index) {
        return (int)constants$298.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dstAccessMask$set(MemorySegment seg, long index, int x) {
        constants$298.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dependencyFlags$VH() {
        return constants$298.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDependencyFlags dependencyFlags;
     * }
     */
    public static int dependencyFlags$get(MemorySegment seg) {
        return (int)constants$298.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDependencyFlags dependencyFlags;
     * }
     */
    public static void dependencyFlags$set(MemorySegment seg, int x) {
        constants$298.const$1.set(seg, x);
    }
    public static int dependencyFlags$get(MemorySegment seg, long index) {
        return (int)constants$298.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dependencyFlags$set(MemorySegment seg, long index, int x) {
        constants$298.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle viewOffset$VH() {
        return constants$298.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t viewOffset;
     * }
     */
    public static int viewOffset$get(MemorySegment seg) {
        return (int)constants$298.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t viewOffset;
     * }
     */
    public static void viewOffset$set(MemorySegment seg, int x) {
        constants$298.const$2.set(seg, x);
    }
    public static int viewOffset$get(MemorySegment seg, long index) {
        return (int)constants$298.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void viewOffset$set(MemorySegment seg, long index, int x) {
        constants$298.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


