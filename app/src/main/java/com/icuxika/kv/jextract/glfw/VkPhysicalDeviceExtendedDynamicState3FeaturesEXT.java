// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkBool32 extendedDynamicState3TessellationDomainOrigin;
 *     VkBool32 extendedDynamicState3DepthClampEnable;
 *     VkBool32 extendedDynamicState3PolygonMode;
 *     VkBool32 extendedDynamicState3RasterizationSamples;
 *     VkBool32 extendedDynamicState3SampleMask;
 *     VkBool32 extendedDynamicState3AlphaToCoverageEnable;
 *     VkBool32 extendedDynamicState3AlphaToOneEnable;
 *     VkBool32 extendedDynamicState3LogicOpEnable;
 *     VkBool32 extendedDynamicState3ColorBlendEnable;
 *     VkBool32 extendedDynamicState3ColorBlendEquation;
 *     VkBool32 extendedDynamicState3ColorWriteMask;
 *     VkBool32 extendedDynamicState3RasterizationStream;
 *     VkBool32 extendedDynamicState3ConservativeRasterizationMode;
 *     VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
 *     VkBool32 extendedDynamicState3DepthClipEnable;
 *     VkBool32 extendedDynamicState3SampleLocationsEnable;
 *     VkBool32 extendedDynamicState3ColorBlendAdvanced;
 *     VkBool32 extendedDynamicState3ProvokingVertexMode;
 *     VkBool32 extendedDynamicState3LineRasterizationMode;
 *     VkBool32 extendedDynamicState3LineStippleEnable;
 *     VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
 *     VkBool32 extendedDynamicState3ViewportWScalingEnable;
 *     VkBool32 extendedDynamicState3ViewportSwizzle;
 *     VkBool32 extendedDynamicState3CoverageToColorEnable;
 *     VkBool32 extendedDynamicState3CoverageToColorLocation;
 *     VkBool32 extendedDynamicState3CoverageModulationMode;
 *     VkBool32 extendedDynamicState3CoverageModulationTableEnable;
 *     VkBool32 extendedDynamicState3CoverageModulationTable;
 *     VkBool32 extendedDynamicState3CoverageReductionMode;
 *     VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
 *     VkBool32 extendedDynamicState3ShadingRateImageEnable;
 * };
 * }
 */
public class VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$983.const$3;
    }
    public static VarHandle sType$VH() {
        return constants$983.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$983.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$983.const$4.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$983.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$983.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$983.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$983.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$983.const$5.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$983.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$983.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3TessellationDomainOrigin$VH() {
        return constants$984.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin;
     * }
     */
    public static int extendedDynamicState3TessellationDomainOrigin$get(MemorySegment seg) {
        return (int)constants$984.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin;
     * }
     */
    public static void extendedDynamicState3TessellationDomainOrigin$set(MemorySegment seg, int x) {
        constants$984.const$0.set(seg, x);
    }
    public static int extendedDynamicState3TessellationDomainOrigin$get(MemorySegment seg, long index) {
        return (int)constants$984.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3TessellationDomainOrigin$set(MemorySegment seg, long index, int x) {
        constants$984.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3DepthClampEnable$VH() {
        return constants$984.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClampEnable;
     * }
     */
    public static int extendedDynamicState3DepthClampEnable$get(MemorySegment seg) {
        return (int)constants$984.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClampEnable;
     * }
     */
    public static void extendedDynamicState3DepthClampEnable$set(MemorySegment seg, int x) {
        constants$984.const$1.set(seg, x);
    }
    public static int extendedDynamicState3DepthClampEnable$get(MemorySegment seg, long index) {
        return (int)constants$984.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3DepthClampEnable$set(MemorySegment seg, long index, int x) {
        constants$984.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3PolygonMode$VH() {
        return constants$984.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3PolygonMode;
     * }
     */
    public static int extendedDynamicState3PolygonMode$get(MemorySegment seg) {
        return (int)constants$984.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3PolygonMode;
     * }
     */
    public static void extendedDynamicState3PolygonMode$set(MemorySegment seg, int x) {
        constants$984.const$2.set(seg, x);
    }
    public static int extendedDynamicState3PolygonMode$get(MemorySegment seg, long index) {
        return (int)constants$984.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3PolygonMode$set(MemorySegment seg, long index, int x) {
        constants$984.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3RasterizationSamples$VH() {
        return constants$984.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RasterizationSamples;
     * }
     */
    public static int extendedDynamicState3RasterizationSamples$get(MemorySegment seg) {
        return (int)constants$984.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RasterizationSamples;
     * }
     */
    public static void extendedDynamicState3RasterizationSamples$set(MemorySegment seg, int x) {
        constants$984.const$3.set(seg, x);
    }
    public static int extendedDynamicState3RasterizationSamples$get(MemorySegment seg, long index) {
        return (int)constants$984.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3RasterizationSamples$set(MemorySegment seg, long index, int x) {
        constants$984.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3SampleMask$VH() {
        return constants$984.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3SampleMask;
     * }
     */
    public static int extendedDynamicState3SampleMask$get(MemorySegment seg) {
        return (int)constants$984.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3SampleMask;
     * }
     */
    public static void extendedDynamicState3SampleMask$set(MemorySegment seg, int x) {
        constants$984.const$4.set(seg, x);
    }
    public static int extendedDynamicState3SampleMask$get(MemorySegment seg, long index) {
        return (int)constants$984.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3SampleMask$set(MemorySegment seg, long index, int x) {
        constants$984.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3AlphaToCoverageEnable$VH() {
        return constants$984.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable;
     * }
     */
    public static int extendedDynamicState3AlphaToCoverageEnable$get(MemorySegment seg) {
        return (int)constants$984.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable;
     * }
     */
    public static void extendedDynamicState3AlphaToCoverageEnable$set(MemorySegment seg, int x) {
        constants$984.const$5.set(seg, x);
    }
    public static int extendedDynamicState3AlphaToCoverageEnable$get(MemorySegment seg, long index) {
        return (int)constants$984.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3AlphaToCoverageEnable$set(MemorySegment seg, long index, int x) {
        constants$984.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3AlphaToOneEnable$VH() {
        return constants$985.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3AlphaToOneEnable;
     * }
     */
    public static int extendedDynamicState3AlphaToOneEnable$get(MemorySegment seg) {
        return (int)constants$985.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3AlphaToOneEnable;
     * }
     */
    public static void extendedDynamicState3AlphaToOneEnable$set(MemorySegment seg, int x) {
        constants$985.const$0.set(seg, x);
    }
    public static int extendedDynamicState3AlphaToOneEnable$get(MemorySegment seg, long index) {
        return (int)constants$985.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3AlphaToOneEnable$set(MemorySegment seg, long index, int x) {
        constants$985.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3LogicOpEnable$VH() {
        return constants$985.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LogicOpEnable;
     * }
     */
    public static int extendedDynamicState3LogicOpEnable$get(MemorySegment seg) {
        return (int)constants$985.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LogicOpEnable;
     * }
     */
    public static void extendedDynamicState3LogicOpEnable$set(MemorySegment seg, int x) {
        constants$985.const$1.set(seg, x);
    }
    public static int extendedDynamicState3LogicOpEnable$get(MemorySegment seg, long index) {
        return (int)constants$985.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3LogicOpEnable$set(MemorySegment seg, long index, int x) {
        constants$985.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ColorBlendEnable$VH() {
        return constants$985.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendEnable;
     * }
     */
    public static int extendedDynamicState3ColorBlendEnable$get(MemorySegment seg) {
        return (int)constants$985.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendEnable;
     * }
     */
    public static void extendedDynamicState3ColorBlendEnable$set(MemorySegment seg, int x) {
        constants$985.const$2.set(seg, x);
    }
    public static int extendedDynamicState3ColorBlendEnable$get(MemorySegment seg, long index) {
        return (int)constants$985.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ColorBlendEnable$set(MemorySegment seg, long index, int x) {
        constants$985.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ColorBlendEquation$VH() {
        return constants$985.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendEquation;
     * }
     */
    public static int extendedDynamicState3ColorBlendEquation$get(MemorySegment seg) {
        return (int)constants$985.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendEquation;
     * }
     */
    public static void extendedDynamicState3ColorBlendEquation$set(MemorySegment seg, int x) {
        constants$985.const$3.set(seg, x);
    }
    public static int extendedDynamicState3ColorBlendEquation$get(MemorySegment seg, long index) {
        return (int)constants$985.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ColorBlendEquation$set(MemorySegment seg, long index, int x) {
        constants$985.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ColorWriteMask$VH() {
        return constants$985.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorWriteMask;
     * }
     */
    public static int extendedDynamicState3ColorWriteMask$get(MemorySegment seg) {
        return (int)constants$985.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorWriteMask;
     * }
     */
    public static void extendedDynamicState3ColorWriteMask$set(MemorySegment seg, int x) {
        constants$985.const$4.set(seg, x);
    }
    public static int extendedDynamicState3ColorWriteMask$get(MemorySegment seg, long index) {
        return (int)constants$985.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ColorWriteMask$set(MemorySegment seg, long index, int x) {
        constants$985.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3RasterizationStream$VH() {
        return constants$985.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RasterizationStream;
     * }
     */
    public static int extendedDynamicState3RasterizationStream$get(MemorySegment seg) {
        return (int)constants$985.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RasterizationStream;
     * }
     */
    public static void extendedDynamicState3RasterizationStream$set(MemorySegment seg, int x) {
        constants$985.const$5.set(seg, x);
    }
    public static int extendedDynamicState3RasterizationStream$get(MemorySegment seg, long index) {
        return (int)constants$985.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3RasterizationStream$set(MemorySegment seg, long index, int x) {
        constants$985.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ConservativeRasterizationMode$VH() {
        return constants$986.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode;
     * }
     */
    public static int extendedDynamicState3ConservativeRasterizationMode$get(MemorySegment seg) {
        return (int)constants$986.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode;
     * }
     */
    public static void extendedDynamicState3ConservativeRasterizationMode$set(MemorySegment seg, int x) {
        constants$986.const$0.set(seg, x);
    }
    public static int extendedDynamicState3ConservativeRasterizationMode$get(MemorySegment seg, long index) {
        return (int)constants$986.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ConservativeRasterizationMode$set(MemorySegment seg, long index, int x) {
        constants$986.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ExtraPrimitiveOverestimationSize$VH() {
        return constants$986.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
     * }
     */
    public static int extendedDynamicState3ExtraPrimitiveOverestimationSize$get(MemorySegment seg) {
        return (int)constants$986.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
     * }
     */
    public static void extendedDynamicState3ExtraPrimitiveOverestimationSize$set(MemorySegment seg, int x) {
        constants$986.const$1.set(seg, x);
    }
    public static int extendedDynamicState3ExtraPrimitiveOverestimationSize$get(MemorySegment seg, long index) {
        return (int)constants$986.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ExtraPrimitiveOverestimationSize$set(MemorySegment seg, long index, int x) {
        constants$986.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3DepthClipEnable$VH() {
        return constants$986.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClipEnable;
     * }
     */
    public static int extendedDynamicState3DepthClipEnable$get(MemorySegment seg) {
        return (int)constants$986.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClipEnable;
     * }
     */
    public static void extendedDynamicState3DepthClipEnable$set(MemorySegment seg, int x) {
        constants$986.const$2.set(seg, x);
    }
    public static int extendedDynamicState3DepthClipEnable$get(MemorySegment seg, long index) {
        return (int)constants$986.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3DepthClipEnable$set(MemorySegment seg, long index, int x) {
        constants$986.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3SampleLocationsEnable$VH() {
        return constants$986.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3SampleLocationsEnable;
     * }
     */
    public static int extendedDynamicState3SampleLocationsEnable$get(MemorySegment seg) {
        return (int)constants$986.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3SampleLocationsEnable;
     * }
     */
    public static void extendedDynamicState3SampleLocationsEnable$set(MemorySegment seg, int x) {
        constants$986.const$3.set(seg, x);
    }
    public static int extendedDynamicState3SampleLocationsEnable$get(MemorySegment seg, long index) {
        return (int)constants$986.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3SampleLocationsEnable$set(MemorySegment seg, long index, int x) {
        constants$986.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ColorBlendAdvanced$VH() {
        return constants$986.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced;
     * }
     */
    public static int extendedDynamicState3ColorBlendAdvanced$get(MemorySegment seg) {
        return (int)constants$986.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced;
     * }
     */
    public static void extendedDynamicState3ColorBlendAdvanced$set(MemorySegment seg, int x) {
        constants$986.const$4.set(seg, x);
    }
    public static int extendedDynamicState3ColorBlendAdvanced$get(MemorySegment seg, long index) {
        return (int)constants$986.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ColorBlendAdvanced$set(MemorySegment seg, long index, int x) {
        constants$986.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ProvokingVertexMode$VH() {
        return constants$986.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ProvokingVertexMode;
     * }
     */
    public static int extendedDynamicState3ProvokingVertexMode$get(MemorySegment seg) {
        return (int)constants$986.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ProvokingVertexMode;
     * }
     */
    public static void extendedDynamicState3ProvokingVertexMode$set(MemorySegment seg, int x) {
        constants$986.const$5.set(seg, x);
    }
    public static int extendedDynamicState3ProvokingVertexMode$get(MemorySegment seg, long index) {
        return (int)constants$986.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ProvokingVertexMode$set(MemorySegment seg, long index, int x) {
        constants$986.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3LineRasterizationMode$VH() {
        return constants$987.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LineRasterizationMode;
     * }
     */
    public static int extendedDynamicState3LineRasterizationMode$get(MemorySegment seg) {
        return (int)constants$987.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LineRasterizationMode;
     * }
     */
    public static void extendedDynamicState3LineRasterizationMode$set(MemorySegment seg, int x) {
        constants$987.const$0.set(seg, x);
    }
    public static int extendedDynamicState3LineRasterizationMode$get(MemorySegment seg, long index) {
        return (int)constants$987.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3LineRasterizationMode$set(MemorySegment seg, long index, int x) {
        constants$987.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3LineStippleEnable$VH() {
        return constants$987.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LineStippleEnable;
     * }
     */
    public static int extendedDynamicState3LineStippleEnable$get(MemorySegment seg) {
        return (int)constants$987.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3LineStippleEnable;
     * }
     */
    public static void extendedDynamicState3LineStippleEnable$set(MemorySegment seg, int x) {
        constants$987.const$1.set(seg, x);
    }
    public static int extendedDynamicState3LineStippleEnable$get(MemorySegment seg, long index) {
        return (int)constants$987.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3LineStippleEnable$set(MemorySegment seg, long index, int x) {
        constants$987.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3DepthClipNegativeOneToOne$VH() {
        return constants$987.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
     * }
     */
    public static int extendedDynamicState3DepthClipNegativeOneToOne$get(MemorySegment seg) {
        return (int)constants$987.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
     * }
     */
    public static void extendedDynamicState3DepthClipNegativeOneToOne$set(MemorySegment seg, int x) {
        constants$987.const$2.set(seg, x);
    }
    public static int extendedDynamicState3DepthClipNegativeOneToOne$get(MemorySegment seg, long index) {
        return (int)constants$987.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3DepthClipNegativeOneToOne$set(MemorySegment seg, long index, int x) {
        constants$987.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ViewportWScalingEnable$VH() {
        return constants$987.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable;
     * }
     */
    public static int extendedDynamicState3ViewportWScalingEnable$get(MemorySegment seg) {
        return (int)constants$987.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable;
     * }
     */
    public static void extendedDynamicState3ViewportWScalingEnable$set(MemorySegment seg, int x) {
        constants$987.const$3.set(seg, x);
    }
    public static int extendedDynamicState3ViewportWScalingEnable$get(MemorySegment seg, long index) {
        return (int)constants$987.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ViewportWScalingEnable$set(MemorySegment seg, long index, int x) {
        constants$987.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ViewportSwizzle$VH() {
        return constants$987.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ViewportSwizzle;
     * }
     */
    public static int extendedDynamicState3ViewportSwizzle$get(MemorySegment seg) {
        return (int)constants$987.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ViewportSwizzle;
     * }
     */
    public static void extendedDynamicState3ViewportSwizzle$set(MemorySegment seg, int x) {
        constants$987.const$4.set(seg, x);
    }
    public static int extendedDynamicState3ViewportSwizzle$get(MemorySegment seg, long index) {
        return (int)constants$987.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ViewportSwizzle$set(MemorySegment seg, long index, int x) {
        constants$987.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageToColorEnable$VH() {
        return constants$987.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageToColorEnable;
     * }
     */
    public static int extendedDynamicState3CoverageToColorEnable$get(MemorySegment seg) {
        return (int)constants$987.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageToColorEnable;
     * }
     */
    public static void extendedDynamicState3CoverageToColorEnable$set(MemorySegment seg, int x) {
        constants$987.const$5.set(seg, x);
    }
    public static int extendedDynamicState3CoverageToColorEnable$get(MemorySegment seg, long index) {
        return (int)constants$987.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageToColorEnable$set(MemorySegment seg, long index, int x) {
        constants$987.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageToColorLocation$VH() {
        return constants$988.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageToColorLocation;
     * }
     */
    public static int extendedDynamicState3CoverageToColorLocation$get(MemorySegment seg) {
        return (int)constants$988.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageToColorLocation;
     * }
     */
    public static void extendedDynamicState3CoverageToColorLocation$set(MemorySegment seg, int x) {
        constants$988.const$0.set(seg, x);
    }
    public static int extendedDynamicState3CoverageToColorLocation$get(MemorySegment seg, long index) {
        return (int)constants$988.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageToColorLocation$set(MemorySegment seg, long index, int x) {
        constants$988.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageModulationMode$VH() {
        return constants$988.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationMode;
     * }
     */
    public static int extendedDynamicState3CoverageModulationMode$get(MemorySegment seg) {
        return (int)constants$988.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationMode;
     * }
     */
    public static void extendedDynamicState3CoverageModulationMode$set(MemorySegment seg, int x) {
        constants$988.const$1.set(seg, x);
    }
    public static int extendedDynamicState3CoverageModulationMode$get(MemorySegment seg, long index) {
        return (int)constants$988.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageModulationMode$set(MemorySegment seg, long index, int x) {
        constants$988.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageModulationTableEnable$VH() {
        return constants$988.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable;
     * }
     */
    public static int extendedDynamicState3CoverageModulationTableEnable$get(MemorySegment seg) {
        return (int)constants$988.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable;
     * }
     */
    public static void extendedDynamicState3CoverageModulationTableEnable$set(MemorySegment seg, int x) {
        constants$988.const$2.set(seg, x);
    }
    public static int extendedDynamicState3CoverageModulationTableEnable$get(MemorySegment seg, long index) {
        return (int)constants$988.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageModulationTableEnable$set(MemorySegment seg, long index, int x) {
        constants$988.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageModulationTable$VH() {
        return constants$988.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationTable;
     * }
     */
    public static int extendedDynamicState3CoverageModulationTable$get(MemorySegment seg) {
        return (int)constants$988.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageModulationTable;
     * }
     */
    public static void extendedDynamicState3CoverageModulationTable$set(MemorySegment seg, int x) {
        constants$988.const$3.set(seg, x);
    }
    public static int extendedDynamicState3CoverageModulationTable$get(MemorySegment seg, long index) {
        return (int)constants$988.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageModulationTable$set(MemorySegment seg, long index, int x) {
        constants$988.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3CoverageReductionMode$VH() {
        return constants$988.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageReductionMode;
     * }
     */
    public static int extendedDynamicState3CoverageReductionMode$get(MemorySegment seg) {
        return (int)constants$988.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3CoverageReductionMode;
     * }
     */
    public static void extendedDynamicState3CoverageReductionMode$set(MemorySegment seg, int x) {
        constants$988.const$4.set(seg, x);
    }
    public static int extendedDynamicState3CoverageReductionMode$get(MemorySegment seg, long index) {
        return (int)constants$988.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3CoverageReductionMode$set(MemorySegment seg, long index, int x) {
        constants$988.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3RepresentativeFragmentTestEnable$VH() {
        return constants$988.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
     * }
     */
    public static int extendedDynamicState3RepresentativeFragmentTestEnable$get(MemorySegment seg) {
        return (int)constants$988.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
     * }
     */
    public static void extendedDynamicState3RepresentativeFragmentTestEnable$set(MemorySegment seg, int x) {
        constants$988.const$5.set(seg, x);
    }
    public static int extendedDynamicState3RepresentativeFragmentTestEnable$get(MemorySegment seg, long index) {
        return (int)constants$988.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3RepresentativeFragmentTestEnable$set(MemorySegment seg, long index, int x) {
        constants$988.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extendedDynamicState3ShadingRateImageEnable$VH() {
        return constants$989.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable;
     * }
     */
    public static int extendedDynamicState3ShadingRateImageEnable$get(MemorySegment seg) {
        return (int)constants$989.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable;
     * }
     */
    public static void extendedDynamicState3ShadingRateImageEnable$set(MemorySegment seg, int x) {
        constants$989.const$0.set(seg, x);
    }
    public static int extendedDynamicState3ShadingRateImageEnable$get(MemorySegment seg, long index) {
        return (int)constants$989.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extendedDynamicState3ShadingRateImageEnable$set(MemorySegment seg, long index, int x) {
        constants$989.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


