// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPipelineColorBlendAttachmentState {
 *     VkBool32 blendEnable;
 *     VkBlendFactor srcColorBlendFactor;
 *     VkBlendFactor dstColorBlendFactor;
 *     VkBlendOp colorBlendOp;
 *     VkBlendFactor srcAlphaBlendFactor;
 *     VkBlendFactor dstAlphaBlendFactor;
 *     VkBlendOp alphaBlendOp;
 *     VkColorComponentFlags colorWriteMask;
 * };
 * }
 */
public class VkPipelineColorBlendAttachmentState {

    public static MemoryLayout $LAYOUT() {
        return constants$99.const$3;
    }
    public static VarHandle blendEnable$VH() {
        return constants$99.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 blendEnable;
     * }
     */
    public static int blendEnable$get(MemorySegment seg) {
        return (int)constants$99.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 blendEnable;
     * }
     */
    public static void blendEnable$set(MemorySegment seg, int x) {
        constants$99.const$4.set(seg, x);
    }
    public static int blendEnable$get(MemorySegment seg, long index) {
        return (int)constants$99.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void blendEnable$set(MemorySegment seg, long index, int x) {
        constants$99.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcColorBlendFactor$VH() {
        return constants$99.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendFactor srcColorBlendFactor;
     * }
     */
    public static int srcColorBlendFactor$get(MemorySegment seg) {
        return (int)constants$99.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendFactor srcColorBlendFactor;
     * }
     */
    public static void srcColorBlendFactor$set(MemorySegment seg, int x) {
        constants$99.const$5.set(seg, x);
    }
    public static int srcColorBlendFactor$get(MemorySegment seg, long index) {
        return (int)constants$99.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void srcColorBlendFactor$set(MemorySegment seg, long index, int x) {
        constants$99.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstColorBlendFactor$VH() {
        return constants$100.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendFactor dstColorBlendFactor;
     * }
     */
    public static int dstColorBlendFactor$get(MemorySegment seg) {
        return (int)constants$100.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendFactor dstColorBlendFactor;
     * }
     */
    public static void dstColorBlendFactor$set(MemorySegment seg, int x) {
        constants$100.const$0.set(seg, x);
    }
    public static int dstColorBlendFactor$get(MemorySegment seg, long index) {
        return (int)constants$100.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dstColorBlendFactor$set(MemorySegment seg, long index, int x) {
        constants$100.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colorBlendOp$VH() {
        return constants$100.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendOp colorBlendOp;
     * }
     */
    public static int colorBlendOp$get(MemorySegment seg) {
        return (int)constants$100.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendOp colorBlendOp;
     * }
     */
    public static void colorBlendOp$set(MemorySegment seg, int x) {
        constants$100.const$1.set(seg, x);
    }
    public static int colorBlendOp$get(MemorySegment seg, long index) {
        return (int)constants$100.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void colorBlendOp$set(MemorySegment seg, long index, int x) {
        constants$100.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle srcAlphaBlendFactor$VH() {
        return constants$100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendFactor srcAlphaBlendFactor;
     * }
     */
    public static int srcAlphaBlendFactor$get(MemorySegment seg) {
        return (int)constants$100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendFactor srcAlphaBlendFactor;
     * }
     */
    public static void srcAlphaBlendFactor$set(MemorySegment seg, int x) {
        constants$100.const$2.set(seg, x);
    }
    public static int srcAlphaBlendFactor$get(MemorySegment seg, long index) {
        return (int)constants$100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void srcAlphaBlendFactor$set(MemorySegment seg, long index, int x) {
        constants$100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dstAlphaBlendFactor$VH() {
        return constants$100.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendFactor dstAlphaBlendFactor;
     * }
     */
    public static int dstAlphaBlendFactor$get(MemorySegment seg) {
        return (int)constants$100.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendFactor dstAlphaBlendFactor;
     * }
     */
    public static void dstAlphaBlendFactor$set(MemorySegment seg, int x) {
        constants$100.const$3.set(seg, x);
    }
    public static int dstAlphaBlendFactor$get(MemorySegment seg, long index) {
        return (int)constants$100.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dstAlphaBlendFactor$set(MemorySegment seg, long index, int x) {
        constants$100.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle alphaBlendOp$VH() {
        return constants$100.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBlendOp alphaBlendOp;
     * }
     */
    public static int alphaBlendOp$get(MemorySegment seg) {
        return (int)constants$100.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBlendOp alphaBlendOp;
     * }
     */
    public static void alphaBlendOp$set(MemorySegment seg, int x) {
        constants$100.const$4.set(seg, x);
    }
    public static int alphaBlendOp$get(MemorySegment seg, long index) {
        return (int)constants$100.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void alphaBlendOp$set(MemorySegment seg, long index, int x) {
        constants$100.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colorWriteMask$VH() {
        return constants$100.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkColorComponentFlags colorWriteMask;
     * }
     */
    public static int colorWriteMask$get(MemorySegment seg) {
        return (int)constants$100.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkColorComponentFlags colorWriteMask;
     * }
     */
    public static void colorWriteMask$set(MemorySegment seg, int x) {
        constants$100.const$5.set(seg, x);
    }
    public static int colorWriteMask$get(MemorySegment seg, long index) {
        return (int)constants$100.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void colorWriteMask$set(MemorySegment seg, long index, int x) {
        constants$100.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


