// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkShaderStatisticsInfoAMD {
 *     VkShaderStageFlags shaderStageMask;
 *     VkShaderResourceUsageAMD resourceUsage;
 *     uint32_t numPhysicalVgprs;
 *     uint32_t numPhysicalSgprs;
 *     uint32_t numAvailableVgprs;
 *     uint32_t numAvailableSgprs;
 *     uint32_t computeWorkGroupSize[3];
 * };
 * }
 */
public class VkShaderStatisticsInfoAMD {

    public static MemoryLayout $LAYOUT() {
        return constants$640.const$2;
    }
    public static VarHandle shaderStageMask$VH() {
        return constants$640.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderStageFlags shaderStageMask;
     * }
     */
    public static int shaderStageMask$get(MemorySegment seg) {
        return (int)constants$640.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderStageFlags shaderStageMask;
     * }
     */
    public static void shaderStageMask$set(MemorySegment seg, int x) {
        constants$640.const$3.set(seg, x);
    }
    public static int shaderStageMask$get(MemorySegment seg, long index) {
        return (int)constants$640.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStageMask$set(MemorySegment seg, long index, int x) {
        constants$640.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment resourceUsage$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static VarHandle numPhysicalVgprs$VH() {
        return constants$640.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t numPhysicalVgprs;
     * }
     */
    public static int numPhysicalVgprs$get(MemorySegment seg) {
        return (int)constants$640.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t numPhysicalVgprs;
     * }
     */
    public static void numPhysicalVgprs$set(MemorySegment seg, int x) {
        constants$640.const$4.set(seg, x);
    }
    public static int numPhysicalVgprs$get(MemorySegment seg, long index) {
        return (int)constants$640.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void numPhysicalVgprs$set(MemorySegment seg, long index, int x) {
        constants$640.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle numPhysicalSgprs$VH() {
        return constants$640.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t numPhysicalSgprs;
     * }
     */
    public static int numPhysicalSgprs$get(MemorySegment seg) {
        return (int)constants$640.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t numPhysicalSgprs;
     * }
     */
    public static void numPhysicalSgprs$set(MemorySegment seg, int x) {
        constants$640.const$5.set(seg, x);
    }
    public static int numPhysicalSgprs$get(MemorySegment seg, long index) {
        return (int)constants$640.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void numPhysicalSgprs$set(MemorySegment seg, long index, int x) {
        constants$640.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle numAvailableVgprs$VH() {
        return constants$641.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t numAvailableVgprs;
     * }
     */
    public static int numAvailableVgprs$get(MemorySegment seg) {
        return (int)constants$641.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t numAvailableVgprs;
     * }
     */
    public static void numAvailableVgprs$set(MemorySegment seg, int x) {
        constants$641.const$0.set(seg, x);
    }
    public static int numAvailableVgprs$get(MemorySegment seg, long index) {
        return (int)constants$641.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void numAvailableVgprs$set(MemorySegment seg, long index, int x) {
        constants$641.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle numAvailableSgprs$VH() {
        return constants$641.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t numAvailableSgprs;
     * }
     */
    public static int numAvailableSgprs$get(MemorySegment seg) {
        return (int)constants$641.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t numAvailableSgprs;
     * }
     */
    public static void numAvailableSgprs$set(MemorySegment seg, int x) {
        constants$641.const$1.set(seg, x);
    }
    public static int numAvailableSgprs$get(MemorySegment seg, long index) {
        return (int)constants$641.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void numAvailableSgprs$set(MemorySegment seg, long index, int x) {
        constants$641.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment computeWorkGroupSize$slice(MemorySegment seg) {
        return seg.asSlice(56, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


