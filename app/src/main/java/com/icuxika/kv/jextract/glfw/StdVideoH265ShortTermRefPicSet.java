// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265ShortTermRefPicSet {
 *     StdVideoH265ShortTermRefPicSetFlags flags;
 *     uint32_t delta_idx_minus1;
 *     uint16_t use_delta_flag;
 *     uint16_t abs_delta_rps_minus1;
 *     uint16_t used_by_curr_pic_flag;
 *     uint16_t used_by_curr_pic_s0_flag;
 *     uint16_t used_by_curr_pic_s1_flag;
 *     uint16_t reserved1;
 *     uint8_t reserved2;
 *     uint8_t reserved3;
 *     uint8_t num_negative_pics;
 *     uint8_t num_positive_pics;
 *     uint16_t delta_poc_s0_minus1[16];
 *     uint16_t delta_poc_s1_minus1[16];
 * };
 * }
 */
public class StdVideoH265ShortTermRefPicSet {

    public static MemoryLayout $LAYOUT() {
        return constants$549.const$4;
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle delta_idx_minus1$VH() {
        return constants$549.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t delta_idx_minus1;
     * }
     */
    public static int delta_idx_minus1$get(MemorySegment seg) {
        return (int)constants$549.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t delta_idx_minus1;
     * }
     */
    public static void delta_idx_minus1$set(MemorySegment seg, int x) {
        constants$549.const$5.set(seg, x);
    }
    public static int delta_idx_minus1$get(MemorySegment seg, long index) {
        return (int)constants$549.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void delta_idx_minus1$set(MemorySegment seg, long index, int x) {
        constants$549.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_delta_flag$VH() {
        return constants$550.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t use_delta_flag;
     * }
     */
    public static short use_delta_flag$get(MemorySegment seg) {
        return (short)constants$550.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t use_delta_flag;
     * }
     */
    public static void use_delta_flag$set(MemorySegment seg, short x) {
        constants$550.const$0.set(seg, x);
    }
    public static short use_delta_flag$get(MemorySegment seg, long index) {
        return (short)constants$550.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void use_delta_flag$set(MemorySegment seg, long index, short x) {
        constants$550.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle abs_delta_rps_minus1$VH() {
        return constants$550.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t abs_delta_rps_minus1;
     * }
     */
    public static short abs_delta_rps_minus1$get(MemorySegment seg) {
        return (short)constants$550.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t abs_delta_rps_minus1;
     * }
     */
    public static void abs_delta_rps_minus1$set(MemorySegment seg, short x) {
        constants$550.const$1.set(seg, x);
    }
    public static short abs_delta_rps_minus1$get(MemorySegment seg, long index) {
        return (short)constants$550.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void abs_delta_rps_minus1$set(MemorySegment seg, long index, short x) {
        constants$550.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle used_by_curr_pic_flag$VH() {
        return constants$550.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_flag;
     * }
     */
    public static short used_by_curr_pic_flag$get(MemorySegment seg) {
        return (short)constants$550.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_flag;
     * }
     */
    public static void used_by_curr_pic_flag$set(MemorySegment seg, short x) {
        constants$550.const$2.set(seg, x);
    }
    public static short used_by_curr_pic_flag$get(MemorySegment seg, long index) {
        return (short)constants$550.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void used_by_curr_pic_flag$set(MemorySegment seg, long index, short x) {
        constants$550.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle used_by_curr_pic_s0_flag$VH() {
        return constants$550.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_s0_flag;
     * }
     */
    public static short used_by_curr_pic_s0_flag$get(MemorySegment seg) {
        return (short)constants$550.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_s0_flag;
     * }
     */
    public static void used_by_curr_pic_s0_flag$set(MemorySegment seg, short x) {
        constants$550.const$3.set(seg, x);
    }
    public static short used_by_curr_pic_s0_flag$get(MemorySegment seg, long index) {
        return (short)constants$550.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void used_by_curr_pic_s0_flag$set(MemorySegment seg, long index, short x) {
        constants$550.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle used_by_curr_pic_s1_flag$VH() {
        return constants$550.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_s1_flag;
     * }
     */
    public static short used_by_curr_pic_s1_flag$get(MemorySegment seg) {
        return (short)constants$550.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t used_by_curr_pic_s1_flag;
     * }
     */
    public static void used_by_curr_pic_s1_flag$set(MemorySegment seg, short x) {
        constants$550.const$4.set(seg, x);
    }
    public static short used_by_curr_pic_s1_flag$get(MemorySegment seg, long index) {
        return (short)constants$550.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void used_by_curr_pic_s1_flag$set(MemorySegment seg, long index, short x) {
        constants$550.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$550.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t reserved1;
     * }
     */
    public static short reserved1$get(MemorySegment seg) {
        return (short)constants$550.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, short x) {
        constants$550.const$5.set(seg, x);
    }
    public static short reserved1$get(MemorySegment seg, long index) {
        return (short)constants$550.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, short x) {
        constants$550.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$551.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static byte reserved2$get(MemorySegment seg) {
        return (byte)constants$551.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, byte x) {
        constants$551.const$0.set(seg, x);
    }
    public static byte reserved2$get(MemorySegment seg, long index) {
        return (byte)constants$551.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, byte x) {
        constants$551.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved3$VH() {
        return constants$551.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved3;
     * }
     */
    public static byte reserved3$get(MemorySegment seg) {
        return (byte)constants$551.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved3;
     * }
     */
    public static void reserved3$set(MemorySegment seg, byte x) {
        constants$551.const$1.set(seg, x);
    }
    public static byte reserved3$get(MemorySegment seg, long index) {
        return (byte)constants$551.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved3$set(MemorySegment seg, long index, byte x) {
        constants$551.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_negative_pics$VH() {
        return constants$551.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_negative_pics;
     * }
     */
    public static byte num_negative_pics$get(MemorySegment seg) {
        return (byte)constants$551.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_negative_pics;
     * }
     */
    public static void num_negative_pics$set(MemorySegment seg, byte x) {
        constants$551.const$2.set(seg, x);
    }
    public static byte num_negative_pics$get(MemorySegment seg, long index) {
        return (byte)constants$551.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void num_negative_pics$set(MemorySegment seg, long index, byte x) {
        constants$551.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_positive_pics$VH() {
        return constants$551.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_positive_pics;
     * }
     */
    public static byte num_positive_pics$get(MemorySegment seg) {
        return (byte)constants$551.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_positive_pics;
     * }
     */
    public static void num_positive_pics$set(MemorySegment seg, byte x) {
        constants$551.const$3.set(seg, x);
    }
    public static byte num_positive_pics$get(MemorySegment seg, long index) {
        return (byte)constants$551.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void num_positive_pics$set(MemorySegment seg, long index, byte x) {
        constants$551.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment delta_poc_s0_minus1$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static MemorySegment delta_poc_s1_minus1$slice(MemorySegment seg) {
        return seg.asSlice(56, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


