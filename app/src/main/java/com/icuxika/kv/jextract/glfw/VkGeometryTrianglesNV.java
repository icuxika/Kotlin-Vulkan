// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkGeometryTrianglesNV {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkBuffer vertexData;
 *     VkDeviceSize vertexOffset;
 *     uint32_t vertexCount;
 *     VkDeviceSize vertexStride;
 *     VkFormat vertexFormat;
 *     VkBuffer indexData;
 *     VkDeviceSize indexOffset;
 *     uint32_t indexCount;
 *     VkIndexType indexType;
 *     VkBuffer transformData;
 *     VkDeviceSize transformOffset;
 * };
 * }
 */
public class VkGeometryTrianglesNV {

    public static MemoryLayout $LAYOUT() {
        return constants$721.const$0;
    }
    public static VarHandle sType$VH() {
        return constants$721.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$721.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$721.const$1.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$721.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$721.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$721.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$721.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$721.const$2.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$721.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$721.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexData$VH() {
        return constants$721.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBuffer vertexData;
     * }
     */
    public static MemorySegment vertexData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$721.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBuffer vertexData;
     * }
     */
    public static void vertexData$set(MemorySegment seg, MemorySegment x) {
        constants$721.const$3.set(seg, x);
    }
    public static MemorySegment vertexData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$721.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$721.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexOffset$VH() {
        return constants$721.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize vertexOffset;
     * }
     */
    public static long vertexOffset$get(MemorySegment seg) {
        return (long)constants$721.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize vertexOffset;
     * }
     */
    public static void vertexOffset$set(MemorySegment seg, long x) {
        constants$721.const$4.set(seg, x);
    }
    public static long vertexOffset$get(MemorySegment seg, long index) {
        return (long)constants$721.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexOffset$set(MemorySegment seg, long index, long x) {
        constants$721.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexCount$VH() {
        return constants$721.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t vertexCount;
     * }
     */
    public static int vertexCount$get(MemorySegment seg) {
        return (int)constants$721.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t vertexCount;
     * }
     */
    public static void vertexCount$set(MemorySegment seg, int x) {
        constants$721.const$5.set(seg, x);
    }
    public static int vertexCount$get(MemorySegment seg, long index) {
        return (int)constants$721.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexCount$set(MemorySegment seg, long index, int x) {
        constants$721.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexStride$VH() {
        return constants$722.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize vertexStride;
     * }
     */
    public static long vertexStride$get(MemorySegment seg) {
        return (long)constants$722.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize vertexStride;
     * }
     */
    public static void vertexStride$set(MemorySegment seg, long x) {
        constants$722.const$0.set(seg, x);
    }
    public static long vertexStride$get(MemorySegment seg, long index) {
        return (long)constants$722.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexStride$set(MemorySegment seg, long index, long x) {
        constants$722.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexFormat$VH() {
        return constants$722.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFormat vertexFormat;
     * }
     */
    public static int vertexFormat$get(MemorySegment seg) {
        return (int)constants$722.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFormat vertexFormat;
     * }
     */
    public static void vertexFormat$set(MemorySegment seg, int x) {
        constants$722.const$1.set(seg, x);
    }
    public static int vertexFormat$get(MemorySegment seg, long index) {
        return (int)constants$722.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexFormat$set(MemorySegment seg, long index, int x) {
        constants$722.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indexData$VH() {
        return constants$722.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBuffer indexData;
     * }
     */
    public static MemorySegment indexData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$722.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBuffer indexData;
     * }
     */
    public static void indexData$set(MemorySegment seg, MemorySegment x) {
        constants$722.const$2.set(seg, x);
    }
    public static MemorySegment indexData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$722.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void indexData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$722.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indexOffset$VH() {
        return constants$722.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize indexOffset;
     * }
     */
    public static long indexOffset$get(MemorySegment seg) {
        return (long)constants$722.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize indexOffset;
     * }
     */
    public static void indexOffset$set(MemorySegment seg, long x) {
        constants$722.const$3.set(seg, x);
    }
    public static long indexOffset$get(MemorySegment seg, long index) {
        return (long)constants$722.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void indexOffset$set(MemorySegment seg, long index, long x) {
        constants$722.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indexCount$VH() {
        return constants$722.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t indexCount;
     * }
     */
    public static int indexCount$get(MemorySegment seg) {
        return (int)constants$722.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t indexCount;
     * }
     */
    public static void indexCount$set(MemorySegment seg, int x) {
        constants$722.const$4.set(seg, x);
    }
    public static int indexCount$get(MemorySegment seg, long index) {
        return (int)constants$722.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void indexCount$set(MemorySegment seg, long index, int x) {
        constants$722.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle indexType$VH() {
        return constants$722.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkIndexType indexType;
     * }
     */
    public static int indexType$get(MemorySegment seg) {
        return (int)constants$722.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkIndexType indexType;
     * }
     */
    public static void indexType$set(MemorySegment seg, int x) {
        constants$722.const$5.set(seg, x);
    }
    public static int indexType$get(MemorySegment seg, long index) {
        return (int)constants$722.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void indexType$set(MemorySegment seg, long index, int x) {
        constants$722.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle transformData$VH() {
        return constants$723.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBuffer transformData;
     * }
     */
    public static MemorySegment transformData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$723.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBuffer transformData;
     * }
     */
    public static void transformData$set(MemorySegment seg, MemorySegment x) {
        constants$723.const$0.set(seg, x);
    }
    public static MemorySegment transformData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$723.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void transformData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$723.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle transformOffset$VH() {
        return constants$723.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize transformOffset;
     * }
     */
    public static long transformOffset$get(MemorySegment seg) {
        return (long)constants$723.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize transformOffset;
     * }
     */
    public static void transformOffset$set(MemorySegment seg, long x) {
        constants$723.const$1.set(seg, x);
    }
    public static long transformOffset$get(MemorySegment seg, long index) {
        return (long)constants$723.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void transformOffset$set(MemorySegment seg, long index, long x) {
        constants$723.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


