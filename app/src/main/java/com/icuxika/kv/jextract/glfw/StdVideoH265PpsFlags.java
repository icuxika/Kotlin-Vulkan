// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265PpsFlags {
 *      *     uint32_t dependent_slice_segments_enabled_flag;
 *     uint32_t output_flag_present_flag;
 *     uint32_t sign_data_hiding_enabled_flag;
 *     uint32_t cabac_init_present_flag;
 *     uint32_t constrained_intra_pred_flag;
 *     uint32_t transform_skip_enabled_flag;
 *     uint32_t cu_qp_delta_enabled_flag;
 *     uint32_t pps_slice_chroma_qp_offsets_present_flag;
 *     uint32_t weighted_pred_flag;
 *     uint32_t weighted_bipred_flag;
 *     uint32_t transquant_bypass_enabled_flag;
 *     uint32_t tiles_enabled_flag;
 *     uint32_t entropy_coding_sync_enabled_flag;
 *     uint32_t uniform_spacing_flag;
 *     uint32_t loop_filter_across_tiles_enabled_flag;
 *     uint32_t pps_loop_filter_across_slices_enabled_flag;
 *     uint32_t deblocking_filter_control_present_flag;
 *     uint32_t deblocking_filter_override_enabled_flag;
 *     uint32_t pps_deblocking_filter_disabled_flag;
 *     uint32_t pps_scaling_list_data_present_flag;
 *     uint32_t lists_modification_present_flag;
 *     uint32_t slice_segment_header_extension_present_flag;
 *     uint32_t pps_extension_present_flag;
 *     uint32_t cross_component_prediction_enabled_flag;
 *     uint32_t chroma_qp_offset_list_enabled_flag;
 *     uint32_t pps_curr_pic_ref_enabled_flag;
 *     uint32_t residual_adaptive_colour_transform_enabled_flag;
 *     uint32_t pps_slice_act_qp_offsets_present_flag;
 *     uint32_t pps_palette_predictor_initializers_present_flag;
 *     uint32_t monochrome_palette_flag;
 *     uint32_t pps_range_extension_flag;
 * };
 * }
 */
public class StdVideoH265PpsFlags {

    public static MemoryLayout $LAYOUT() {
        return constants$558.const$3;
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


