// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceProperties {
 *     uint32_t apiVersion;
 *     uint32_t driverVersion;
 *     uint32_t vendorID;
 *     uint32_t deviceID;
 *     VkPhysicalDeviceType deviceType;
 *     char deviceName[256];
 *     uint8_t pipelineCacheUUID[16];
 *     VkPhysicalDeviceLimits limits;
 *     VkPhysicalDeviceSparseProperties sparseProperties;
 * };
 * }
 */
public class VkPhysicalDeviceProperties {

    public static MemoryLayout $LAYOUT() {
        return constants$50.const$1;
    }
    public static VarHandle apiVersion$VH() {
        return constants$50.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t apiVersion;
     * }
     */
    public static int apiVersion$get(MemorySegment seg) {
        return (int)constants$50.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t apiVersion;
     * }
     */
    public static void apiVersion$set(MemorySegment seg, int x) {
        constants$50.const$2.set(seg, x);
    }
    public static int apiVersion$get(MemorySegment seg, long index) {
        return (int)constants$50.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void apiVersion$set(MemorySegment seg, long index, int x) {
        constants$50.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driverVersion$VH() {
        return constants$50.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t driverVersion;
     * }
     */
    public static int driverVersion$get(MemorySegment seg) {
        return (int)constants$50.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t driverVersion;
     * }
     */
    public static void driverVersion$set(MemorySegment seg, int x) {
        constants$50.const$3.set(seg, x);
    }
    public static int driverVersion$get(MemorySegment seg, long index) {
        return (int)constants$50.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void driverVersion$set(MemorySegment seg, long index, int x) {
        constants$50.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vendorID$VH() {
        return constants$50.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t vendorID;
     * }
     */
    public static int vendorID$get(MemorySegment seg) {
        return (int)constants$50.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t vendorID;
     * }
     */
    public static void vendorID$set(MemorySegment seg, int x) {
        constants$50.const$4.set(seg, x);
    }
    public static int vendorID$get(MemorySegment seg, long index) {
        return (int)constants$50.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void vendorID$set(MemorySegment seg, long index, int x) {
        constants$50.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle deviceID$VH() {
        return constants$50.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t deviceID;
     * }
     */
    public static int deviceID$get(MemorySegment seg) {
        return (int)constants$50.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t deviceID;
     * }
     */
    public static void deviceID$set(MemorySegment seg, int x) {
        constants$50.const$5.set(seg, x);
    }
    public static int deviceID$get(MemorySegment seg, long index) {
        return (int)constants$50.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void deviceID$set(MemorySegment seg, long index, int x) {
        constants$50.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle deviceType$VH() {
        return constants$51.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPhysicalDeviceType deviceType;
     * }
     */
    public static int deviceType$get(MemorySegment seg) {
        return (int)constants$51.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPhysicalDeviceType deviceType;
     * }
     */
    public static void deviceType$set(MemorySegment seg, int x) {
        constants$51.const$0.set(seg, x);
    }
    public static int deviceType$get(MemorySegment seg, long index) {
        return (int)constants$51.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void deviceType$set(MemorySegment seg, long index, int x) {
        constants$51.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment deviceName$slice(MemorySegment seg) {
        return seg.asSlice(20, 256);
    }
    public static MemorySegment pipelineCacheUUID$slice(MemorySegment seg) {
        return seg.asSlice(276, 16);
    }
    public static MemorySegment limits$slice(MemorySegment seg) {
        return seg.asSlice(296, 504);
    }
    public static MemorySegment sparseProperties$slice(MemorySegment seg) {
        return seg.asSlice(800, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


