// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdDrawMultiIndexedEXT)(struct VkCommandBuffer_T* commandBuffer,unsigned int drawCount,struct VkMultiDrawIndexedInfoEXT* pIndexInfo,unsigned int instanceCount,unsigned int firstInstance,unsigned int stride,int* pVertexOffset);
 * }
 */
public interface PFN_vkCmdDrawMultiIndexedEXT {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int drawCount, java.lang.foreign.MemorySegment pIndexInfo, int instanceCount, int firstInstance, int stride, java.lang.foreign.MemorySegment pVertexOffset);
    static MemorySegment allocate(PFN_vkCmdDrawMultiIndexedEXT fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$937.const$1, fi, constants$937.const$0, scope);
    }
    static PFN_vkCmdDrawMultiIndexedEXT ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _drawCount, java.lang.foreign.MemorySegment _pIndexInfo, int _instanceCount, int _firstInstance, int _stride, java.lang.foreign.MemorySegment _pVertexOffset) -> {
            try {
                constants$937.const$2.invokeExact(symbol, _commandBuffer, _drawCount, _pIndexInfo, _instanceCount, _firstInstance, _stride, _pVertexOffset);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


