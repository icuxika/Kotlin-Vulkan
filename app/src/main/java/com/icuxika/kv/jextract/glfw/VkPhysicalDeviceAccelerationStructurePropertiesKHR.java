// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
 *     VkStructureType sType;
 *     void* pNext;
 *     uint64_t maxGeometryCount;
 *     uint64_t maxInstanceCount;
 *     uint64_t maxPrimitiveCount;
 *     uint32_t maxPerStageDescriptorAccelerationStructures;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
 *     uint32_t maxDescriptorSetAccelerationStructures;
 *     uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures;
 *     uint32_t minAccelerationStructureScratchOffsetAlignment;
 * };
 * }
 */
public class VkPhysicalDeviceAccelerationStructurePropertiesKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$1048.const$0;
    }
    public static VarHandle sType$VH() {
        return constants$1048.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$1048.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$1048.const$1.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$1048.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$1048.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$1048.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1048.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$1048.const$2.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1048.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1048.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryCount$VH() {
        return constants$1048.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t maxGeometryCount;
     * }
     */
    public static long maxGeometryCount$get(MemorySegment seg) {
        return (long)constants$1048.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t maxGeometryCount;
     * }
     */
    public static void maxGeometryCount$set(MemorySegment seg, long x) {
        constants$1048.const$3.set(seg, x);
    }
    public static long maxGeometryCount$get(MemorySegment seg, long index) {
        return (long)constants$1048.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryCount$set(MemorySegment seg, long index, long x) {
        constants$1048.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxInstanceCount$VH() {
        return constants$1048.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t maxInstanceCount;
     * }
     */
    public static long maxInstanceCount$get(MemorySegment seg) {
        return (long)constants$1048.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t maxInstanceCount;
     * }
     */
    public static void maxInstanceCount$set(MemorySegment seg, long x) {
        constants$1048.const$4.set(seg, x);
    }
    public static long maxInstanceCount$get(MemorySegment seg, long index) {
        return (long)constants$1048.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxInstanceCount$set(MemorySegment seg, long index, long x) {
        constants$1048.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPrimitiveCount$VH() {
        return constants$1048.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t maxPrimitiveCount;
     * }
     */
    public static long maxPrimitiveCount$get(MemorySegment seg) {
        return (long)constants$1048.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t maxPrimitiveCount;
     * }
     */
    public static void maxPrimitiveCount$set(MemorySegment seg, long x) {
        constants$1048.const$5.set(seg, x);
    }
    public static long maxPrimitiveCount$get(MemorySegment seg, long index) {
        return (long)constants$1048.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPrimitiveCount$set(MemorySegment seg, long index, long x) {
        constants$1048.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorAccelerationStructures$VH() {
        return constants$1049.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorAccelerationStructures;
     * }
     */
    public static int maxPerStageDescriptorAccelerationStructures$get(MemorySegment seg) {
        return (int)constants$1049.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorAccelerationStructures;
     * }
     */
    public static void maxPerStageDescriptorAccelerationStructures$set(MemorySegment seg, int x) {
        constants$1049.const$0.set(seg, x);
    }
    public static int maxPerStageDescriptorAccelerationStructures$get(MemorySegment seg, long index) {
        return (int)constants$1049.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorAccelerationStructures$set(MemorySegment seg, long index, int x) {
        constants$1049.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindAccelerationStructures$VH() {
        return constants$1049.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindAccelerationStructures$get(MemorySegment seg) {
        return (int)constants$1049.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindAccelerationStructures$set(MemorySegment seg, int x) {
        constants$1049.const$1.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindAccelerationStructures$get(MemorySegment seg, long index) {
        return (int)constants$1049.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindAccelerationStructures$set(MemorySegment seg, long index, int x) {
        constants$1049.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetAccelerationStructures$VH() {
        return constants$1049.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetAccelerationStructures;
     * }
     */
    public static int maxDescriptorSetAccelerationStructures$get(MemorySegment seg) {
        return (int)constants$1049.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetAccelerationStructures;
     * }
     */
    public static void maxDescriptorSetAccelerationStructures$set(MemorySegment seg, int x) {
        constants$1049.const$2.set(seg, x);
    }
    public static int maxDescriptorSetAccelerationStructures$get(MemorySegment seg, long index) {
        return (int)constants$1049.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetAccelerationStructures$set(MemorySegment seg, long index, int x) {
        constants$1049.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindAccelerationStructures$VH() {
        return constants$1049.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindAccelerationStructures$get(MemorySegment seg) {
        return (int)constants$1049.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindAccelerationStructures$set(MemorySegment seg, int x) {
        constants$1049.const$3.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindAccelerationStructures$get(MemorySegment seg, long index) {
        return (int)constants$1049.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindAccelerationStructures$set(MemorySegment seg, long index, int x) {
        constants$1049.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minAccelerationStructureScratchOffsetAlignment$VH() {
        return constants$1049.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t minAccelerationStructureScratchOffsetAlignment;
     * }
     */
    public static int minAccelerationStructureScratchOffsetAlignment$get(MemorySegment seg) {
        return (int)constants$1049.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t minAccelerationStructureScratchOffsetAlignment;
     * }
     */
    public static void minAccelerationStructureScratchOffsetAlignment$set(MemorySegment seg, int x) {
        constants$1049.const$4.set(seg, x);
    }
    public static int minAccelerationStructureScratchOffsetAlignment$get(MemorySegment seg, long index) {
        return (int)constants$1049.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void minAccelerationStructureScratchOffsetAlignment$set(MemorySegment seg, long index, int x) {
        constants$1049.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


