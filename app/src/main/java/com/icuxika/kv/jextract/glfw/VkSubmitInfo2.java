// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkSubmitInfo2 {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkSubmitFlags flags;
 *     uint32_t waitSemaphoreInfoCount;
 *     const VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
 *     uint32_t commandBufferInfoCount;
 *     const VkCommandBufferSubmitInfo* pCommandBufferInfos;
 *     uint32_t signalSemaphoreInfoCount;
 *     const VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
 * };
 * }
 */
public class VkSubmitInfo2 {

    public static MemoryLayout $LAYOUT() {
        return constants$373.const$2;
    }
    public static VarHandle sType$VH() {
        return constants$373.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$373.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$373.const$3.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$373.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$373.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$373.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$373.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$373.const$4.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$373.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$373.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$373.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSubmitFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$373.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSubmitFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$373.const$5.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$373.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$373.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle waitSemaphoreInfoCount$VH() {
        return constants$374.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t waitSemaphoreInfoCount;
     * }
     */
    public static int waitSemaphoreInfoCount$get(MemorySegment seg) {
        return (int)constants$374.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t waitSemaphoreInfoCount;
     * }
     */
    public static void waitSemaphoreInfoCount$set(MemorySegment seg, int x) {
        constants$374.const$0.set(seg, x);
    }
    public static int waitSemaphoreInfoCount$get(MemorySegment seg, long index) {
        return (int)constants$374.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void waitSemaphoreInfoCount$set(MemorySegment seg, long index, int x) {
        constants$374.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pWaitSemaphoreInfos$VH() {
        return constants$374.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
     * }
     */
    public static MemorySegment pWaitSemaphoreInfos$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$374.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
     * }
     */
    public static void pWaitSemaphoreInfos$set(MemorySegment seg, MemorySegment x) {
        constants$374.const$1.set(seg, x);
    }
    public static MemorySegment pWaitSemaphoreInfos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$374.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pWaitSemaphoreInfos$set(MemorySegment seg, long index, MemorySegment x) {
        constants$374.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle commandBufferInfoCount$VH() {
        return constants$374.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t commandBufferInfoCount;
     * }
     */
    public static int commandBufferInfoCount$get(MemorySegment seg) {
        return (int)constants$374.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t commandBufferInfoCount;
     * }
     */
    public static void commandBufferInfoCount$set(MemorySegment seg, int x) {
        constants$374.const$2.set(seg, x);
    }
    public static int commandBufferInfoCount$get(MemorySegment seg, long index) {
        return (int)constants$374.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void commandBufferInfoCount$set(MemorySegment seg, long index, int x) {
        constants$374.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pCommandBufferInfos$VH() {
        return constants$374.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkCommandBufferSubmitInfo* pCommandBufferInfos;
     * }
     */
    public static MemorySegment pCommandBufferInfos$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$374.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkCommandBufferSubmitInfo* pCommandBufferInfos;
     * }
     */
    public static void pCommandBufferInfos$set(MemorySegment seg, MemorySegment x) {
        constants$374.const$3.set(seg, x);
    }
    public static MemorySegment pCommandBufferInfos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$374.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pCommandBufferInfos$set(MemorySegment seg, long index, MemorySegment x) {
        constants$374.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle signalSemaphoreInfoCount$VH() {
        return constants$374.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t signalSemaphoreInfoCount;
     * }
     */
    public static int signalSemaphoreInfoCount$get(MemorySegment seg) {
        return (int)constants$374.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t signalSemaphoreInfoCount;
     * }
     */
    public static void signalSemaphoreInfoCount$set(MemorySegment seg, int x) {
        constants$374.const$4.set(seg, x);
    }
    public static int signalSemaphoreInfoCount$get(MemorySegment seg, long index) {
        return (int)constants$374.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void signalSemaphoreInfoCount$set(MemorySegment seg, long index, int x) {
        constants$374.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSignalSemaphoreInfos$VH() {
        return constants$374.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
     * }
     */
    public static MemorySegment pSignalSemaphoreInfos$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$374.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
     * }
     */
    public static void pSignalSemaphoreInfos$set(MemorySegment seg, MemorySegment x) {
        constants$374.const$5.set(seg, x);
    }
    public static MemorySegment pSignalSemaphoreInfos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$374.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pSignalSemaphoreInfos$set(MemorySegment seg, long index, MemorySegment x) {
        constants$374.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


