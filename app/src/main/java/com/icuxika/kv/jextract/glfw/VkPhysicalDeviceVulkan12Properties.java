// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceVulkan12Properties {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkDriverId driverID;
 *     char driverName[256];
 *     char driverInfo[256];
 *     VkConformanceVersion conformanceVersion;
 *     VkShaderFloatControlsIndependence denormBehaviorIndependence;
 *     VkShaderFloatControlsIndependence roundingModeIndependence;
 *     VkBool32 shaderSignedZeroInfNanPreserveFloat16;
 *     VkBool32 shaderSignedZeroInfNanPreserveFloat32;
 *     VkBool32 shaderSignedZeroInfNanPreserveFloat64;
 *     VkBool32 shaderDenormPreserveFloat16;
 *     VkBool32 shaderDenormPreserveFloat32;
 *     VkBool32 shaderDenormPreserveFloat64;
 *     VkBool32 shaderDenormFlushToZeroFloat16;
 *     VkBool32 shaderDenormFlushToZeroFloat32;
 *     VkBool32 shaderDenormFlushToZeroFloat64;
 *     VkBool32 shaderRoundingModeRTEFloat16;
 *     VkBool32 shaderRoundingModeRTEFloat32;
 *     VkBool32 shaderRoundingModeRTEFloat64;
 *     VkBool32 shaderRoundingModeRTZFloat16;
 *     VkBool32 shaderRoundingModeRTZFloat32;
 *     VkBool32 shaderRoundingModeRTZFloat64;
 *     uint32_t maxUpdateAfterBindDescriptorsInAllPools;
 *     VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
 *     VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
 *     VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
 *     VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
 *     VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
 *     VkBool32 robustBufferAccessUpdateAfterBind;
 *     VkBool32 quadDivergentImplicitLod;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
 *     uint32_t maxPerStageUpdateAfterBindResources;
 *     uint32_t maxDescriptorSetUpdateAfterBindSamplers;
 *     uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
 *     uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
 *     uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
 *     uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
 *     VkResolveModeFlags supportedDepthResolveModes;
 *     VkResolveModeFlags supportedStencilResolveModes;
 *     VkBool32 independentResolveNone;
 *     VkBool32 independentResolve;
 *     VkBool32 filterMinmaxSingleComponentFormats;
 *     VkBool32 filterMinmaxImageComponentMapping;
 *     uint64_t maxTimelineSemaphoreValueDifference;
 *     VkSampleCountFlags framebufferIntegerColorSampleCounts;
 * };
 * }
 */
public class VkPhysicalDeviceVulkan12Properties {

    public static MemoryLayout $LAYOUT() {
        return constants$281.const$5;
    }
    public static VarHandle sType$VH() {
        return constants$282.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$282.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$282.const$0.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$282.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$282.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$282.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$282.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$282.const$1.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$282.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$282.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle driverID$VH() {
        return constants$282.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDriverId driverID;
     * }
     */
    public static int driverID$get(MemorySegment seg) {
        return (int)constants$282.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDriverId driverID;
     * }
     */
    public static void driverID$set(MemorySegment seg, int x) {
        constants$282.const$2.set(seg, x);
    }
    public static int driverID$get(MemorySegment seg, long index) {
        return (int)constants$282.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void driverID$set(MemorySegment seg, long index, int x) {
        constants$282.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment driverName$slice(MemorySegment seg) {
        return seg.asSlice(20, 256);
    }
    public static MemorySegment driverInfo$slice(MemorySegment seg) {
        return seg.asSlice(276, 256);
    }
    public static MemorySegment conformanceVersion$slice(MemorySegment seg) {
        return seg.asSlice(532, 4);
    }
    public static VarHandle denormBehaviorIndependence$VH() {
        return constants$282.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderFloatControlsIndependence denormBehaviorIndependence;
     * }
     */
    public static int denormBehaviorIndependence$get(MemorySegment seg) {
        return (int)constants$282.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderFloatControlsIndependence denormBehaviorIndependence;
     * }
     */
    public static void denormBehaviorIndependence$set(MemorySegment seg, int x) {
        constants$282.const$3.set(seg, x);
    }
    public static int denormBehaviorIndependence$get(MemorySegment seg, long index) {
        return (int)constants$282.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void denormBehaviorIndependence$set(MemorySegment seg, long index, int x) {
        constants$282.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle roundingModeIndependence$VH() {
        return constants$282.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkShaderFloatControlsIndependence roundingModeIndependence;
     * }
     */
    public static int roundingModeIndependence$get(MemorySegment seg) {
        return (int)constants$282.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkShaderFloatControlsIndependence roundingModeIndependence;
     * }
     */
    public static void roundingModeIndependence$set(MemorySegment seg, int x) {
        constants$282.const$4.set(seg, x);
    }
    public static int roundingModeIndependence$get(MemorySegment seg, long index) {
        return (int)constants$282.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void roundingModeIndependence$set(MemorySegment seg, long index, int x) {
        constants$282.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSignedZeroInfNanPreserveFloat16$VH() {
        return constants$282.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat16;
     * }
     */
    public static int shaderSignedZeroInfNanPreserveFloat16$get(MemorySegment seg) {
        return (int)constants$282.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat16;
     * }
     */
    public static void shaderSignedZeroInfNanPreserveFloat16$set(MemorySegment seg, int x) {
        constants$282.const$5.set(seg, x);
    }
    public static int shaderSignedZeroInfNanPreserveFloat16$get(MemorySegment seg, long index) {
        return (int)constants$282.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSignedZeroInfNanPreserveFloat16$set(MemorySegment seg, long index, int x) {
        constants$282.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSignedZeroInfNanPreserveFloat32$VH() {
        return constants$283.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat32;
     * }
     */
    public static int shaderSignedZeroInfNanPreserveFloat32$get(MemorySegment seg) {
        return (int)constants$283.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat32;
     * }
     */
    public static void shaderSignedZeroInfNanPreserveFloat32$set(MemorySegment seg, int x) {
        constants$283.const$0.set(seg, x);
    }
    public static int shaderSignedZeroInfNanPreserveFloat32$get(MemorySegment seg, long index) {
        return (int)constants$283.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSignedZeroInfNanPreserveFloat32$set(MemorySegment seg, long index, int x) {
        constants$283.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSignedZeroInfNanPreserveFloat64$VH() {
        return constants$283.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat64;
     * }
     */
    public static int shaderSignedZeroInfNanPreserveFloat64$get(MemorySegment seg) {
        return (int)constants$283.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSignedZeroInfNanPreserveFloat64;
     * }
     */
    public static void shaderSignedZeroInfNanPreserveFloat64$set(MemorySegment seg, int x) {
        constants$283.const$1.set(seg, x);
    }
    public static int shaderSignedZeroInfNanPreserveFloat64$get(MemorySegment seg, long index) {
        return (int)constants$283.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSignedZeroInfNanPreserveFloat64$set(MemorySegment seg, long index, int x) {
        constants$283.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormPreserveFloat16$VH() {
        return constants$283.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat16;
     * }
     */
    public static int shaderDenormPreserveFloat16$get(MemorySegment seg) {
        return (int)constants$283.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat16;
     * }
     */
    public static void shaderDenormPreserveFloat16$set(MemorySegment seg, int x) {
        constants$283.const$2.set(seg, x);
    }
    public static int shaderDenormPreserveFloat16$get(MemorySegment seg, long index) {
        return (int)constants$283.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormPreserveFloat16$set(MemorySegment seg, long index, int x) {
        constants$283.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormPreserveFloat32$VH() {
        return constants$283.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat32;
     * }
     */
    public static int shaderDenormPreserveFloat32$get(MemorySegment seg) {
        return (int)constants$283.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat32;
     * }
     */
    public static void shaderDenormPreserveFloat32$set(MemorySegment seg, int x) {
        constants$283.const$3.set(seg, x);
    }
    public static int shaderDenormPreserveFloat32$get(MemorySegment seg, long index) {
        return (int)constants$283.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormPreserveFloat32$set(MemorySegment seg, long index, int x) {
        constants$283.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormPreserveFloat64$VH() {
        return constants$283.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat64;
     * }
     */
    public static int shaderDenormPreserveFloat64$get(MemorySegment seg) {
        return (int)constants$283.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormPreserveFloat64;
     * }
     */
    public static void shaderDenormPreserveFloat64$set(MemorySegment seg, int x) {
        constants$283.const$4.set(seg, x);
    }
    public static int shaderDenormPreserveFloat64$get(MemorySegment seg, long index) {
        return (int)constants$283.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormPreserveFloat64$set(MemorySegment seg, long index, int x) {
        constants$283.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormFlushToZeroFloat16$VH() {
        return constants$283.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat16;
     * }
     */
    public static int shaderDenormFlushToZeroFloat16$get(MemorySegment seg) {
        return (int)constants$283.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat16;
     * }
     */
    public static void shaderDenormFlushToZeroFloat16$set(MemorySegment seg, int x) {
        constants$283.const$5.set(seg, x);
    }
    public static int shaderDenormFlushToZeroFloat16$get(MemorySegment seg, long index) {
        return (int)constants$283.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormFlushToZeroFloat16$set(MemorySegment seg, long index, int x) {
        constants$283.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormFlushToZeroFloat32$VH() {
        return constants$284.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat32;
     * }
     */
    public static int shaderDenormFlushToZeroFloat32$get(MemorySegment seg) {
        return (int)constants$284.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat32;
     * }
     */
    public static void shaderDenormFlushToZeroFloat32$set(MemorySegment seg, int x) {
        constants$284.const$0.set(seg, x);
    }
    public static int shaderDenormFlushToZeroFloat32$get(MemorySegment seg, long index) {
        return (int)constants$284.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormFlushToZeroFloat32$set(MemorySegment seg, long index, int x) {
        constants$284.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderDenormFlushToZeroFloat64$VH() {
        return constants$284.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat64;
     * }
     */
    public static int shaderDenormFlushToZeroFloat64$get(MemorySegment seg) {
        return (int)constants$284.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderDenormFlushToZeroFloat64;
     * }
     */
    public static void shaderDenormFlushToZeroFloat64$set(MemorySegment seg, int x) {
        constants$284.const$1.set(seg, x);
    }
    public static int shaderDenormFlushToZeroFloat64$get(MemorySegment seg, long index) {
        return (int)constants$284.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderDenormFlushToZeroFloat64$set(MemorySegment seg, long index, int x) {
        constants$284.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTEFloat16$VH() {
        return constants$284.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat16;
     * }
     */
    public static int shaderRoundingModeRTEFloat16$get(MemorySegment seg) {
        return (int)constants$284.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat16;
     * }
     */
    public static void shaderRoundingModeRTEFloat16$set(MemorySegment seg, int x) {
        constants$284.const$2.set(seg, x);
    }
    public static int shaderRoundingModeRTEFloat16$get(MemorySegment seg, long index) {
        return (int)constants$284.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTEFloat16$set(MemorySegment seg, long index, int x) {
        constants$284.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTEFloat32$VH() {
        return constants$284.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat32;
     * }
     */
    public static int shaderRoundingModeRTEFloat32$get(MemorySegment seg) {
        return (int)constants$284.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat32;
     * }
     */
    public static void shaderRoundingModeRTEFloat32$set(MemorySegment seg, int x) {
        constants$284.const$3.set(seg, x);
    }
    public static int shaderRoundingModeRTEFloat32$get(MemorySegment seg, long index) {
        return (int)constants$284.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTEFloat32$set(MemorySegment seg, long index, int x) {
        constants$284.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTEFloat64$VH() {
        return constants$284.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat64;
     * }
     */
    public static int shaderRoundingModeRTEFloat64$get(MemorySegment seg) {
        return (int)constants$284.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTEFloat64;
     * }
     */
    public static void shaderRoundingModeRTEFloat64$set(MemorySegment seg, int x) {
        constants$284.const$4.set(seg, x);
    }
    public static int shaderRoundingModeRTEFloat64$get(MemorySegment seg, long index) {
        return (int)constants$284.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTEFloat64$set(MemorySegment seg, long index, int x) {
        constants$284.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTZFloat16$VH() {
        return constants$284.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat16;
     * }
     */
    public static int shaderRoundingModeRTZFloat16$get(MemorySegment seg) {
        return (int)constants$284.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat16;
     * }
     */
    public static void shaderRoundingModeRTZFloat16$set(MemorySegment seg, int x) {
        constants$284.const$5.set(seg, x);
    }
    public static int shaderRoundingModeRTZFloat16$get(MemorySegment seg, long index) {
        return (int)constants$284.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTZFloat16$set(MemorySegment seg, long index, int x) {
        constants$284.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTZFloat32$VH() {
        return constants$285.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat32;
     * }
     */
    public static int shaderRoundingModeRTZFloat32$get(MemorySegment seg) {
        return (int)constants$285.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat32;
     * }
     */
    public static void shaderRoundingModeRTZFloat32$set(MemorySegment seg, int x) {
        constants$285.const$0.set(seg, x);
    }
    public static int shaderRoundingModeRTZFloat32$get(MemorySegment seg, long index) {
        return (int)constants$285.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTZFloat32$set(MemorySegment seg, long index, int x) {
        constants$285.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderRoundingModeRTZFloat64$VH() {
        return constants$285.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat64;
     * }
     */
    public static int shaderRoundingModeRTZFloat64$get(MemorySegment seg) {
        return (int)constants$285.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderRoundingModeRTZFloat64;
     * }
     */
    public static void shaderRoundingModeRTZFloat64$set(MemorySegment seg, int x) {
        constants$285.const$1.set(seg, x);
    }
    public static int shaderRoundingModeRTZFloat64$get(MemorySegment seg, long index) {
        return (int)constants$285.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderRoundingModeRTZFloat64$set(MemorySegment seg, long index, int x) {
        constants$285.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxUpdateAfterBindDescriptorsInAllPools$VH() {
        return constants$285.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools;
     * }
     */
    public static int maxUpdateAfterBindDescriptorsInAllPools$get(MemorySegment seg) {
        return (int)constants$285.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools;
     * }
     */
    public static void maxUpdateAfterBindDescriptorsInAllPools$set(MemorySegment seg, int x) {
        constants$285.const$2.set(seg, x);
    }
    public static int maxUpdateAfterBindDescriptorsInAllPools$get(MemorySegment seg, long index) {
        return (int)constants$285.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxUpdateAfterBindDescriptorsInAllPools$set(MemorySegment seg, long index, int x) {
        constants$285.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderUniformBufferArrayNonUniformIndexingNative$VH() {
        return constants$285.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
     * }
     */
    public static int shaderUniformBufferArrayNonUniformIndexingNative$get(MemorySegment seg) {
        return (int)constants$285.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
     * }
     */
    public static void shaderUniformBufferArrayNonUniformIndexingNative$set(MemorySegment seg, int x) {
        constants$285.const$3.set(seg, x);
    }
    public static int shaderUniformBufferArrayNonUniformIndexingNative$get(MemorySegment seg, long index) {
        return (int)constants$285.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderUniformBufferArrayNonUniformIndexingNative$set(MemorySegment seg, long index, int x) {
        constants$285.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSampledImageArrayNonUniformIndexingNative$VH() {
        return constants$285.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
     * }
     */
    public static int shaderSampledImageArrayNonUniformIndexingNative$get(MemorySegment seg) {
        return (int)constants$285.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
     * }
     */
    public static void shaderSampledImageArrayNonUniformIndexingNative$set(MemorySegment seg, int x) {
        constants$285.const$4.set(seg, x);
    }
    public static int shaderSampledImageArrayNonUniformIndexingNative$get(MemorySegment seg, long index) {
        return (int)constants$285.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSampledImageArrayNonUniformIndexingNative$set(MemorySegment seg, long index, int x) {
        constants$285.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageBufferArrayNonUniformIndexingNative$VH() {
        return constants$285.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
     * }
     */
    public static int shaderStorageBufferArrayNonUniformIndexingNative$get(MemorySegment seg) {
        return (int)constants$285.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
     * }
     */
    public static void shaderStorageBufferArrayNonUniformIndexingNative$set(MemorySegment seg, int x) {
        constants$285.const$5.set(seg, x);
    }
    public static int shaderStorageBufferArrayNonUniformIndexingNative$get(MemorySegment seg, long index) {
        return (int)constants$285.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageBufferArrayNonUniformIndexingNative$set(MemorySegment seg, long index, int x) {
        constants$285.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageArrayNonUniformIndexingNative$VH() {
        return constants$286.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
     * }
     */
    public static int shaderStorageImageArrayNonUniformIndexingNative$get(MemorySegment seg) {
        return (int)constants$286.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
     * }
     */
    public static void shaderStorageImageArrayNonUniformIndexingNative$set(MemorySegment seg, int x) {
        constants$286.const$0.set(seg, x);
    }
    public static int shaderStorageImageArrayNonUniformIndexingNative$get(MemorySegment seg, long index) {
        return (int)constants$286.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageArrayNonUniformIndexingNative$set(MemorySegment seg, long index, int x) {
        constants$286.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInputAttachmentArrayNonUniformIndexingNative$VH() {
        return constants$286.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
     * }
     */
    public static int shaderInputAttachmentArrayNonUniformIndexingNative$get(MemorySegment seg) {
        return (int)constants$286.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
     * }
     */
    public static void shaderInputAttachmentArrayNonUniformIndexingNative$set(MemorySegment seg, int x) {
        constants$286.const$1.set(seg, x);
    }
    public static int shaderInputAttachmentArrayNonUniformIndexingNative$get(MemorySegment seg, long index) {
        return (int)constants$286.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInputAttachmentArrayNonUniformIndexingNative$set(MemorySegment seg, long index, int x) {
        constants$286.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle robustBufferAccessUpdateAfterBind$VH() {
        return constants$286.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 robustBufferAccessUpdateAfterBind;
     * }
     */
    public static int robustBufferAccessUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$286.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 robustBufferAccessUpdateAfterBind;
     * }
     */
    public static void robustBufferAccessUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$286.const$2.set(seg, x);
    }
    public static int robustBufferAccessUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$286.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void robustBufferAccessUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$286.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle quadDivergentImplicitLod$VH() {
        return constants$286.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 quadDivergentImplicitLod;
     * }
     */
    public static int quadDivergentImplicitLod$get(MemorySegment seg) {
        return (int)constants$286.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 quadDivergentImplicitLod;
     * }
     */
    public static void quadDivergentImplicitLod$set(MemorySegment seg, int x) {
        constants$286.const$3.set(seg, x);
    }
    public static int quadDivergentImplicitLod$get(MemorySegment seg, long index) {
        return (int)constants$286.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void quadDivergentImplicitLod$set(MemorySegment seg, long index, int x) {
        constants$286.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindSamplers$VH() {
        return constants$286.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindSamplers$get(MemorySegment seg) {
        return (int)constants$286.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindSamplers$set(MemorySegment seg, int x) {
        constants$286.const$4.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindSamplers$get(MemorySegment seg, long index) {
        return (int)constants$286.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindSamplers$set(MemorySegment seg, long index, int x) {
        constants$286.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindUniformBuffers$VH() {
        return constants$286.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindUniformBuffers$get(MemorySegment seg) {
        return (int)constants$286.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindUniformBuffers$set(MemorySegment seg, int x) {
        constants$286.const$5.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindUniformBuffers$get(MemorySegment seg, long index) {
        return (int)constants$286.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindUniformBuffers$set(MemorySegment seg, long index, int x) {
        constants$286.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindStorageBuffers$VH() {
        return constants$287.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindStorageBuffers$get(MemorySegment seg) {
        return (int)constants$287.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindStorageBuffers$set(MemorySegment seg, int x) {
        constants$287.const$0.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindStorageBuffers$get(MemorySegment seg, long index) {
        return (int)constants$287.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindStorageBuffers$set(MemorySegment seg, long index, int x) {
        constants$287.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindSampledImages$VH() {
        return constants$287.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindSampledImages$get(MemorySegment seg) {
        return (int)constants$287.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindSampledImages$set(MemorySegment seg, int x) {
        constants$287.const$1.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindSampledImages$get(MemorySegment seg, long index) {
        return (int)constants$287.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindSampledImages$set(MemorySegment seg, long index, int x) {
        constants$287.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindStorageImages$VH() {
        return constants$287.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindStorageImages$get(MemorySegment seg) {
        return (int)constants$287.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindStorageImages$set(MemorySegment seg, int x) {
        constants$287.const$2.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindStorageImages$get(MemorySegment seg, long index) {
        return (int)constants$287.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindStorageImages$set(MemorySegment seg, long index, int x) {
        constants$287.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUpdateAfterBindInputAttachments$VH() {
        return constants$287.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindInputAttachments$get(MemorySegment seg) {
        return (int)constants$287.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindInputAttachments$set(MemorySegment seg, int x) {
        constants$287.const$3.set(seg, x);
    }
    public static int maxPerStageDescriptorUpdateAfterBindInputAttachments$get(MemorySegment seg, long index) {
        return (int)constants$287.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUpdateAfterBindInputAttachments$set(MemorySegment seg, long index, int x) {
        constants$287.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageUpdateAfterBindResources$VH() {
        return constants$287.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageUpdateAfterBindResources;
     * }
     */
    public static int maxPerStageUpdateAfterBindResources$get(MemorySegment seg) {
        return (int)constants$287.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageUpdateAfterBindResources;
     * }
     */
    public static void maxPerStageUpdateAfterBindResources$set(MemorySegment seg, int x) {
        constants$287.const$4.set(seg, x);
    }
    public static int maxPerStageUpdateAfterBindResources$get(MemorySegment seg, long index) {
        return (int)constants$287.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageUpdateAfterBindResources$set(MemorySegment seg, long index, int x) {
        constants$287.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindSamplers$VH() {
        return constants$287.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindSamplers$get(MemorySegment seg) {
        return (int)constants$287.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindSamplers$set(MemorySegment seg, int x) {
        constants$287.const$5.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindSamplers$get(MemorySegment seg, long index) {
        return (int)constants$287.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindSamplers$set(MemorySegment seg, long index, int x) {
        constants$287.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindUniformBuffers$VH() {
        return constants$288.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindUniformBuffers$get(MemorySegment seg) {
        return (int)constants$288.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindUniformBuffers$set(MemorySegment seg, int x) {
        constants$288.const$0.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindUniformBuffers$get(MemorySegment seg, long index) {
        return (int)constants$288.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindUniformBuffers$set(MemorySegment seg, long index, int x) {
        constants$288.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$VH() {
        return constants$288.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$get(MemorySegment seg) {
        return (int)constants$288.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$set(MemorySegment seg, int x) {
        constants$288.const$1.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$get(MemorySegment seg, long index) {
        return (int)constants$288.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$set(MemorySegment seg, long index, int x) {
        constants$288.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindStorageBuffers$VH() {
        return constants$288.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageBuffers$get(MemorySegment seg) {
        return (int)constants$288.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageBuffers$set(MemorySegment seg, int x) {
        constants$288.const$2.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindStorageBuffers$get(MemorySegment seg, long index) {
        return (int)constants$288.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindStorageBuffers$set(MemorySegment seg, long index, int x) {
        constants$288.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$VH() {
        return constants$288.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$get(MemorySegment seg) {
        return (int)constants$288.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$set(MemorySegment seg, int x) {
        constants$288.const$3.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$get(MemorySegment seg, long index) {
        return (int)constants$288.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$set(MemorySegment seg, long index, int x) {
        constants$288.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindSampledImages$VH() {
        return constants$288.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindSampledImages$get(MemorySegment seg) {
        return (int)constants$288.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindSampledImages$set(MemorySegment seg, int x) {
        constants$288.const$4.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindSampledImages$get(MemorySegment seg, long index) {
        return (int)constants$288.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindSampledImages$set(MemorySegment seg, long index, int x) {
        constants$288.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindStorageImages$VH() {
        return constants$288.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageImages$get(MemorySegment seg) {
        return (int)constants$288.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageImages$set(MemorySegment seg, int x) {
        constants$288.const$5.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindStorageImages$get(MemorySegment seg, long index) {
        return (int)constants$288.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindStorageImages$set(MemorySegment seg, long index, int x) {
        constants$288.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUpdateAfterBindInputAttachments$VH() {
        return constants$289.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindInputAttachments$get(MemorySegment seg) {
        return (int)constants$289.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindInputAttachments$set(MemorySegment seg, int x) {
        constants$289.const$0.set(seg, x);
    }
    public static int maxDescriptorSetUpdateAfterBindInputAttachments$get(MemorySegment seg, long index) {
        return (int)constants$289.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUpdateAfterBindInputAttachments$set(MemorySegment seg, long index, int x) {
        constants$289.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedDepthResolveModes$VH() {
        return constants$289.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkResolveModeFlags supportedDepthResolveModes;
     * }
     */
    public static int supportedDepthResolveModes$get(MemorySegment seg) {
        return (int)constants$289.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkResolveModeFlags supportedDepthResolveModes;
     * }
     */
    public static void supportedDepthResolveModes$set(MemorySegment seg, int x) {
        constants$289.const$1.set(seg, x);
    }
    public static int supportedDepthResolveModes$get(MemorySegment seg, long index) {
        return (int)constants$289.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedDepthResolveModes$set(MemorySegment seg, long index, int x) {
        constants$289.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle supportedStencilResolveModes$VH() {
        return constants$289.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkResolveModeFlags supportedStencilResolveModes;
     * }
     */
    public static int supportedStencilResolveModes$get(MemorySegment seg) {
        return (int)constants$289.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkResolveModeFlags supportedStencilResolveModes;
     * }
     */
    public static void supportedStencilResolveModes$set(MemorySegment seg, int x) {
        constants$289.const$2.set(seg, x);
    }
    public static int supportedStencilResolveModes$get(MemorySegment seg, long index) {
        return (int)constants$289.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void supportedStencilResolveModes$set(MemorySegment seg, long index, int x) {
        constants$289.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle independentResolveNone$VH() {
        return constants$289.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 independentResolveNone;
     * }
     */
    public static int independentResolveNone$get(MemorySegment seg) {
        return (int)constants$289.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 independentResolveNone;
     * }
     */
    public static void independentResolveNone$set(MemorySegment seg, int x) {
        constants$289.const$3.set(seg, x);
    }
    public static int independentResolveNone$get(MemorySegment seg, long index) {
        return (int)constants$289.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void independentResolveNone$set(MemorySegment seg, long index, int x) {
        constants$289.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle independentResolve$VH() {
        return constants$289.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 independentResolve;
     * }
     */
    public static int independentResolve$get(MemorySegment seg) {
        return (int)constants$289.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 independentResolve;
     * }
     */
    public static void independentResolve$set(MemorySegment seg, int x) {
        constants$289.const$4.set(seg, x);
    }
    public static int independentResolve$get(MemorySegment seg, long index) {
        return (int)constants$289.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void independentResolve$set(MemorySegment seg, long index, int x) {
        constants$289.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filterMinmaxSingleComponentFormats$VH() {
        return constants$289.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 filterMinmaxSingleComponentFormats;
     * }
     */
    public static int filterMinmaxSingleComponentFormats$get(MemorySegment seg) {
        return (int)constants$289.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 filterMinmaxSingleComponentFormats;
     * }
     */
    public static void filterMinmaxSingleComponentFormats$set(MemorySegment seg, int x) {
        constants$289.const$5.set(seg, x);
    }
    public static int filterMinmaxSingleComponentFormats$get(MemorySegment seg, long index) {
        return (int)constants$289.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void filterMinmaxSingleComponentFormats$set(MemorySegment seg, long index, int x) {
        constants$289.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filterMinmaxImageComponentMapping$VH() {
        return constants$290.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 filterMinmaxImageComponentMapping;
     * }
     */
    public static int filterMinmaxImageComponentMapping$get(MemorySegment seg) {
        return (int)constants$290.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 filterMinmaxImageComponentMapping;
     * }
     */
    public static void filterMinmaxImageComponentMapping$set(MemorySegment seg, int x) {
        constants$290.const$0.set(seg, x);
    }
    public static int filterMinmaxImageComponentMapping$get(MemorySegment seg, long index) {
        return (int)constants$290.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void filterMinmaxImageComponentMapping$set(MemorySegment seg, long index, int x) {
        constants$290.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTimelineSemaphoreValueDifference$VH() {
        return constants$290.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t maxTimelineSemaphoreValueDifference;
     * }
     */
    public static long maxTimelineSemaphoreValueDifference$get(MemorySegment seg) {
        return (long)constants$290.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t maxTimelineSemaphoreValueDifference;
     * }
     */
    public static void maxTimelineSemaphoreValueDifference$set(MemorySegment seg, long x) {
        constants$290.const$1.set(seg, x);
    }
    public static long maxTimelineSemaphoreValueDifference$get(MemorySegment seg, long index) {
        return (long)constants$290.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTimelineSemaphoreValueDifference$set(MemorySegment seg, long index, long x) {
        constants$290.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle framebufferIntegerColorSampleCounts$VH() {
        return constants$290.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferIntegerColorSampleCounts;
     * }
     */
    public static int framebufferIntegerColorSampleCounts$get(MemorySegment seg) {
        return (int)constants$290.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferIntegerColorSampleCounts;
     * }
     */
    public static void framebufferIntegerColorSampleCounts$set(MemorySegment seg, int x) {
        constants$290.const$2.set(seg, x);
    }
    public static int framebufferIntegerColorSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$290.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void framebufferIntegerColorSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$290.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


