// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union VkPerformanceCounterResultKHR {
 *     int32_t int32;
 *     int64_t int64;
 *     uint32_t uint32;
 *     uint64_t uint64;
 *     float float32;
 *     double float64;
 * };
 * }
 */
public class VkPerformanceCounterResultKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$524.const$2;
    }
    public static VarHandle int32$VH() {
        return constants$524.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t int32;
     * }
     */
    public static int int32$get(MemorySegment seg) {
        return (int)constants$524.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t int32;
     * }
     */
    public static void int32$set(MemorySegment seg, int x) {
        constants$524.const$3.set(seg, x);
    }
    public static int int32$get(MemorySegment seg, long index) {
        return (int)constants$524.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void int32$set(MemorySegment seg, long index, int x) {
        constants$524.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle int64$VH() {
        return constants$524.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t int64;
     * }
     */
    public static long int64$get(MemorySegment seg) {
        return (long)constants$524.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t int64;
     * }
     */
    public static void int64$set(MemorySegment seg, long x) {
        constants$524.const$4.set(seg, x);
    }
    public static long int64$get(MemorySegment seg, long index) {
        return (long)constants$524.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void int64$set(MemorySegment seg, long index, long x) {
        constants$524.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uint32$VH() {
        return constants$524.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t uint32;
     * }
     */
    public static int uint32$get(MemorySegment seg) {
        return (int)constants$524.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t uint32;
     * }
     */
    public static void uint32$set(MemorySegment seg, int x) {
        constants$524.const$5.set(seg, x);
    }
    public static int uint32$get(MemorySegment seg, long index) {
        return (int)constants$524.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void uint32$set(MemorySegment seg, long index, int x) {
        constants$524.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uint64$VH() {
        return constants$525.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t uint64;
     * }
     */
    public static long uint64$get(MemorySegment seg) {
        return (long)constants$525.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t uint64;
     * }
     */
    public static void uint64$set(MemorySegment seg, long x) {
        constants$525.const$0.set(seg, x);
    }
    public static long uint64$get(MemorySegment seg, long index) {
        return (long)constants$525.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void uint64$set(MemorySegment seg, long index, long x) {
        constants$525.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle float32$VH() {
        return constants$525.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float float32;
     * }
     */
    public static float float32$get(MemorySegment seg) {
        return (float)constants$525.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float float32;
     * }
     */
    public static void float32$set(MemorySegment seg, float x) {
        constants$525.const$1.set(seg, x);
    }
    public static float float32$get(MemorySegment seg, long index) {
        return (float)constants$525.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void float32$set(MemorySegment seg, long index, float x) {
        constants$525.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle float64$VH() {
        return constants$525.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double float64;
     * }
     */
    public static double float64$get(MemorySegment seg) {
        return (double)constants$525.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double float64;
     * }
     */
    public static void float64$set(MemorySegment seg, double x) {
        constants$525.const$2.set(seg, x);
    }
    public static double float64$get(MemorySegment seg, long index) {
        return (double)constants$525.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void float64$set(MemorySegment seg, long index, double x) {
        constants$525.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


