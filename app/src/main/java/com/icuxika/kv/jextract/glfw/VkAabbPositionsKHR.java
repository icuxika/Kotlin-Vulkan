// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkAabbPositionsKHR {
 *     float minX;
 *     float minY;
 *     float minZ;
 *     float maxX;
 *     float maxY;
 *     float maxZ;
 * };
 * }
 */
public class VkAabbPositionsKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$732.const$3;
    }
    public static VarHandle minX$VH() {
        return constants$732.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minX;
     * }
     */
    public static float minX$get(MemorySegment seg) {
        return (float)constants$732.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minX;
     * }
     */
    public static void minX$set(MemorySegment seg, float x) {
        constants$732.const$4.set(seg, x);
    }
    public static float minX$get(MemorySegment seg, long index) {
        return (float)constants$732.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void minX$set(MemorySegment seg, long index, float x) {
        constants$732.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minY$VH() {
        return constants$732.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minY;
     * }
     */
    public static float minY$get(MemorySegment seg) {
        return (float)constants$732.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minY;
     * }
     */
    public static void minY$set(MemorySegment seg, float x) {
        constants$732.const$5.set(seg, x);
    }
    public static float minY$get(MemorySegment seg, long index) {
        return (float)constants$732.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void minY$set(MemorySegment seg, long index, float x) {
        constants$732.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minZ$VH() {
        return constants$733.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minZ;
     * }
     */
    public static float minZ$get(MemorySegment seg) {
        return (float)constants$733.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minZ;
     * }
     */
    public static void minZ$set(MemorySegment seg, float x) {
        constants$733.const$0.set(seg, x);
    }
    public static float minZ$get(MemorySegment seg, long index) {
        return (float)constants$733.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void minZ$set(MemorySegment seg, long index, float x) {
        constants$733.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxX$VH() {
        return constants$733.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxX;
     * }
     */
    public static float maxX$get(MemorySegment seg) {
        return (float)constants$733.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxX;
     * }
     */
    public static void maxX$set(MemorySegment seg, float x) {
        constants$733.const$1.set(seg, x);
    }
    public static float maxX$get(MemorySegment seg, long index) {
        return (float)constants$733.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxX$set(MemorySegment seg, long index, float x) {
        constants$733.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxY$VH() {
        return constants$733.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxY;
     * }
     */
    public static float maxY$get(MemorySegment seg) {
        return (float)constants$733.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxY;
     * }
     */
    public static void maxY$set(MemorySegment seg, float x) {
        constants$733.const$2.set(seg, x);
    }
    public static float maxY$get(MemorySegment seg, long index) {
        return (float)constants$733.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxY$set(MemorySegment seg, long index, float x) {
        constants$733.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxZ$VH() {
        return constants$733.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxZ;
     * }
     */
    public static float maxZ$get(MemorySegment seg) {
        return (float)constants$733.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxZ;
     * }
     */
    public static void maxZ$set(MemorySegment seg, float x) {
        constants$733.const$3.set(seg, x);
    }
    public static float maxZ$get(MemorySegment seg, long index) {
        return (float)constants$733.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxZ$set(MemorySegment seg, long index, float x) {
        constants$733.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


