// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * unsigned long long (*PFN_vkGetRayTracingShaderGroupStackSizeKHR)(struct VkDevice_T* device,struct VkPipeline_T* pipeline,unsigned int group,enum VkShaderGroupShaderKHR groupShader);
 * }
 */
public interface PFN_vkGetRayTracingShaderGroupStackSizeKHR {

    long apply(java.lang.foreign.MemorySegment device, java.lang.foreign.MemorySegment pipeline, int group, int groupShader);
    static MemorySegment allocate(PFN_vkGetRayTracingShaderGroupStackSizeKHR fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1072.const$2, fi, constants$1072.const$1, scope);
    }
    static PFN_vkGetRayTracingShaderGroupStackSizeKHR ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _device, java.lang.foreign.MemorySegment _pipeline, int _group, int _groupShader) -> {
            try {
                return (long)constants$1072.const$3.invokeExact(symbol, _device, _pipeline, _group, _groupShader);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


