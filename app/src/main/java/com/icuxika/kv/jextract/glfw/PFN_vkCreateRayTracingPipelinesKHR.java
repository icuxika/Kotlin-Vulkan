// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum VkResult (*PFN_vkCreateRayTracingPipelinesKHR)(struct VkDevice_T* device,struct VkDeferredOperationKHR_T* deferredOperation,struct VkPipelineCache_T* pipelineCache,unsigned int createInfoCount,struct VkRayTracingPipelineCreateInfoKHR* pCreateInfos,struct VkAllocationCallbacks* pAllocator,struct VkPipeline_T** pPipelines);
 * }
 */
public interface PFN_vkCreateRayTracingPipelinesKHR {

    int apply(java.lang.foreign.MemorySegment device, java.lang.foreign.MemorySegment deferredOperation, java.lang.foreign.MemorySegment pipelineCache, int createInfoCount, java.lang.foreign.MemorySegment pCreateInfos, java.lang.foreign.MemorySegment pAllocator, java.lang.foreign.MemorySegment pPipelines);
    static MemorySegment allocate(PFN_vkCreateRayTracingPipelinesKHR fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1071.const$1, fi, constants$1071.const$0, scope);
    }
    static PFN_vkCreateRayTracingPipelinesKHR ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _device, java.lang.foreign.MemorySegment _deferredOperation, java.lang.foreign.MemorySegment _pipelineCache, int _createInfoCount, java.lang.foreign.MemorySegment _pCreateInfos, java.lang.foreign.MemorySegment _pAllocator, java.lang.foreign.MemorySegment _pPipelines) -> {
            try {
                return (int)constants$1071.const$2.invokeExact(symbol, _device, _deferredOperation, _pipelineCache, _createInfoCount, _pCreateInfos, _pAllocator, _pPipelines);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


