// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdSetStencilOp)(struct VkCommandBuffer_T* commandBuffer,unsigned int faceMask,enum VkStencilOp failOp,enum VkStencilOp passOp,enum VkStencilOp depthFailOp,enum VkCompareOp compareOp);
 * }
 */
public interface PFN_vkCmdSetStencilOp {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp);
    static MemorySegment allocate(PFN_vkCmdSetStencilOp fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$420.const$5, fi, constants$168.const$0, scope);
    }
    static PFN_vkCmdSetStencilOp ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _faceMask, int _failOp, int _passOp, int _depthFailOp, int _compareOp) -> {
            try {
                constants$168.const$2.invokeExact(symbol, _commandBuffer, _faceMask, _failOp, _passOp, _depthFailOp, _compareOp);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


