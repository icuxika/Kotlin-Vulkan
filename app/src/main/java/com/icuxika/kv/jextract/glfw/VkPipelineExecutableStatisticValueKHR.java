// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union VkPipelineExecutableStatisticValueKHR {
 *     VkBool32 b32;
 *     int64_t i64;
 *     uint64_t u64;
 *     double f64;
 * };
 * }
 */
public class VkPipelineExecutableStatisticValueKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$588.const$4;
    }
    public static VarHandle b32$VH() {
        return constants$588.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 b32;
     * }
     */
    public static int b32$get(MemorySegment seg) {
        return (int)constants$588.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 b32;
     * }
     */
    public static void b32$set(MemorySegment seg, int x) {
        constants$588.const$5.set(seg, x);
    }
    public static int b32$get(MemorySegment seg, long index) {
        return (int)constants$588.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void b32$set(MemorySegment seg, long index, int x) {
        constants$588.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle i64$VH() {
        return constants$589.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t i64;
     * }
     */
    public static long i64$get(MemorySegment seg) {
        return (long)constants$589.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t i64;
     * }
     */
    public static void i64$set(MemorySegment seg, long x) {
        constants$589.const$0.set(seg, x);
    }
    public static long i64$get(MemorySegment seg, long index) {
        return (long)constants$589.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void i64$set(MemorySegment seg, long index, long x) {
        constants$589.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle u64$VH() {
        return constants$589.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t u64;
     * }
     */
    public static long u64$get(MemorySegment seg) {
        return (long)constants$589.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t u64;
     * }
     */
    public static void u64$set(MemorySegment seg, long x) {
        constants$589.const$1.set(seg, x);
    }
    public static long u64$get(MemorySegment seg, long index) {
        return (long)constants$589.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void u64$set(MemorySegment seg, long index, long x) {
        constants$589.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f64$VH() {
        return constants$589.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double f64;
     * }
     */
    public static double f64$get(MemorySegment seg) {
        return (double)constants$589.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double f64;
     * }
     */
    public static void f64$set(MemorySegment seg, double x) {
        constants$589.const$2.set(seg, x);
    }
    public static double f64$get(MemorySegment seg, long index) {
        return (double)constants$589.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void f64$set(MemorySegment seg, long index, double x) {
        constants$589.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


