// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdDrawIndexedIndirectCount)(struct VkCommandBuffer_T* commandBuffer,struct VkBuffer_T* buffer,unsigned long long offset,struct VkBuffer_T* countBuffer,unsigned long long countBufferOffset,unsigned int maxDrawCount,unsigned int stride);
 * }
 */
public interface PFN_vkCmdDrawIndexedIndirectCount {

    void apply(java.lang.foreign.MemorySegment commandBuffer, java.lang.foreign.MemorySegment buffer, long offset, java.lang.foreign.MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride);
    static MemorySegment allocate(PFN_vkCmdDrawIndexedIndirectCount fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$342.const$3, fi, constants$342.const$0, scope);
    }
    static PFN_vkCmdDrawIndexedIndirectCount ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, java.lang.foreign.MemorySegment _buffer, long _offset, java.lang.foreign.MemorySegment _countBuffer, long _countBufferOffset, int _maxDrawCount, int _stride) -> {
            try {
                constants$342.const$2.invokeExact(symbol, _commandBuffer, _buffer, _offset, _countBuffer, _countBufferOffset, _maxDrawCount, _stride);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


