// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jextract_h_3 extends jextract_h_2 {

    /**
     * {@snippet :
     * enum VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1;
     * }
     */
    public static int VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2;
     * }
     */
    public static int VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3;
     * }
     */
    public static int VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU = 4;
     * }
     */
    public static int VK_PHYSICAL_DEVICE_TYPE_CPU() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_OCCLUSION = 0;
     * }
     */
    public static int VK_QUERY_TYPE_OCCLUSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS = 1;
     * }
     */
    public static int VK_QUERY_TYPE_PIPELINE_STATISTICS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_TIMESTAMP = 2;
     * }
     */
    public static int VK_QUERY_TYPE_TIMESTAMP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000;
     * }
     */
    public static int VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR() {
        return (int)1000023000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004;
     * }
     */
    public static int VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT() {
        return (int)1000028004L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000;
     * }
     */
    public static int VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR() {
        return (int)1000116000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000;
     * }
     */
    public static int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR() {
        return (int)1000150000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001;
     * }
     */
    public static int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR() {
        return (int)1000150001L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000;
     * }
     */
    public static int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000;
     * }
     */
    public static int VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL() {
        return (int)1000210000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000;
     * }
     */
    public static int VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT() {
        return (int)1000328000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000;
     * }
     */
    public static int VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT() {
        return (int)1000382000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000;
     * }
     */
    public static int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR() {
        return (int)1000386000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001;
     * }
     */
    public static int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR() {
        return (int)1000386001L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000;
     * }
     */
    public static int VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT() {
        return (int)1000396000L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001;
     * }
     */
    public static int VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT() {
        return (int)1000396001L;
    }
    /**
     * {@snippet :
     * enum VkQueryType.VK_QUERY_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_QUERY_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSharingMode.VK_SHARING_MODE_EXCLUSIVE = 0;
     * }
     */
    public static int VK_SHARING_MODE_EXCLUSIVE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSharingMode.VK_SHARING_MODE_CONCURRENT = 1;
     * }
     */
    public static int VK_SHARING_MODE_CONCURRENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSharingMode.VK_SHARING_MODE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SHARING_MODE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY = 0;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_IDENTITY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO = 1;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_ZERO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE = 2;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_ONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R = 3;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_R() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G = 4;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_G() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B = 5;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_B() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A = 6;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_A() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkComponentSwizzle.VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMPONENT_SWIZZLE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_1D = 0;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_1D() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_2D = 1;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_2D() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_3D = 2;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_3D() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE = 3;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_CUBE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_1D_ARRAY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_2D_ARRAY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_CUBE_ARRAY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkImageViewType.VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_IMAGE_VIEW_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ZERO = 0;
     * }
     */
    public static int VK_BLEND_FACTOR_ZERO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE = 1;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR = 2;
     * }
     */
    public static int VK_BLEND_FACTOR_SRC_COLOR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR = 4;
     * }
     */
    public static int VK_BLEND_FACTOR_DST_COLOR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA = 6;
     * }
     */
    public static int VK_BLEND_FACTOR_SRC_ALPHA() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA = 8;
     * }
     */
    public static int VK_BLEND_FACTOR_DST_ALPHA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR = 10;
     * }
     */
    public static int VK_BLEND_FACTOR_CONSTANT_COLOR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA = 12;
     * }
     */
    public static int VK_BLEND_FACTOR_CONSTANT_ALPHA() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14;
     * }
     */
    public static int VK_BLEND_FACTOR_SRC_ALPHA_SATURATE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR = 15;
     * }
     */
    public static int VK_BLEND_FACTOR_SRC1_COLOR() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA = 17;
     * }
     */
    public static int VK_BLEND_FACTOR_SRC1_ALPHA() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18;
     * }
     */
    public static int VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum VkBlendFactor.VK_BLEND_FACTOR_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_BLEND_FACTOR_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_ADD = 0;
     * }
     */
    public static int VK_BLEND_OP_ADD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SUBTRACT = 1;
     * }
     */
    public static int VK_BLEND_OP_SUBTRACT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT = 2;
     * }
     */
    public static int VK_BLEND_OP_REVERSE_SUBTRACT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MIN = 3;
     * }
     */
    public static int VK_BLEND_OP_MIN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MAX = 4;
     * }
     */
    public static int VK_BLEND_OP_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_ZERO_EXT = 1000148000;
     * }
     */
    public static int VK_BLEND_OP_ZERO_EXT() {
        return (int)1000148000L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SRC_EXT = 1000148001;
     * }
     */
    public static int VK_BLEND_OP_SRC_EXT() {
        return (int)1000148001L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DST_EXT = 1000148002;
     * }
     */
    public static int VK_BLEND_OP_DST_EXT() {
        return (int)1000148002L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT = 1000148003;
     * }
     */
    public static int VK_BLEND_OP_SRC_OVER_EXT() {
        return (int)1000148003L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DST_OVER_EXT = 1000148004;
     * }
     */
    public static int VK_BLEND_OP_DST_OVER_EXT() {
        return (int)1000148004L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SRC_IN_EXT = 1000148005;
     * }
     */
    public static int VK_BLEND_OP_SRC_IN_EXT() {
        return (int)1000148005L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DST_IN_EXT = 1000148006;
     * }
     */
    public static int VK_BLEND_OP_DST_IN_EXT() {
        return (int)1000148006L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT = 1000148007;
     * }
     */
    public static int VK_BLEND_OP_SRC_OUT_EXT() {
        return (int)1000148007L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DST_OUT_EXT = 1000148008;
     * }
     */
    public static int VK_BLEND_OP_DST_OUT_EXT() {
        return (int)1000148008L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT = 1000148009;
     * }
     */
    public static int VK_BLEND_OP_SRC_ATOP_EXT() {
        return (int)1000148009L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT = 1000148010;
     * }
     */
    public static int VK_BLEND_OP_DST_ATOP_EXT() {
        return (int)1000148010L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_XOR_EXT = 1000148011;
     * }
     */
    public static int VK_BLEND_OP_XOR_EXT() {
        return (int)1000148011L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT = 1000148012;
     * }
     */
    public static int VK_BLEND_OP_MULTIPLY_EXT() {
        return (int)1000148012L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SCREEN_EXT = 1000148013;
     * }
     */
    public static int VK_BLEND_OP_SCREEN_EXT() {
        return (int)1000148013L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_OVERLAY_EXT = 1000148014;
     * }
     */
    public static int VK_BLEND_OP_OVERLAY_EXT() {
        return (int)1000148014L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DARKEN_EXT = 1000148015;
     * }
     */
    public static int VK_BLEND_OP_DARKEN_EXT() {
        return (int)1000148015L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT = 1000148016;
     * }
     */
    public static int VK_BLEND_OP_LIGHTEN_EXT() {
        return (int)1000148016L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT = 1000148017;
     * }
     */
    public static int VK_BLEND_OP_COLORDODGE_EXT() {
        return (int)1000148017L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_COLORBURN_EXT = 1000148018;
     * }
     */
    public static int VK_BLEND_OP_COLORBURN_EXT() {
        return (int)1000148018L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT = 1000148019;
     * }
     */
    public static int VK_BLEND_OP_HARDLIGHT_EXT() {
        return (int)1000148019L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020;
     * }
     */
    public static int VK_BLEND_OP_SOFTLIGHT_EXT() {
        return (int)1000148020L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT = 1000148021;
     * }
     */
    public static int VK_BLEND_OP_DIFFERENCE_EXT() {
        return (int)1000148021L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT = 1000148022;
     * }
     */
    public static int VK_BLEND_OP_EXCLUSION_EXT() {
        return (int)1000148022L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_INVERT_EXT = 1000148023;
     * }
     */
    public static int VK_BLEND_OP_INVERT_EXT() {
        return (int)1000148023L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT = 1000148024;
     * }
     */
    public static int VK_BLEND_OP_INVERT_RGB_EXT() {
        return (int)1000148024L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT = 1000148025;
     * }
     */
    public static int VK_BLEND_OP_LINEARDODGE_EXT() {
        return (int)1000148025L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT = 1000148026;
     * }
     */
    public static int VK_BLEND_OP_LINEARBURN_EXT() {
        return (int)1000148026L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027;
     * }
     */
    public static int VK_BLEND_OP_VIVIDLIGHT_EXT() {
        return (int)1000148027L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028;
     * }
     */
    public static int VK_BLEND_OP_LINEARLIGHT_EXT() {
        return (int)1000148028L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT = 1000148029;
     * }
     */
    public static int VK_BLEND_OP_PINLIGHT_EXT() {
        return (int)1000148029L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HARDMIX_EXT = 1000148030;
     * }
     */
    public static int VK_BLEND_OP_HARDMIX_EXT() {
        return (int)1000148030L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT = 1000148031;
     * }
     */
    public static int VK_BLEND_OP_HSL_HUE_EXT() {
        return (int)1000148031L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032;
     * }
     */
    public static int VK_BLEND_OP_HSL_SATURATION_EXT() {
        return (int)1000148032L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT = 1000148033;
     * }
     */
    public static int VK_BLEND_OP_HSL_COLOR_EXT() {
        return (int)1000148033L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034;
     * }
     */
    public static int VK_BLEND_OP_HSL_LUMINOSITY_EXT() {
        return (int)1000148034L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_PLUS_EXT = 1000148035;
     * }
     */
    public static int VK_BLEND_OP_PLUS_EXT() {
        return (int)1000148035L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036;
     * }
     */
    public static int VK_BLEND_OP_PLUS_CLAMPED_EXT() {
        return (int)1000148036L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037;
     * }
     */
    public static int VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT() {
        return (int)1000148037L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038;
     * }
     */
    public static int VK_BLEND_OP_PLUS_DARKER_EXT() {
        return (int)1000148038L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MINUS_EXT = 1000148039;
     * }
     */
    public static int VK_BLEND_OP_MINUS_EXT() {
        return (int)1000148039L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040;
     * }
     */
    public static int VK_BLEND_OP_MINUS_CLAMPED_EXT() {
        return (int)1000148040L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_CONTRAST_EXT = 1000148041;
     * }
     */
    public static int VK_BLEND_OP_CONTRAST_EXT() {
        return (int)1000148041L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT = 1000148042;
     * }
     */
    public static int VK_BLEND_OP_INVERT_OVG_EXT() {
        return (int)1000148042L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_RED_EXT = 1000148043;
     * }
     */
    public static int VK_BLEND_OP_RED_EXT() {
        return (int)1000148043L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_GREEN_EXT = 1000148044;
     * }
     */
    public static int VK_BLEND_OP_GREEN_EXT() {
        return (int)1000148044L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_BLUE_EXT = 1000148045;
     * }
     */
    public static int VK_BLEND_OP_BLUE_EXT() {
        return (int)1000148045L;
    }
    /**
     * {@snippet :
     * enum VkBlendOp.VK_BLEND_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_BLEND_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_NEVER = 0;
     * }
     */
    public static int VK_COMPARE_OP_NEVER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_LESS = 1;
     * }
     */
    public static int VK_COMPARE_OP_LESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_EQUAL = 2;
     * }
     */
    public static int VK_COMPARE_OP_EQUAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL = 3;
     * }
     */
    public static int VK_COMPARE_OP_LESS_OR_EQUAL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_GREATER = 4;
     * }
     */
    public static int VK_COMPARE_OP_GREATER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_NOT_EQUAL = 5;
     * }
     */
    public static int VK_COMPARE_OP_NOT_EQUAL() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL = 6;
     * }
     */
    public static int VK_COMPARE_OP_GREATER_OR_EQUAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_ALWAYS = 7;
     * }
     */
    public static int VK_COMPARE_OP_ALWAYS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkCompareOp.VK_COMPARE_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMPARE_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT = 0;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SCISSOR = 1;
     * }
     */
    public static int VK_DYNAMIC_STATE_SCISSOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH = 2;
     * }
     */
    public static int VK_DYNAMIC_STATE_LINE_WIDTH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS = 3;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BIAS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4;
     * }
     */
    public static int VK_DYNAMIC_STATE_BLEND_CONSTANTS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BOUNDS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_WRITE_MASK() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_REFERENCE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE = 1000267000;
     * }
     */
    public static int VK_DYNAMIC_STATE_CULL_MODE() {
        return (int)1000267000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE = 1000267001;
     * }
     */
    public static int VK_DYNAMIC_STATE_FRONT_FACE() {
        return (int)1000267001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002;
     * }
     */
    public static int VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY() {
        return (int)1000267002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT() {
        return (int)1000267003L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004;
     * }
     */
    public static int VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT() {
        return (int)1000267004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005;
     * }
     */
    public static int VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE() {
        return (int)1000267005L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE() {
        return (int)1000267006L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE() {
        return (int)1000267007L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_COMPARE_OP() {
        return (int)1000267008L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE() {
        return (int)1000267009L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE() {
        return (int)1000267010L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP = 1000267011;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_OP() {
        return (int)1000267011L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001;
     * }
     */
    public static int VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE() {
        return (int)1000377001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE() {
        return (int)1000377002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004;
     * }
     */
    public static int VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE() {
        return (int)1000377004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV() {
        return (int)1000087000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000;
     * }
     */
    public static int VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT() {
        return (int)1000099000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001;
     * }
     */
    public static int VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT() {
        return (int)1000099001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002;
     * }
     */
    public static int VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT() {
        return (int)1000099002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000;
     * }
     */
    public static int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT() {
        return (int)1000143000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000;
     * }
     */
    public static int VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR() {
        return (int)1000347000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV() {
        return (int)1000164004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV() {
        return (int)1000164006L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000;
     * }
     */
    public static int VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV() {
        return (int)1000205000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001;
     * }
     */
    public static int VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV() {
        return (int)1000205001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000;
     * }
     */
    public static int VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR() {
        return (int)1000226000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000;
     * }
     */
    public static int VK_DYNAMIC_STATE_LINE_STIPPLE_EXT() {
        return (int)1000259000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000;
     * }
     */
    public static int VK_DYNAMIC_STATE_VERTEX_INPUT_EXT() {
        return (int)1000352000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000;
     * }
     */
    public static int VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT() {
        return (int)1000377000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003;
     * }
     */
    public static int VK_DYNAMIC_STATE_LOGIC_OP_EXT() {
        return (int)1000377003L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000;
     * }
     */
    public static int VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT() {
        return (int)1000381000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002;
     * }
     */
    public static int VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT() {
        return (int)1000455002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT() {
        return (int)1000455003L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004;
     * }
     */
    public static int VK_DYNAMIC_STATE_POLYGON_MODE_EXT() {
        return (int)1000455004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005;
     * }
     */
    public static int VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT() {
        return (int)1000455005L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006;
     * }
     */
    public static int VK_DYNAMIC_STATE_SAMPLE_MASK_EXT() {
        return (int)1000455006L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007;
     * }
     */
    public static int VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT() {
        return (int)1000455007L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008;
     * }
     */
    public static int VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT() {
        return (int)1000455008L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009;
     * }
     */
    public static int VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT() {
        return (int)1000455009L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010;
     * }
     */
    public static int VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT() {
        return (int)1000455010L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011;
     * }
     */
    public static int VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT() {
        return (int)1000455011L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012;
     * }
     */
    public static int VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT() {
        return (int)1000455012L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013;
     * }
     */
    public static int VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT() {
        return (int)1000455013L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014;
     * }
     */
    public static int VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT() {
        return (int)1000455014L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015;
     * }
     */
    public static int VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT() {
        return (int)1000455015L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT() {
        return (int)1000455016L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017;
     * }
     */
    public static int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT() {
        return (int)1000455017L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018;
     * }
     */
    public static int VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT() {
        return (int)1000455018L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019;
     * }
     */
    public static int VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT() {
        return (int)1000455019L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020;
     * }
     */
    public static int VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT() {
        return (int)1000455020L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021;
     * }
     */
    public static int VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT() {
        return (int)1000455021L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT() {
        return (int)1000455022L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV() {
        return (int)1000455023L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV() {
        return (int)1000455024L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV() {
        return (int)1000455025L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV() {
        return (int)1000455026L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV() {
        return (int)1000455027L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV() {
        return (int)1000455028L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV() {
        return (int)1000455029L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030;
     * }
     */
    public static int VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV() {
        return (int)1000455030L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031;
     * }
     */
    public static int VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV() {
        return (int)1000455031L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032;
     * }
     */
    public static int VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV() {
        return (int)1000455032L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000;
     * }
     */
    public static int VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT() {
        return (int)1000524000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000;
     * }
     */
    public static int VK_DYNAMIC_STATE_CULL_MODE_EXT() {
        return (int)1000267000L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001;
     * }
     */
    public static int VK_DYNAMIC_STATE_FRONT_FACE_EXT() {
        return (int)1000267001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002;
     * }
     */
    public static int VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT() {
        return (int)1000267002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003;
     * }
     */
    public static int VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT() {
        return (int)1000267003L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004;
     * }
     */
    public static int VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT() {
        return (int)1000267004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005;
     * }
     */
    public static int VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT() {
        return (int)1000267005L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT() {
        return (int)1000267006L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT() {
        return (int)1000267007L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT() {
        return (int)1000267008L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT() {
        return (int)1000267009L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT() {
        return (int)1000267010L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011;
     * }
     */
    public static int VK_DYNAMIC_STATE_STENCIL_OP_EXT() {
        return (int)1000267011L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001;
     * }
     */
    public static int VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT() {
        return (int)1000377001L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002;
     * }
     */
    public static int VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT() {
        return (int)1000377002L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004;
     * }
     */
    public static int VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT() {
        return (int)1000377004L;
    }
    /**
     * {@snippet :
     * enum VkDynamicState.VK_DYNAMIC_STATE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DYNAMIC_STATE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE = 0;
     * }
     */
    public static int VK_FRONT_FACE_COUNTER_CLOCKWISE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkFrontFace.VK_FRONT_FACE_CLOCKWISE = 1;
     * }
     */
    public static int VK_FRONT_FACE_CLOCKWISE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFrontFace.VK_FRONT_FACE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FRONT_FACE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX = 0;
     * }
     */
    public static int VK_VERTEX_INPUT_RATE_VERTEX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE = 1;
     * }
     */
    public static int VK_VERTEX_INPUT_RATE_INSTANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVertexInputRate.VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_VERTEX_INPUT_RATE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_POINT_LIST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_LINE_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_LINE_STRIP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_PATCH_LIST() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PRIMITIVE_TOPOLOGY_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPolygonMode.VK_POLYGON_MODE_FILL = 0;
     * }
     */
    public static int VK_POLYGON_MODE_FILL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPolygonMode.VK_POLYGON_MODE_LINE = 1;
     * }
     */
    public static int VK_POLYGON_MODE_LINE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPolygonMode.VK_POLYGON_MODE_POINT = 2;
     * }
     */
    public static int VK_POLYGON_MODE_POINT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000;
     * }
     */
    public static int VK_POLYGON_MODE_FILL_RECTANGLE_NV() {
        return (int)1000153000L;
    }
    /**
     * {@snippet :
     * enum VkPolygonMode.VK_POLYGON_MODE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_POLYGON_MODE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_KEEP = 0;
     * }
     */
    public static int VK_STENCIL_OP_KEEP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_ZERO = 1;
     * }
     */
    public static int VK_STENCIL_OP_ZERO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_REPLACE = 2;
     * }
     */
    public static int VK_STENCIL_OP_REPLACE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3;
     * }
     */
    public static int VK_STENCIL_OP_INCREMENT_AND_CLAMP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4;
     * }
     */
    public static int VK_STENCIL_OP_DECREMENT_AND_CLAMP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_INVERT = 5;
     * }
     */
    public static int VK_STENCIL_OP_INVERT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP = 6;
     * }
     */
    public static int VK_STENCIL_OP_INCREMENT_AND_WRAP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP = 7;
     * }
     */
    public static int VK_STENCIL_OP_DECREMENT_AND_WRAP() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkStencilOp.VK_STENCIL_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_STENCIL_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_CLEAR = 0;
     * }
     */
    public static int VK_LOGIC_OP_CLEAR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_AND = 1;
     * }
     */
    public static int VK_LOGIC_OP_AND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_AND_REVERSE = 2;
     * }
     */
    public static int VK_LOGIC_OP_AND_REVERSE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_COPY = 3;
     * }
     */
    public static int VK_LOGIC_OP_COPY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_AND_INVERTED = 4;
     * }
     */
    public static int VK_LOGIC_OP_AND_INVERTED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_NO_OP = 5;
     * }
     */
    public static int VK_LOGIC_OP_NO_OP() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_XOR = 6;
     * }
     */
    public static int VK_LOGIC_OP_XOR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_OR = 7;
     * }
     */
    public static int VK_LOGIC_OP_OR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_NOR = 8;
     * }
     */
    public static int VK_LOGIC_OP_NOR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_EQUIVALENT = 9;
     * }
     */
    public static int VK_LOGIC_OP_EQUIVALENT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_INVERT = 10;
     * }
     */
    public static int VK_LOGIC_OP_INVERT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_OR_REVERSE = 11;
     * }
     */
    public static int VK_LOGIC_OP_OR_REVERSE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_COPY_INVERTED = 12;
     * }
     */
    public static int VK_LOGIC_OP_COPY_INVERTED() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_OR_INVERTED = 13;
     * }
     */
    public static int VK_LOGIC_OP_OR_INVERTED() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_NAND = 14;
     * }
     */
    public static int VK_LOGIC_OP_NAND() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_SET = 15;
     * }
     */
    public static int VK_LOGIC_OP_SET() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum VkLogicOp.VK_LOGIC_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_LOGIC_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0;
     * }
     */
    public static int VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1;
     * }
     */
    public static int VK_BORDER_COLOR_INT_TRANSPARENT_BLACK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2;
     * }
     */
    public static int VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3;
     * }
     */
    public static int VK_BORDER_COLOR_INT_OPAQUE_BLACK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4;
     * }
     */
    public static int VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5;
     * }
     */
    public static int VK_BORDER_COLOR_INT_OPAQUE_WHITE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003;
     * }
     */
    public static int VK_BORDER_COLOR_FLOAT_CUSTOM_EXT() {
        return (int)1000287003L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004;
     * }
     */
    public static int VK_BORDER_COLOR_INT_CUSTOM_EXT() {
        return (int)1000287004L;
    }
    /**
     * {@snippet :
     * enum VkBorderColor.VK_BORDER_COLOR_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_BORDER_COLOR_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkFilter.VK_FILTER_NEAREST = 0;
     * }
     */
    public static int VK_FILTER_NEAREST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkFilter.VK_FILTER_LINEAR = 1;
     * }
     */
    public static int VK_FILTER_LINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFilter.VK_FILTER_CUBIC_EXT = 1000015000;
     * }
     */
    public static int VK_FILTER_CUBIC_EXT() {
        return (int)1000015000L;
    }
    /**
     * {@snippet :
     * enum VkFilter.VK_FILTER_CUBIC_IMG = 1000015000;
     * }
     */
    public static int VK_FILTER_CUBIC_IMG() {
        return (int)1000015000L;
    }
    /**
     * {@snippet :
     * enum VkFilter.VK_FILTER_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FILTER_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT = 0;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_REPEAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_ADDRESS_MODE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST = 0;
     * }
     */
    public static int VK_SAMPLER_MIPMAP_MODE_NEAREST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR = 1;
     * }
     */
    public static int VK_SAMPLER_MIPMAP_MODE_LINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_MIPMAP_MODE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER = 0;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_SAMPLER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_STORAGE_IMAGE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_STORAGE_BUFFER() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK() {
        return (int)1000138000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR() {
        return (int)1000150000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM() {
        return (int)1000440000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM() {
        return (int)1000440001L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_MUTABLE_EXT() {
        return (int)1000351000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT() {
        return (int)1000138000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_MUTABLE_VALVE() {
        return (int)1000351000L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorType.VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DESCRIPTOR_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD = 0;
     * }
     */
    public static int VK_ATTACHMENT_LOAD_OP_LOAD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR = 1;
     * }
     */
    public static int VK_ATTACHMENT_LOAD_OP_CLEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2;
     * }
     */
    public static int VK_ATTACHMENT_LOAD_OP_DONT_CARE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000;
     * }
     */
    public static int VK_ATTACHMENT_LOAD_OP_NONE_EXT() {
        return (int)1000400000L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_ATTACHMENT_LOAD_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE = 0;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_STORE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE = 1;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_DONT_CARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE = 1000301000;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_NONE() {
        return (int)1000301000L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_NONE_KHR() {
        return (int)1000301000L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_NONE_QCOM() {
        return (int)1000301000L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_NONE_EXT() {
        return (int)1000301000L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_ATTACHMENT_STORE_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS = 0;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_GRAPHICS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE = 1;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_COMPUTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI() {
        return (int)1000369003L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_RAY_TRACING_NV() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_BIND_POINT_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0;
     * }
     */
    public static int VK_COMMAND_BUFFER_LEVEL_PRIMARY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1;
     * }
     */
    public static int VK_COMMAND_BUFFER_LEVEL_SECONDARY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMMAND_BUFFER_LEVEL_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_UINT16 = 0;
     * }
     */
    public static int VK_INDEX_TYPE_UINT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_UINT32 = 1;
     * }
     */
    public static int VK_INDEX_TYPE_UINT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_NONE_KHR = 1000165000;
     * }
     */
    public static int VK_INDEX_TYPE_NONE_KHR() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_UINT8_EXT = 1000265000;
     * }
     */
    public static int VK_INDEX_TYPE_UINT8_EXT() {
        return (int)1000265000L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_NONE_NV = 1000165000;
     * }
     */
    public static int VK_INDEX_TYPE_NONE_NV() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkIndexType.VK_INDEX_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_INDEX_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE = 0;
     * }
     */
    public static int VK_SUBPASS_CONTENTS_INLINE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1;
     * }
     */
    public static int VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubpassContents.VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SUBPASS_CONTENTS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1;
     * }
     */
    public static int VK_ACCESS_INDIRECT_COMMAND_READ_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT = 2;
     * }
     */
    public static int VK_ACCESS_INDEX_READ_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4;
     * }
     */
    public static int VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT = 8;
     * }
     */
    public static int VK_ACCESS_UNIFORM_READ_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16;
     * }
     */
    public static int VK_ACCESS_INPUT_ATTACHMENT_READ_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT = 32;
     * }
     */
    public static int VK_ACCESS_SHADER_READ_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT = 64;
     * }
     */
    public static int VK_ACCESS_SHADER_WRITE_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128;
     * }
     */
    public static int VK_ACCESS_COLOR_ATTACHMENT_READ_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256;
     * }
     */
    public static int VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512;
     * }
     */
    public static int VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024;
     * }
     */
    public static int VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT = 2048;
     * }
     */
    public static int VK_ACCESS_TRANSFER_READ_BIT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT = 4096;
     * }
     */
    public static int VK_ACCESS_TRANSFER_WRITE_BIT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT = 8192;
     * }
     */
    public static int VK_ACCESS_HOST_READ_BIT() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT = 16384;
     * }
     */
    public static int VK_ACCESS_HOST_WRITE_BIT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT = 32768;
     * }
     */
    public static int VK_ACCESS_MEMORY_READ_BIT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT = 65536;
     * }
     */
    public static int VK_ACCESS_MEMORY_WRITE_BIT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_NONE = 0;
     * }
     */
    public static int VK_ACCESS_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432;
     * }
     */
    public static int VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864;
     * }
     */
    public static int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728;
     * }
     */
    public static int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576;
     * }
     */
    public static int VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288;
     * }
     */
    public static int VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152;
     * }
     */
    public static int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304;
     * }
     */
    public static int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216;
     * }
     */
    public static int VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608;
     * }
     */
    public static int VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072;
     * }
     */
    public static int VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144;
     * }
     */
    public static int VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608;
     * }
     */
    public static int VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152;
     * }
     */
    public static int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304;
     * }
     */
    public static int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_NONE_KHR = 0;
     * }
     */
    public static int VK_ACCESS_NONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkAccessFlagBits.VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_ACCESS_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkAccessFlags;
     * }
     */
    public static final OfInt VkAccessFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT = 1;
     * }
     */
    public static int VK_IMAGE_ASPECT_COLOR_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT = 2;
     * }
     */
    public static int VK_IMAGE_ASPECT_DEPTH_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT = 4;
     * }
     */
    public static int VK_IMAGE_ASPECT_STENCIL_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT = 8;
     * }
     */
    public static int VK_IMAGE_ASPECT_METADATA_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT = 16;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_0_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT = 32;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_1_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT = 64;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_2_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE = 0;
     * }
     */
    public static int VK_IMAGE_ASPECT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128;
     * }
     */
    public static int VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256;
     * }
     */
    public static int VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512;
     * }
     */
    public static int VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024;
     * }
     */
    public static int VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_0_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_1_BIT_KHR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64;
     * }
     */
    public static int VK_IMAGE_ASPECT_PLANE_2_BIT_KHR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE_KHR = 0;
     * }
     */
    public static int VK_IMAGE_ASPECT_NONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkImageAspectFlagBits.VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageAspectFlags;
     * }
     */
    public static final OfInt VkImageAspectFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2;
     * }
     */
    public static int VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4;
     * }
     */
    public static int VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8;
     * }
     */
    public static int VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16;
     * }
     */
    public static int VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32;
     * }
     */
    public static int VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64;
     * }
     */
    public static int VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128;
     * }
     */
    public static int VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256;
     * }
     */
    public static int VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512;
     * }
     */
    public static int VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024;
     * }
     */
    public static int VK_FORMAT_FEATURE_BLIT_SRC_BIT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048;
     * }
     */
    public static int VK_FORMAT_FEATURE_BLIT_DST_BIT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384;
     * }
     */
    public static int VK_FORMAT_FEATURE_TRANSFER_SRC_BIT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768;
     * }
     */
    public static int VK_FORMAT_FEATURE_TRANSFER_DST_BIT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072;
     * }
     */
    public static int VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304;
     * }
     */
    public static int VK_FORMAT_FEATURE_DISJOINT_BIT() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608;
     * }
     */
    public static int VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432;
     * }
     */
    public static int VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864;
     * }
     */
    public static int VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912;
     * }
     */
    public static int VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216;
     * }
     */
    public static int VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824;
     * }
     */
    public static int VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384;
     * }
     */
    public static int VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768;
     * }
     */
    public static int VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072;
     * }
     */
    public static int VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152;
     * }
     */
    public static int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304;
     * }
     */
    public static int VK_FORMAT_FEATURE_DISJOINT_BIT_KHR() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608;
     * }
     */
    public static int VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkFormatFeatureFlags;
     * }
     */
    public static final OfInt VkFormatFeatureFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1;
     * }
     */
    public static int VK_IMAGE_CREATE_SPARSE_BINDING_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2;
     * }
     */
    public static int VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4;
     * }
     */
    public static int VK_IMAGE_CREATE_SPARSE_ALIASED_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8;
     * }
     */
    public static int VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16;
     * }
     */
    public static int VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT = 1024;
     * }
     */
    public static int VK_IMAGE_CREATE_ALIAS_BIT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64;
     * }
     */
    public static int VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32;
     * }
     */
    public static int VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128;
     * }
     */
    public static int VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256;
     * }
     */
    public static int VK_IMAGE_CREATE_EXTENDED_USAGE_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_PROTECTED_BIT = 2048;
     * }
     */
    public static int VK_IMAGE_CREATE_PROTECTED_BIT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT = 512;
     * }
     */
    public static int VK_IMAGE_CREATE_DISJOINT_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192;
     * }
     */
    public static int VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096;
     * }
     */
    public static int VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384;
     * }
     */
    public static int VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536;
     * }
     */
    public static int VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144;
     * }
     */
    public static int VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072;
     * }
     */
    public static int VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768;
     * }
     */
    public static int VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64;
     * }
     */
    public static int VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32;
     * }
     */
    public static int VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128;
     * }
     */
    public static int VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256;
     * }
     */
    public static int VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512;
     * }
     */
    public static int VK_IMAGE_CREATE_DISJOINT_BIT_KHR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024;
     * }
     */
    public static int VK_IMAGE_CREATE_ALIAS_BIT_KHR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkImageCreateFlagBits.VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageCreateFlags;
     * }
     */
    public static final OfInt VkImageCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT = 1;
     * }
     */
    public static int VK_SAMPLE_COUNT_1_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT = 2;
     * }
     */
    public static int VK_SAMPLE_COUNT_2_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT = 4;
     * }
     */
    public static int VK_SAMPLE_COUNT_4_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT = 8;
     * }
     */
    public static int VK_SAMPLE_COUNT_8_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT = 16;
     * }
     */
    public static int VK_SAMPLE_COUNT_16_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT = 32;
     * }
     */
    public static int VK_SAMPLE_COUNT_32_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT = 64;
     * }
     */
    public static int VK_SAMPLE_COUNT_64_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkSampleCountFlagBits.VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSampleCountFlags;
     * }
     */
    public static final OfInt VkSampleCountFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1;
     * }
     */
    public static int VK_IMAGE_USAGE_TRANSFER_SRC_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2;
     * }
     */
    public static int VK_IMAGE_USAGE_TRANSFER_DST_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT = 4;
     * }
     */
    public static int VK_IMAGE_USAGE_SAMPLED_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT = 8;
     * }
     */
    public static int VK_IMAGE_USAGE_STORAGE_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16;
     * }
     */
    public static int VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32;
     * }
     */
    public static int VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64;
     * }
     */
    public static int VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128;
     * }
     */
    public static int VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024;
     * }
     */
    public static int VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048;
     * }
     */
    public static int VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096;
     * }
     */
    public static int VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512;
     * }
     */
    public static int VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256;
     * }
     */
    public static int VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288;
     * }
     */
    public static int VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144;
     * }
     */
    public static int VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576;
     * }
     */
    public static int VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152;
     * }
     */
    public static int VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256;
     * }
     */
    public static int VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkImageUsageFlagBits.VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageUsageFlags;
     * }
     */
    public static final OfInt VkImageUsageFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1;
     * }
     */
    public static int VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkInstanceCreateFlags;
     * }
     */
    public static final OfInt VkInstanceCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1;
     * }
     */
    public static int VK_MEMORY_HEAP_DEVICE_LOCAL_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2;
     * }
     */
    public static int VK_MEMORY_HEAP_MULTI_INSTANCE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2;
     * }
     */
    public static int VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryHeapFlagBits.VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryHeapFlags;
     * }
     */
    public static final OfInt VkMemoryHeapFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1;
     * }
     */
    public static int VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2;
     * }
     */
    public static int VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4;
     * }
     */
    public static int VK_MEMORY_PROPERTY_HOST_COHERENT_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8;
     * }
     */
    public static int VK_MEMORY_PROPERTY_HOST_CACHED_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16;
     * }
     */
    public static int VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_PROTECTED_BIT = 32;
     * }
     */
    public static int VK_MEMORY_PROPERTY_PROTECTED_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64;
     * }
     */
    public static int VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128;
     * }
     */
    public static int VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256;
     * }
     */
    public static int VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryPropertyFlags;
     * }
     */
    public static final OfInt VkMemoryPropertyFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT = 1;
     * }
     */
    public static int VK_QUEUE_GRAPHICS_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT = 2;
     * }
     */
    public static int VK_QUEUE_COMPUTE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT = 4;
     * }
     */
    public static int VK_QUEUE_TRANSFER_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT = 8;
     * }
     */
    public static int VK_QUEUE_SPARSE_BINDING_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_PROTECTED_BIT = 16;
     * }
     */
    public static int VK_QUEUE_PROTECTED_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32;
     * }
     */
    public static int VK_QUEUE_VIDEO_DECODE_BIT_KHR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256;
     * }
     */
    public static int VK_QUEUE_OPTICAL_FLOW_BIT_NV() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkQueueFlagBits.VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_QUEUE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkQueueFlags;
     * }
     */
    public static final OfInt VkQueueFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceCreateFlags;
     * }
     */
    public static final OfInt VkDeviceCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1;
     * }
     */
    public static int VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceQueueCreateFlags;
     * }
     */
    public static final OfInt VkDeviceQueueCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1;
     * }
     */
    public static int VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2;
     * }
     */
    public static int VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4;
     * }
     */
    public static int VK_PIPELINE_STAGE_VERTEX_INPUT_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8;
     * }
     */
    public static int VK_PIPELINE_STAGE_VERTEX_SHADER_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16;
     * }
     */
    public static int VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32;
     * }
     */
    public static int VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64;
     * }
     */
    public static int VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128;
     * }
     */
    public static int VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256;
     * }
     */
    public static int VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512;
     * }
     */
    public static int VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024;
     * }
     */
    public static int VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048;
     * }
     */
    public static int VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT = 4096;
     * }
     */
    public static int VK_PIPELINE_STAGE_TRANSFER_BIT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192;
     * }
     */
    public static int VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT = 16384;
     * }
     */
    public static int VK_PIPELINE_STAGE_HOST_BIT() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768;
     * }
     */
    public static int VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536;
     * }
     */
    public static int VK_PIPELINE_STAGE_ALL_COMMANDS_BIT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE = 0;
     * }
     */
    public static int VK_PIPELINE_STAGE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216;
     * }
     */
    public static int VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144;
     * }
     */
    public static int VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432;
     * }
     */
    public static int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152;
     * }
     */
    public static int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608;
     * }
     */
    public static int VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304;
     * }
     */
    public static int VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072;
     * }
     */
    public static int VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288;
     * }
     */
    public static int VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576;
     * }
     */
    public static int VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304;
     * }
     */
    public static int VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152;
     * }
     */
    public static int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432;
     * }
     */
    public static int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288;
     * }
     */
    public static int VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576;
     * }
     */
    public static int VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE_KHR = 0;
     * }
     */
    public static int VK_PIPELINE_STAGE_NONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineStageFlags;
     * }
     */
    public static final OfInt VkPipelineStageFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryMapFlags;
     * }
     */
    public static final OfInt VkMemoryMapFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1;
     * }
     */
    public static int VK_SPARSE_MEMORY_BIND_METADATA_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSparseMemoryBindFlags;
     * }
     */
    public static final OfInt VkSparseMemoryBindFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1;
     * }
     */
    public static int VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2;
     * }
     */
    public static int VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4;
     * }
     */
    public static int VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSparseImageFormatFlags;
     * }
     */
    public static final OfInt VkSparseImageFormatFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT = 1;
     * }
     */
    public static int VK_FENCE_CREATE_SIGNALED_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFenceCreateFlagBits.VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkFenceCreateFlags;
     * }
     */
    public static final OfInt VkFenceCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkSemaphoreCreateFlags;
     * }
     */
    public static final OfInt VkSemaphoreCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1;
     * }
     */
    public static int VK_EVENT_CREATE_DEVICE_ONLY_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1;
     * }
     */
    public static int VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkEventCreateFlagBits.VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkEventCreateFlags;
     * }
     */
    public static final OfInt VkEventCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkQueryPipelineStatisticFlags;
     * }
     */
    public static final OfInt VkQueryPipelineStatisticFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkQueryPoolCreateFlags;
     * }
     */
    public static final OfInt VkQueryPoolCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT = 1;
     * }
     */
    public static int VK_QUERY_RESULT_64_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT = 2;
     * }
     */
    public static int VK_QUERY_RESULT_WAIT_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4;
     * }
     */
    public static int VK_QUERY_RESULT_WITH_AVAILABILITY_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT = 8;
     * }
     */
    public static int VK_QUERY_RESULT_PARTIAL_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16;
     * }
     */
    public static int VK_QUERY_RESULT_WITH_STATUS_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultFlagBits.VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkQueryResultFlags;
     * }
     */
    public static final OfInt VkQueryResultFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1;
     * }
     */
    public static int VK_BUFFER_CREATE_SPARSE_BINDING_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2;
     * }
     */
    public static int VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4;
     * }
     */
    public static int VK_BUFFER_CREATE_SPARSE_ALIASED_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_PROTECTED_BIT = 8;
     * }
     */
    public static int VK_BUFFER_CREATE_PROTECTED_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16;
     * }
     */
    public static int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32;
     * }
     */
    public static int VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16;
     * }
     */
    public static int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16;
     * }
     */
    public static int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBufferCreateFlagBits.VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkBufferCreateFlags;
     * }
     */
    public static final OfInt VkBufferCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1;
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFER_SRC_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2;
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFER_DST_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4;
     * }
     */
    public static int VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8;
     * }
     */
    public static int VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16;
     * }
     */
    public static int VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32;
     * }
     */
    public static int VK_BUFFER_USAGE_STORAGE_BUFFER_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64;
     * }
     */
    public static int VK_BUFFER_USAGE_INDEX_BUFFER_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128;
     * }
     */
    public static int VK_BUFFER_USAGE_VERTEX_BUFFER_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256;
     * }
     */
    public static int VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072;
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192;
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384;
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048;
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096;
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512;
     * }
     */
    public static int VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288;
     * }
     */
    public static int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576;
     * }
     */
    public static int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024;
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152;
     * }
     */
    public static int VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304;
     * }
     */
    public static int VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864;
     * }
     */
    public static int VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608;
     * }
     */
    public static int VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216;
     * }
     */
    public static int VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024;
     * }
     */
    public static int VK_BUFFER_USAGE_RAY_TRACING_BIT_NV() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072;
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072;
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkBufferUsageFlags;
     * }
     */
    public static final OfInt VkBufferUsageFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkBufferViewCreateFlags;
     * }
     */
    public static final OfInt VkBufferViewCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1;
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4;
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2;
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkImageViewCreateFlags;
     * }
     */
    public static final OfInt VkImageViewCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkShaderModuleCreateFlags;
     * }
     */
    public static final OfInt VkShaderModuleCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1;
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCacheCreateFlags;
     * }
     */
    public static final OfInt VkPipelineCacheCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT = 1;
     * }
     */
    public static int VK_COLOR_COMPONENT_R_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT = 2;
     * }
     */
    public static int VK_COLOR_COMPONENT_G_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT = 4;
     * }
     */
    public static int VK_COLOR_COMPONENT_B_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT = 8;
     * }
     */
    public static int VK_COLOR_COMPONENT_A_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkColorComponentFlags;
     * }
     */
    public static final OfInt VkColorComponentFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1;
     * }
     */
    public static int VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2;
     * }
     */
    public static int VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4;
     * }
     */
    public static int VK_PIPELINE_CREATE_DERIVATIVE_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8;
     * }
     */
    public static int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16;
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256;
     * }
     */
    public static int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512;
     * }
     */
    public static int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152;
     * }
     */
    public static int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304;
     * }
     */
    public static int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32;
     * }
     */
    public static int VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64;
     * }
     */
    public static int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128;
     * }
     */
    public static int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144;
     * }
     */
    public static int VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048;
     * }
     */
    public static int VK_PIPELINE_CREATE_LIBRARY_BIT_KHR() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912;
     * }
     */
    public static int VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608;
     * }
     */
    public static int VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024;
     * }
     */
    public static int VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432;
     * }
     */
    public static int VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864;
     * }
     */
    public static int VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216;
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728;
     * }
     */
    public static int VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824;
     * }
     */
    public static int VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE = 16;
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152;
     * }
     */
    public static int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304;
     * }
     */
    public static int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8;
     * }
     */
    public static int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16;
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256;
     * }
     */
    public static int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512;
     * }
     */
    public static int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCreateFlags;
     * }
     */
    public static final OfInt VkPipelineCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1;
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2;
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineShaderStageCreateFlags;
     * }
     */
    public static final OfInt VkPipelineShaderStageCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT = 1;
     * }
     */
    public static int VK_SHADER_STAGE_VERTEX_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2;
     * }
     */
    public static int VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4;
     * }
     */
    public static int VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT = 8;
     * }
     */
    public static int VK_SHADER_STAGE_GEOMETRY_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT = 16;
     * }
     */
    public static int VK_SHADER_STAGE_FRAGMENT_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT = 32;
     * }
     */
    public static int VK_SHADER_STAGE_COMPUTE_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS = 31;
     * }
     */
    public static int VK_SHADER_STAGE_ALL_GRAPHICS() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ALL = 2147483647;
     * }
     */
    public static int VK_SHADER_STAGE_ALL() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256;
     * }
     */
    public static int VK_SHADER_STAGE_RAYGEN_BIT_KHR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512;
     * }
     */
    public static int VK_SHADER_STAGE_ANY_HIT_BIT_KHR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024;
     * }
     */
    public static int VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_KHR = 2048;
     * }
     */
    public static int VK_SHADER_STAGE_MISS_BIT_KHR() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096;
     * }
     */
    public static int VK_SHADER_STAGE_INTERSECTION_BIT_KHR() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192;
     * }
     */
    public static int VK_SHADER_STAGE_CALLABLE_BIT_KHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_EXT = 64;
     * }
     */
    public static int VK_SHADER_STAGE_TASK_BIT_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_EXT = 128;
     * }
     */
    public static int VK_SHADER_STAGE_MESH_BIT_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384;
     * }
     */
    public static int VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288;
     * }
     */
    public static int VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV = 256;
     * }
     */
    public static int VK_SHADER_STAGE_RAYGEN_BIT_NV() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512;
     * }
     */
    public static int VK_SHADER_STAGE_ANY_HIT_BIT_NV() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024;
     * }
     */
    public static int VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV = 2048;
     * }
     */
    public static int VK_SHADER_STAGE_MISS_BIT_NV() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096;
     * }
     */
    public static int VK_SHADER_STAGE_INTERSECTION_BIT_NV() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192;
     * }
     */
    public static int VK_SHADER_STAGE_CALLABLE_BIT_NV() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV = 64;
     * }
     */
    public static int VK_SHADER_STAGE_TASK_BIT_NV() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV = 128;
     * }
     */
    public static int VK_SHADER_STAGE_MESH_BIT_NV() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCullModeFlagBits.VK_CULL_MODE_NONE = 0;
     * }
     */
    public static int VK_CULL_MODE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT = 1;
     * }
     */
    public static int VK_CULL_MODE_FRONT_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT = 2;
     * }
     */
    public static int VK_CULL_MODE_BACK_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK = 3;
     * }
     */
    public static int VK_CULL_MODE_FRONT_AND_BACK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_CULL_MODE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCullModeFlags;
     * }
     */
    public static final OfInt VkCullModeFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineVertexInputStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineVertexInputStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineInputAssemblyStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineInputAssemblyStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineTessellationStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineTessellationStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineViewportStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineViewportStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineRasterizationStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineRasterizationStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineMultisampleStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineMultisampleStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1;
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2;
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineDepthStencilStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineDepthStencilStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1;
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineColorBlendStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineColorBlendStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineDynamicStateCreateFlags;
     * }
     */
    public static final OfInt VkPipelineDynamicStateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineLayoutCreateFlags;
     * }
     */
    public static final OfInt VkPipelineLayoutCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkShaderStageFlags;
     * }
     */
    public static final OfInt VkShaderStageFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1;
     * }
     */
    public static int VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2;
     * }
     */
    public static int VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8;
     * }
     */
    public static int VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4;
     * }
     */
    public static int VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16;
     * }
     */
    public static int VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSamplerCreateFlags;
     * }
     */
    public static final OfInt VkSamplerCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorPoolCreateFlags;
     * }
     */
    public static final OfInt VkDescriptorPoolCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorPoolResetFlags;
     * }
     */
    public static final OfInt VkDescriptorPoolResetFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorSetLayoutCreateFlags;
     * }
     */
    public static final OfInt VkDescriptorSetLayoutCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1;
     * }
     */
    public static int VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkAttachmentDescriptionFlags;
     * }
     */
    public static final OfInt VkAttachmentDescriptionFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT = 1;
     * }
     */
    public static int VK_DEPENDENCY_BY_REGION_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT = 4;
     * }
     */
    public static int VK_DEPENDENCY_DEVICE_GROUP_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT = 2;
     * }
     */
    public static int VK_DEPENDENCY_VIEW_LOCAL_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8;
     * }
     */
    public static int VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2;
     * }
     */
    public static int VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4;
     * }
     */
    public static int VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DEPENDENCY_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDependencyFlags;
     * }
     */
    public static final OfInt VkDependencyFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1;
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1;
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkFramebufferCreateFlags;
     * }
     */
    public static final OfInt VkFramebufferCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2;
     * }
     */
    public static int VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkRenderPassCreateFlags;
     * }
     */
    public static final OfInt VkRenderPassCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSubpassDescriptionFlags;
     * }
     */
    public static final OfInt VkSubpassDescriptionFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1;
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_TRANSIENT_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2;
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4;
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_PROTECTED_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCommandPoolCreateFlags;
     * }
     */
    public static final OfInt VkCommandPoolCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1;
     * }
     */
    public static int VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCommandPoolResetFlags;
     * }
     */
    public static final OfInt VkCommandPoolResetFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1;
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2;
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4;
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCommandBufferUsageFlags;
     * }
     */
    public static final OfInt VkCommandBufferUsageFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT = 1;
     * }
     */
    public static int VK_QUERY_CONTROL_PRECISE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkQueryControlFlags;
     * }
     */
    public static final OfInt VkQueryControlFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1;
     * }
     */
    public static int VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCommandBufferResetFlags;
     * }
     */
    public static final OfInt VkCommandBufferResetFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT = 1;
     * }
     */
    public static int VK_STENCIL_FACE_FRONT_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT = 2;
     * }
     */
    public static int VK_STENCIL_FACE_BACK_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK = 3;
     * }
     */
    public static int VK_STENCIL_FACE_FRONT_AND_BACK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK = 3;
     * }
     */
    public static int VK_STENCIL_FRONT_AND_BACK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkStencilFaceFlags;
     * }
     */
    public static final OfInt VkStencilFaceFlags = JAVA_INT;
    public static MethodHandle vkCreateInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"vkCreateInstance");
    }
    /**
     * {@snippet :
     * VkResult vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance);
     * }
     */
    public static int vkCreateInstance(MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pInstance) {
        var mh$ = vkCreateInstance$MH();
        try {
            return (int)mh$.invokeExact(pCreateInfo, pAllocator, pInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"vkDestroyInstance");
    }
    /**
     * {@snippet :
     * void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyInstance(MemorySegment instance, MemorySegment pAllocator) {
        var mh$ = vkDestroyInstance$MH();
        try {
            mh$.invokeExact(instance, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumeratePhysicalDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"vkEnumeratePhysicalDevices");
    }
    /**
     * {@snippet :
     * VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
     * }
     */
    public static int vkEnumeratePhysicalDevices(MemorySegment instance, MemorySegment pPhysicalDeviceCount, MemorySegment pPhysicalDevices) {
        var mh$ = vkEnumeratePhysicalDevices$MH();
        try {
            return (int)mh$.invokeExact(instance, pPhysicalDeviceCount, pPhysicalDevices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"vkGetPhysicalDeviceFeatures");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
     * }
     */
    public static void vkGetPhysicalDeviceFeatures(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures$MH();
        try {
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFormatProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"vkGetPhysicalDeviceFormatProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"vkGetPhysicalDeviceImageFormatProperties");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties(MemorySegment physicalDevice, int format, int type, int tiling, int usage, int flags, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"vkGetPhysicalDeviceProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceProperties(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"vkGetPhysicalDeviceQueueFamilyProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"vkGetPhysicalDeviceMemoryProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetInstanceProcAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"vkGetInstanceProcAddr");
    }
    /**
     * {@snippet :
     * PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, char* pName);
     * }
     */
    public static MemorySegment vkGetInstanceProcAddr(MemorySegment instance, MemorySegment pName) {
        var mh$ = vkGetInstanceProcAddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance, pName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceProcAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$1,"vkGetDeviceProcAddr");
    }
    /**
     * {@snippet :
     * PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, char* pName);
     * }
     */
    public static MemorySegment vkGetDeviceProcAddr(MemorySegment device, MemorySegment pName) {
        var mh$ = vkGetDeviceProcAddr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, pName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"vkCreateDevice");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice);
     * }
     */
    public static int vkCreateDevice(MemorySegment physicalDevice, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDevice) {
        var mh$ = vkCreateDevice$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pCreateInfo, pAllocator, pDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"vkDestroyDevice");
    }
    /**
     * {@snippet :
     * void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDevice(MemorySegment device, MemorySegment pAllocator) {
        var mh$ = vkDestroyDevice$MH();
        try {
            mh$.invokeExact(device, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumerateInstanceExtensionProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"vkEnumerateInstanceExtensionProperties");
    }
    /**
     * {@snippet :
     * VkResult vkEnumerateInstanceExtensionProperties(char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
     * }
     */
    public static int vkEnumerateInstanceExtensionProperties(MemorySegment pLayerName, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateInstanceExtensionProperties$MH();
        try {
            return (int)mh$.invokeExact(pLayerName, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumerateDeviceExtensionProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"vkEnumerateDeviceExtensionProperties");
    }
    /**
     * {@snippet :
     * VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
     * }
     */
    public static int vkEnumerateDeviceExtensionProperties(MemorySegment physicalDevice, MemorySegment pLayerName, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateDeviceExtensionProperties$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pLayerName, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumerateInstanceLayerProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"vkEnumerateInstanceLayerProperties");
    }
    /**
     * {@snippet :
     * VkResult vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties);
     * }
     */
    public static int vkEnumerateInstanceLayerProperties(MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateInstanceLayerProperties$MH();
        try {
            return (int)mh$.invokeExact(pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumerateDeviceLayerProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"vkEnumerateDeviceLayerProperties");
    }
    /**
     * {@snippet :
     * VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties);
     * }
     */
    public static int vkEnumerateDeviceLayerProperties(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateDeviceLayerProperties$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"vkGetDeviceQueue");
    }
    /**
     * {@snippet :
     * void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);
     * }
     */
    public static void vkGetDeviceQueue(MemorySegment device, int queueFamilyIndex, int queueIndex, MemorySegment pQueue) {
        var mh$ = vkGetDeviceQueue$MH();
        try {
            mh$.invokeExact(device, queueFamilyIndex, queueIndex, pQueue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueSubmit$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"vkQueueSubmit");
    }
    /**
     * {@snippet :
     * VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence);
     * }
     */
    public static int vkQueueSubmit(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit$MH();
        try {
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueWaitIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$4,"vkQueueWaitIdle");
    }
    /**
     * {@snippet :
     * VkResult vkQueueWaitIdle(VkQueue queue);
     * }
     */
    public static int vkQueueWaitIdle(MemorySegment queue) {
        var mh$ = vkQueueWaitIdle$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDeviceWaitIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"vkDeviceWaitIdle");
    }
    /**
     * {@snippet :
     * VkResult vkDeviceWaitIdle(VkDevice device);
     * }
     */
    public static int vkDeviceWaitIdle(MemorySegment device) {
        var mh$ = vkDeviceWaitIdle$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAllocateMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"vkAllocateMemory");
    }
    /**
     * {@snippet :
     * VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);
     * }
     */
    public static int vkAllocateMemory(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pAllocator, MemorySegment pMemory) {
        var mh$ = vkAllocateMemory$MH();
        try {
            return (int)mh$.invokeExact(device, pAllocateInfo, pAllocator, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkFreeMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"vkFreeMemory");
    }
    /**
     * {@snippet :
     * void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkFreeMemory(MemorySegment device, MemorySegment memory, MemorySegment pAllocator) {
        var mh$ = vkFreeMemory$MH();
        try {
            mh$.invokeExact(device, memory, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkMapMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"vkMapMemory");
    }
    /**
     * {@snippet :
     * VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
     * }
     */
    public static int vkMapMemory(MemorySegment device, MemorySegment memory, long offset, long size, int flags, MemorySegment ppData) {
        var mh$ = vkMapMemory$MH();
        try {
            return (int)mh$.invokeExact(device, memory, offset, size, flags, ppData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUnmapMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"vkUnmapMemory");
    }
    /**
     * {@snippet :
     * void vkUnmapMemory(VkDevice device, VkDeviceMemory memory);
     * }
     */
    public static void vkUnmapMemory(MemorySegment device, MemorySegment memory) {
        var mh$ = vkUnmapMemory$MH();
        try {
            mh$.invokeExact(device, memory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkFlushMappedMemoryRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"vkFlushMappedMemoryRanges");
    }
    /**
     * {@snippet :
     * VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
     * }
     */
    public static int vkFlushMappedMemoryRanges(MemorySegment device, int memoryRangeCount, MemorySegment pMemoryRanges) {
        var mh$ = vkFlushMappedMemoryRanges$MH();
        try {
            return (int)mh$.invokeExact(device, memoryRangeCount, pMemoryRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkInvalidateMappedMemoryRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"vkInvalidateMappedMemoryRanges");
    }
    /**
     * {@snippet :
     * VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
     * }
     */
    public static int vkInvalidateMappedMemoryRanges(MemorySegment device, int memoryRangeCount, MemorySegment pMemoryRanges) {
        var mh$ = vkInvalidateMappedMemoryRanges$MH();
        try {
            return (int)mh$.invokeExact(device, memoryRangeCount, pMemoryRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceMemoryCommitment$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"vkGetDeviceMemoryCommitment");
    }
    /**
     * {@snippet :
     * void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);
     * }
     */
    public static void vkGetDeviceMemoryCommitment(MemorySegment device, MemorySegment memory, MemorySegment pCommittedMemoryInBytes) {
        var mh$ = vkGetDeviceMemoryCommitment$MH();
        try {
            mh$.invokeExact(device, memory, pCommittedMemoryInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindBufferMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"vkBindBufferMemory");
    }
    /**
     * {@snippet :
     * VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
     * }
     */
    public static int vkBindBufferMemory(MemorySegment device, MemorySegment buffer, MemorySegment memory, long memoryOffset) {
        var mh$ = vkBindBufferMemory$MH();
        try {
            return (int)mh$.invokeExact(device, buffer, memory, memoryOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindImageMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$2,"vkBindImageMemory");
    }
    /**
     * {@snippet :
     * VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
     * }
     */
    public static int vkBindImageMemory(MemorySegment device, MemorySegment image, MemorySegment memory, long memoryOffset) {
        var mh$ = vkBindImageMemory$MH();
        try {
            return (int)mh$.invokeExact(device, image, memory, memoryOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"vkGetBufferMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
     * }
     */
    public static void vkGetBufferMemoryRequirements(MemorySegment device, MemorySegment buffer, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, buffer, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$4,"vkGetImageMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
     * }
     */
    public static void vkGetImageMemoryRequirements(MemorySegment device, MemorySegment image, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, image, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageSparseMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$5,"vkGetImageSparseMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
     * }
     */
    public static void vkGetImageSparseMemoryRequirements(MemorySegment device, MemorySegment image, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$0,"vkGetPhysicalDeviceSparseImageFormatProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties(MemorySegment physicalDevice, int format, int type, int samples, int usage, int tiling, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueBindSparse$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$1,"vkQueueBindSparse");
    }
    /**
     * {@snippet :
     * VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence);
     * }
     */
    public static int vkQueueBindSparse(MemorySegment queue, int bindInfoCount, MemorySegment pBindInfo, MemorySegment fence) {
        var mh$ = vkQueueBindSparse$MH();
        try {
            return (int)mh$.invokeExact(queue, bindInfoCount, pBindInfo, fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateFence$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$2,"vkCreateFence");
    }
    /**
     * {@snippet :
     * VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
     * }
     */
    public static int vkCreateFence(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkCreateFence$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyFence$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$3,"vkDestroyFence");
    }
    /**
     * {@snippet :
     * void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyFence(MemorySegment device, MemorySegment fence, MemorySegment pAllocator) {
        var mh$ = vkDestroyFence$MH();
        try {
            mh$.invokeExact(device, fence, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetFences$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"vkResetFences");
    }
    /**
     * {@snippet :
     * VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences);
     * }
     */
    public static int vkResetFences(MemorySegment device, int fenceCount, MemorySegment pFences) {
        var mh$ = vkResetFences$MH();
        try {
            return (int)mh$.invokeExact(device, fenceCount, pFences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetFenceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$5,"vkGetFenceStatus");
    }
    /**
     * {@snippet :
     * VkResult vkGetFenceStatus(VkDevice device, VkFence fence);
     * }
     */
    public static int vkGetFenceStatus(MemorySegment device, MemorySegment fence) {
        var mh$ = vkGetFenceStatus$MH();
        try {
            return (int)mh$.invokeExact(device, fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWaitForFences$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"vkWaitForFences");
    }
    /**
     * {@snippet :
     * VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout);
     * }
     */
    public static int vkWaitForFences(MemorySegment device, int fenceCount, MemorySegment pFences, int waitAll, long timeout) {
        var mh$ = vkWaitForFences$MH();
        try {
            return (int)mh$.invokeExact(device, fenceCount, pFences, waitAll, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$1,"vkCreateSemaphore");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);
     * }
     */
    public static int vkCreateSemaphore(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSemaphore) {
        var mh$ = vkCreateSemaphore$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSemaphore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroySemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"vkDestroySemaphore");
    }
    /**
     * {@snippet :
     * void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySemaphore(MemorySegment device, MemorySegment semaphore, MemorySegment pAllocator) {
        var mh$ = vkDestroySemaphore$MH();
        try {
            mh$.invokeExact(device, semaphore, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$3,"vkCreateEvent");
    }
    /**
     * {@snippet :
     * VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent);
     * }
     */
    public static int vkCreateEvent(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pEvent) {
        var mh$ = vkCreateEvent$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$4,"vkDestroyEvent");
    }
    /**
     * {@snippet :
     * void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyEvent(MemorySegment device, MemorySegment event, MemorySegment pAllocator) {
        var mh$ = vkDestroyEvent$MH();
        try {
            mh$.invokeExact(device, event, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetEventStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"vkGetEventStatus");
    }
    /**
     * {@snippet :
     * VkResult vkGetEventStatus(VkDevice device, VkEvent event);
     * }
     */
    public static int vkGetEventStatus(MemorySegment device, MemorySegment event) {
        var mh$ = vkGetEventStatus$MH();
        try {
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"vkSetEvent");
    }
    /**
     * {@snippet :
     * VkResult vkSetEvent(VkDevice device, VkEvent event);
     * }
     */
    public static int vkSetEvent(MemorySegment device, MemorySegment event) {
        var mh$ = vkSetEvent$MH();
        try {
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"vkResetEvent");
    }
    /**
     * {@snippet :
     * VkResult vkResetEvent(VkDevice device, VkEvent event);
     * }
     */
    public static int vkResetEvent(MemorySegment device, MemorySegment event) {
        var mh$ = vkResetEvent$MH();
        try {
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateQueryPool$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"vkCreateQueryPool");
    }
    /**
     * {@snippet :
     * VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);
     * }
     */
    public static int vkCreateQueryPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pQueryPool) {
        var mh$ = vkCreateQueryPool$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pQueryPool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyQueryPool$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"vkDestroyQueryPool");
    }
    /**
     * {@snippet :
     * void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyQueryPool(MemorySegment device, MemorySegment queryPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyQueryPool$MH();
        try {
            mh$.invokeExact(device, queryPool, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetQueryPoolResults$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"vkGetQueryPoolResults");
    }
    /**
     * {@snippet :
     * VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);
     * }
     */
    public static int vkGetQueryPoolResults(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount, long dataSize, MemorySegment pData, long stride, int flags) {
        var mh$ = vkGetQueryPoolResults$MH();
        try {
            return (int)mh$.invokeExact(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$5,"vkCreateBuffer");
    }
    /**
     * {@snippet :
     * VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);
     * }
     */
    public static int vkCreateBuffer(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pBuffer) {
        var mh$ = vkCreateBuffer$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$0,"vkDestroyBuffer");
    }
    /**
     * {@snippet :
     * void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyBuffer(MemorySegment device, MemorySegment buffer, MemorySegment pAllocator) {
        var mh$ = vkDestroyBuffer$MH();
        try {
            mh$.invokeExact(device, buffer, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateBufferView$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"vkCreateBufferView");
    }
    /**
     * {@snippet :
     * VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView);
     * }
     */
    public static int vkCreateBufferView(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pView) {
        var mh$ = vkCreateBufferView$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pView);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyBufferView$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"vkDestroyBufferView");
    }
    /**
     * {@snippet :
     * void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyBufferView(MemorySegment device, MemorySegment bufferView, MemorySegment pAllocator) {
        var mh$ = vkDestroyBufferView$MH();
        try {
            mh$.invokeExact(device, bufferView, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateImage$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"vkCreateImage");
    }
    /**
     * {@snippet :
     * VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage);
     * }
     */
    public static int vkCreateImage(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pImage) {
        var mh$ = vkCreateImage$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pImage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyImage$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"vkDestroyImage");
    }
    /**
     * {@snippet :
     * void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyImage(MemorySegment device, MemorySegment image, MemorySegment pAllocator) {
        var mh$ = vkDestroyImage$MH();
        try {
            mh$.invokeExact(device, image, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageSubresourceLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"vkGetImageSubresourceLayout");
    }
    /**
     * {@snippet :
     * void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);
     * }
     */
    public static void vkGetImageSubresourceLayout(MemorySegment device, MemorySegment image, MemorySegment pSubresource, MemorySegment pLayout) {
        var mh$ = vkGetImageSubresourceLayout$MH();
        try {
            mh$.invokeExact(device, image, pSubresource, pLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateImageView$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"vkCreateImageView");
    }
    /**
     * {@snippet :
     * VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView);
     * }
     */
    public static int vkCreateImageView(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pView) {
        var mh$ = vkCreateImageView$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pView);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyImageView$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"vkDestroyImageView");
    }
    /**
     * {@snippet :
     * void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyImageView(MemorySegment device, MemorySegment imageView, MemorySegment pAllocator) {
        var mh$ = vkDestroyImageView$MH();
        try {
            mh$.invokeExact(device, imageView, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateShaderModule$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$2,"vkCreateShaderModule");
    }
    /**
     * {@snippet :
     * VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);
     * }
     */
    public static int vkCreateShaderModule(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pShaderModule) {
        var mh$ = vkCreateShaderModule$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pShaderModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyShaderModule$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"vkDestroyShaderModule");
    }
    /**
     * {@snippet :
     * void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyShaderModule(MemorySegment device, MemorySegment shaderModule, MemorySegment pAllocator) {
        var mh$ = vkDestroyShaderModule$MH();
        try {
            mh$.invokeExact(device, shaderModule, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreatePipelineCache$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"vkCreatePipelineCache");
    }
    /**
     * {@snippet :
     * VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);
     * }
     */
    public static int vkCreatePipelineCache(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPipelineCache) {
        var mh$ = vkCreatePipelineCache$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPipelineCache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyPipelineCache$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"vkDestroyPipelineCache");
    }
    /**
     * {@snippet :
     * void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyPipelineCache(MemorySegment device, MemorySegment pipelineCache, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipelineCache$MH();
        try {
            mh$.invokeExact(device, pipelineCache, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPipelineCacheData$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"vkGetPipelineCacheData");
    }
    /**
     * {@snippet :
     * VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);
     * }
     */
    public static int vkGetPipelineCacheData(MemorySegment device, MemorySegment pipelineCache, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetPipelineCacheData$MH();
        try {
            return (int)mh$.invokeExact(device, pipelineCache, pDataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkMergePipelineCaches$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"vkMergePipelineCaches");
    }
    /**
     * {@snippet :
     * VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches);
     * }
     */
    public static int vkMergePipelineCaches(MemorySegment device, MemorySegment dstCache, int srcCacheCount, MemorySegment pSrcCaches) {
        var mh$ = vkMergePipelineCaches$MH();
        try {
            return (int)mh$.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateGraphicsPipelines$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"vkCreateGraphicsPipelines");
    }
    /**
     * {@snippet :
     * VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
     * }
     */
    public static int vkCreateGraphicsPipelines(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateGraphicsPipelines$MH();
        try {
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateComputePipelines$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"vkCreateComputePipelines");
    }
    /**
     * {@snippet :
     * VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
     * }
     */
    public static int vkCreateComputePipelines(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateComputePipelines$MH();
        try {
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$4,"vkDestroyPipeline");
    }
    /**
     * {@snippet :
     * void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyPipeline(MemorySegment device, MemorySegment pipeline, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipeline$MH();
        try {
            mh$.invokeExact(device, pipeline, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreatePipelineLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"vkCreatePipelineLayout");
    }
    /**
     * {@snippet :
     * VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);
     * }
     */
    public static int vkCreatePipelineLayout(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPipelineLayout) {
        var mh$ = vkCreatePipelineLayout$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPipelineLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyPipelineLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$0,"vkDestroyPipelineLayout");
    }
    /**
     * {@snippet :
     * void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyPipelineLayout(MemorySegment device, MemorySegment pipelineLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipelineLayout$MH();
        try {
            mh$.invokeExact(device, pipelineLayout, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"vkCreateSampler");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler);
     * }
     */
    public static int vkCreateSampler(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSampler) {
        var mh$ = vkCreateSampler$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroySampler$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"vkDestroySampler");
    }
    /**
     * {@snippet :
     * void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySampler(MemorySegment device, MemorySegment sampler, MemorySegment pAllocator) {
        var mh$ = vkDestroySampler$MH();
        try {
            mh$.invokeExact(device, sampler, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDescriptorSetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"vkCreateDescriptorSetLayout");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);
     * }
     */
    public static int vkCreateDescriptorSetLayout(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSetLayout) {
        var mh$ = vkCreateDescriptorSetLayout$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSetLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDescriptorSetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"vkDestroyDescriptorSetLayout");
    }
    /**
     * {@snippet :
     * void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDescriptorSetLayout(MemorySegment device, MemorySegment descriptorSetLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorSetLayout$MH();
        try {
            mh$.invokeExact(device, descriptorSetLayout, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDescriptorPool$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"vkCreateDescriptorPool");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);
     * }
     */
    public static int vkCreateDescriptorPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorPool) {
        var mh$ = vkCreateDescriptorPool$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorPool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDescriptorPool$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"vkDestroyDescriptorPool");
    }
    /**
     * {@snippet :
     * void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDescriptorPool(MemorySegment device, MemorySegment descriptorPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorPool$MH();
        try {
            mh$.invokeExact(device, descriptorPool, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetDescriptorPool$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"vkResetDescriptorPool");
    }
    /**
     * {@snippet :
     * VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
     * }
     */
    public static int vkResetDescriptorPool(MemorySegment device, MemorySegment descriptorPool, int flags) {
        var mh$ = vkResetDescriptorPool$MH();
        try {
            return (int)mh$.invokeExact(device, descriptorPool, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAllocateDescriptorSets$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"vkAllocateDescriptorSets");
    }
    /**
     * {@snippet :
     * VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
     * }
     */
    public static int vkAllocateDescriptorSets(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pDescriptorSets) {
        var mh$ = vkAllocateDescriptorSets$MH();
        try {
            return (int)mh$.invokeExact(device, pAllocateInfo, pDescriptorSets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkFreeDescriptorSets$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"vkFreeDescriptorSets");
    }
    /**
     * {@snippet :
     * VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets);
     * }
     */
    public static int vkFreeDescriptorSets(MemorySegment device, MemorySegment descriptorPool, int descriptorSetCount, MemorySegment pDescriptorSets) {
        var mh$ = vkFreeDescriptorSets$MH();
        try {
            return (int)mh$.invokeExact(device, descriptorPool, descriptorSetCount, pDescriptorSets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUpdateDescriptorSets$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"vkUpdateDescriptorSets");
    }
    /**
     * {@snippet :
     * void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies);
     * }
     */
    public static void vkUpdateDescriptorSets(MemorySegment device, int descriptorWriteCount, MemorySegment pDescriptorWrites, int descriptorCopyCount, MemorySegment pDescriptorCopies) {
        var mh$ = vkUpdateDescriptorSets$MH();
        try {
            mh$.invokeExact(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"vkCreateFramebuffer");
    }
    /**
     * {@snippet :
     * VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);
     * }
     */
    public static int vkCreateFramebuffer(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFramebuffer) {
        var mh$ = vkCreateFramebuffer$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFramebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$0,"vkDestroyFramebuffer");
    }
    /**
     * {@snippet :
     * void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyFramebuffer(MemorySegment device, MemorySegment framebuffer, MemorySegment pAllocator) {
        var mh$ = vkDestroyFramebuffer$MH();
        try {
            mh$.invokeExact(device, framebuffer, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateRenderPass$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"vkCreateRenderPass");
    }
    /**
     * {@snippet :
     * VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
     * }
     */
    public static int vkCreateRenderPass(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyRenderPass$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"vkDestroyRenderPass");
    }
    /**
     * {@snippet :
     * void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyRenderPass(MemorySegment device, MemorySegment renderPass, MemorySegment pAllocator) {
        var mh$ = vkDestroyRenderPass$MH();
        try {
            mh$.invokeExact(device, renderPass, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRenderAreaGranularity$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"vkGetRenderAreaGranularity");
    }
    /**
     * {@snippet :
     * void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
     * }
     */
    public static void vkGetRenderAreaGranularity(MemorySegment device, MemorySegment renderPass, MemorySegment pGranularity) {
        var mh$ = vkGetRenderAreaGranularity$MH();
        try {
            mh$.invokeExact(device, renderPass, pGranularity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateCommandPool$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$4,"vkCreateCommandPool");
    }
    /**
     * {@snippet :
     * VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);
     * }
     */
    public static int vkCreateCommandPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pCommandPool) {
        var mh$ = vkCreateCommandPool$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pCommandPool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyCommandPool$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"vkDestroyCommandPool");
    }
    /**
     * {@snippet :
     * void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyCommandPool(MemorySegment device, MemorySegment commandPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyCommandPool$MH();
        try {
            mh$.invokeExact(device, commandPool, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetCommandPool$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"vkResetCommandPool");
    }
    /**
     * {@snippet :
     * VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
     * }
     */
    public static int vkResetCommandPool(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkResetCommandPool$MH();
        try {
            return (int)mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAllocateCommandBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"vkAllocateCommandBuffers");
    }
    /**
     * {@snippet :
     * VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
     * }
     */
    public static int vkAllocateCommandBuffers(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pCommandBuffers) {
        var mh$ = vkAllocateCommandBuffers$MH();
        try {
            return (int)mh$.invokeExact(device, pAllocateInfo, pCommandBuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkFreeCommandBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"vkFreeCommandBuffers");
    }
    /**
     * {@snippet :
     * void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);
     * }
     */
    public static void vkFreeCommandBuffers(MemorySegment device, MemorySegment commandPool, int commandBufferCount, MemorySegment pCommandBuffers) {
        var mh$ = vkFreeCommandBuffers$MH();
        try {
            mh$.invokeExact(device, commandPool, commandBufferCount, pCommandBuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBeginCommandBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$3,"vkBeginCommandBuffer");
    }
    /**
     * {@snippet :
     * VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo);
     * }
     */
    public static int vkBeginCommandBuffer(MemorySegment commandBuffer, MemorySegment pBeginInfo) {
        var mh$ = vkBeginCommandBuffer$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer, pBeginInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEndCommandBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"vkEndCommandBuffer");
    }
    /**
     * {@snippet :
     * VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer);
     * }
     */
    public static int vkEndCommandBuffer(MemorySegment commandBuffer) {
        var mh$ = vkEndCommandBuffer$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetCommandBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"vkResetCommandBuffer");
    }
    /**
     * {@snippet :
     * VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
     * }
     */
    public static int vkResetCommandBuffer(MemorySegment commandBuffer, int flags) {
        var mh$ = vkResetCommandBuffer$MH();
        try {
            return (int)mh$.invokeExact(commandBuffer, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"vkCmdBindPipeline");
    }
    /**
     * {@snippet :
     * void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
     * }
     */
    public static void vkCmdBindPipeline(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment pipeline) {
        var mh$ = vkCmdBindPipeline$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"vkCmdSetViewport");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports);
     * }
     */
    public static void vkCmdSetViewport(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewport$MH();
        try {
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pViewports);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"vkCmdSetScissor");
    }
    /**
     * {@snippet :
     * void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors);
     * }
     */
    public static void vkCmdSetScissor(MemorySegment commandBuffer, int firstScissor, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissor$MH();
        try {
            mh$.invokeExact(commandBuffer, firstScissor, scissorCount, pScissors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$3,"vkCmdSetLineWidth");
    }
    /**
     * {@snippet :
     * void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
     * }
     */
    public static void vkCmdSetLineWidth(MemorySegment commandBuffer, float lineWidth) {
        var mh$ = vkCmdSetLineWidth$MH();
        try {
            mh$.invokeExact(commandBuffer, lineWidth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBias$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$4,"vkCmdSetDepthBias");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
     * }
     */
    public static void vkCmdSetDepthBias(MemorySegment commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
        var mh$ = vkCmdSetDepthBias$MH();
        try {
            mh$.invokeExact(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetBlendConstants$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$5,"vkCmdSetBlendConstants");
    }
    /**
     * {@snippet :
     * void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants[4]);
     * }
     */
    public static void vkCmdSetBlendConstants(MemorySegment commandBuffer, MemorySegment blendConstants) {
        var mh$ = vkCmdSetBlendConstants$MH();
        try {
            mh$.invokeExact(commandBuffer, blendConstants);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$0,"vkCmdSetDepthBounds");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
     * }
     */
    public static void vkCmdSetDepthBounds(MemorySegment commandBuffer, float minDepthBounds, float maxDepthBounds) {
        var mh$ = vkCmdSetDepthBounds$MH();
        try {
            mh$.invokeExact(commandBuffer, minDepthBounds, maxDepthBounds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilCompareMask$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$1,"vkCmdSetStencilCompareMask");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
     * }
     */
    public static void vkCmdSetStencilCompareMask(MemorySegment commandBuffer, int faceMask, int compareMask) {
        var mh$ = vkCmdSetStencilCompareMask$MH();
        try {
            mh$.invokeExact(commandBuffer, faceMask, compareMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilWriteMask$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$2,"vkCmdSetStencilWriteMask");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
     * }
     */
    public static void vkCmdSetStencilWriteMask(MemorySegment commandBuffer, int faceMask, int writeMask) {
        var mh$ = vkCmdSetStencilWriteMask$MH();
        try {
            mh$.invokeExact(commandBuffer, faceMask, writeMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilReference$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$3,"vkCmdSetStencilReference");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
     * }
     */
    public static void vkCmdSetStencilReference(MemorySegment commandBuffer, int faceMask, int reference) {
        var mh$ = vkCmdSetStencilReference$MH();
        try {
            mh$.invokeExact(commandBuffer, faceMask, reference);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindDescriptorSets$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$4,"vkCmdBindDescriptorSets");
    }
    /**
     * {@snippet :
     * void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets);
     * }
     */
    public static void vkCmdBindDescriptorSets(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int firstSet, int descriptorSetCount, MemorySegment pDescriptorSets, int dynamicOffsetCount, MemorySegment pDynamicOffsets) {
        var mh$ = vkCmdBindDescriptorSets$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindIndexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$5,"vkCmdBindIndexBuffer");
    }
    /**
     * {@snippet :
     * void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
     * }
     */
    public static void vkCmdBindIndexBuffer(MemorySegment commandBuffer, MemorySegment buffer, long offset, int indexType) {
        var mh$ = vkCmdBindIndexBuffer$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, indexType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindVertexBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$0,"vkCmdBindVertexBuffers");
    }
    /**
     * {@snippet :
     * void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets);
     * }
     */
    public static void vkCmdBindVertexBuffers(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets) {
        var mh$ = vkCmdBindVertexBuffers$MH();
        try {
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"vkCmdDraw");
    }
    /**
     * {@snippet :
     * void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
     * }
     */
    public static void vkCmdDraw(MemorySegment commandBuffer, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
        var mh$ = vkCmdDraw$MH();
        try {
            mh$.invokeExact(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"vkCmdDrawIndexed");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
     * }
     */
    public static void vkCmdDrawIndexed(MemorySegment commandBuffer, int indexCount, int instanceCount, int firstIndex, int vertexOffset, int firstInstance) {
        var mh$ = vkCmdDrawIndexed$MH();
        try {
            mh$.invokeExact(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$3,"vkCmdDrawIndirect");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawIndirect$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndexedIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$4,"vkCmdDrawIndexedIndirect");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndexedIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirect$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDispatch$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$5,"vkCmdDispatch");
    }
    /**
     * {@snippet :
     * void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
     * }
     */
    public static void vkCmdDispatch(MemorySegment commandBuffer, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatch$MH();
        try {
            mh$.invokeExact(commandBuffer, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDispatchIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$0,"vkCmdDispatchIndirect");
    }
    /**
     * {@snippet :
     * void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
     * }
     */
    public static void vkCmdDispatchIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset) {
        var mh$ = vkCmdDispatchIndirect$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"vkCmdCopyBuffer");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions);
     * }
     */
    public static void vkCmdCopyBuffer(MemorySegment commandBuffer, MemorySegment srcBuffer, MemorySegment dstBuffer, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyBuffer$MH();
        try {
            mh$.invokeExact(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImage$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$2,"vkCmdCopyImage");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions);
     * }
     */
    public static void vkCmdCopyImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyImage$MH();
        try {
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBlitImage$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"vkCmdBlitImage");
    }
    /**
     * {@snippet :
     * void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter);
     * }
     */
    public static void vkCmdBlitImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions, int filter) {
        var mh$ = vkCmdBlitImage$MH();
        try {
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBufferToImage$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"vkCmdCopyBufferToImage");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions);
     * }
     */
    public static void vkCmdCopyBufferToImage(MemorySegment commandBuffer, MemorySegment srcBuffer, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyBufferToImage$MH();
        try {
            mh$.invokeExact(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImageToBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"vkCmdCopyImageToBuffer");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions);
     * }
     */
    public static void vkCmdCopyImageToBuffer(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstBuffer, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyImageToBuffer$MH();
        try {
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdUpdateBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"vkCmdUpdateBuffer");
    }
    /**
     * {@snippet :
     * void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData);
     * }
     */
    public static void vkCmdUpdateBuffer(MemorySegment commandBuffer, MemorySegment dstBuffer, long dstOffset, long dataSize, MemorySegment pData) {
        var mh$ = vkCmdUpdateBuffer$MH();
        try {
            mh$.invokeExact(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdFillBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"vkCmdFillBuffer");
    }
    /**
     * {@snippet :
     * void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
     * }
     */
    public static void vkCmdFillBuffer(MemorySegment commandBuffer, MemorySegment dstBuffer, long dstOffset, long size, int data) {
        var mh$ = vkCmdFillBuffer$MH();
        try {
            mh$.invokeExact(commandBuffer, dstBuffer, dstOffset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdClearColorImage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"vkCmdClearColorImage");
    }
    /**
     * {@snippet :
     * void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);
     * }
     */
    public static void vkCmdClearColorImage(MemorySegment commandBuffer, MemorySegment image, int imageLayout, MemorySegment pColor, int rangeCount, MemorySegment pRanges) {
        var mh$ = vkCmdClearColorImage$MH();
        try {
            mh$.invokeExact(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdClearDepthStencilImage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"vkCmdClearDepthStencilImage");
    }
    /**
     * {@snippet :
     * void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);
     * }
     */
    public static void vkCmdClearDepthStencilImage(MemorySegment commandBuffer, MemorySegment image, int imageLayout, MemorySegment pDepthStencil, int rangeCount, MemorySegment pRanges) {
        var mh$ = vkCmdClearDepthStencilImage$MH();
        try {
            mh$.invokeExact(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdClearAttachments$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$4,"vkCmdClearAttachments");
    }
    /**
     * {@snippet :
     * void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects);
     * }
     */
    public static void vkCmdClearAttachments(MemorySegment commandBuffer, int attachmentCount, MemorySegment pAttachments, int rectCount, MemorySegment pRects) {
        var mh$ = vkCmdClearAttachments$MH();
        try {
            mh$.invokeExact(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResolveImage$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"vkCmdResolveImage");
    }
    /**
     * {@snippet :
     * void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions);
     * }
     */
    public static void vkCmdResolveImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdResolveImage$MH();
        try {
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$0,"vkCmdSetEvent");
    }
    /**
     * {@snippet :
     * void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
     * }
     */
    public static void vkCmdSetEvent(MemorySegment commandBuffer, MemorySegment event, int stageMask) {
        var mh$ = vkCmdSetEvent$MH();
        try {
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"vkCmdResetEvent");
    }
    /**
     * {@snippet :
     * void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
     * }
     */
    public static void vkCmdResetEvent(MemorySegment commandBuffer, MemorySegment event, int stageMask) {
        var mh$ = vkCmdResetEvent$MH();
        try {
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWaitEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$2,"vkCmdWaitEvents");
    }
    /**
     * {@snippet :
     * void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
     * }
     */
    public static void vkCmdWaitEvents(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, int srcStageMask, int dstStageMask, int memoryBarrierCount, MemorySegment pMemoryBarriers, int bufferMemoryBarrierCount, MemorySegment pBufferMemoryBarriers, int imageMemoryBarrierCount, MemorySegment pImageMemoryBarriers) {
        var mh$ = vkCmdWaitEvents$MH();
        try {
            mh$.invokeExact(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPipelineBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$3,"vkCmdPipelineBarrier");
    }
    /**
     * {@snippet :
     * void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
     * }
     */
    public static void vkCmdPipelineBarrier(MemorySegment commandBuffer, int srcStageMask, int dstStageMask, int dependencyFlags, int memoryBarrierCount, MemorySegment pMemoryBarriers, int bufferMemoryBarrierCount, MemorySegment pBufferMemoryBarriers, int imageMemoryBarrierCount, MemorySegment pImageMemoryBarriers) {
        var mh$ = vkCmdPipelineBarrier$MH();
        try {
            mh$.invokeExact(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$4,"vkCmdBeginQuery");
    }
    /**
     * {@snippet :
     * void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
     * }
     */
    public static void vkCmdBeginQuery(MemorySegment commandBuffer, MemorySegment queryPool, int query, int flags) {
        var mh$ = vkCmdBeginQuery$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, query, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"vkCmdEndQuery");
    }
    /**
     * {@snippet :
     * void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
     * }
     */
    public static void vkCmdEndQuery(MemorySegment commandBuffer, MemorySegment queryPool, int query) {
        var mh$ = vkCmdEndQuery$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResetQueryPool$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"vkCmdResetQueryPool");
    }
    /**
     * {@snippet :
     * void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
     * }
     */
    public static void vkCmdResetQueryPool(MemorySegment commandBuffer, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkCmdResetQueryPool$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"vkCmdWriteTimestamp");
    }
    /**
     * {@snippet :
     * void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
     * }
     */
    public static void vkCmdWriteTimestamp(MemorySegment commandBuffer, int pipelineStage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineStage, queryPool, query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyQueryPoolResults$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$2,"vkCmdCopyQueryPoolResults");
    }
    /**
     * {@snippet :
     * void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
     * }
     */
    public static void vkCmdCopyQueryPoolResults(MemorySegment commandBuffer, MemorySegment queryPool, int firstQuery, int queryCount, MemorySegment dstBuffer, long dstOffset, long stride, int flags) {
        var mh$ = vkCmdCopyQueryPoolResults$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPushConstants$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"vkCmdPushConstants");
    }
    /**
     * {@snippet :
     * void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void* pValues);
     * }
     */
    public static void vkCmdPushConstants(MemorySegment commandBuffer, MemorySegment layout, int stageFlags, int offset, int size, MemorySegment pValues) {
        var mh$ = vkCmdPushConstants$MH();
        try {
            mh$.invokeExact(commandBuffer, layout, stageFlags, offset, size, pValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginRenderPass$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"vkCmdBeginRenderPass");
    }
    /**
     * {@snippet :
     * void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);
     * }
     */
    public static void vkCmdBeginRenderPass(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, int contents) {
        var mh$ = vkCmdBeginRenderPass$MH();
        try {
            mh$.invokeExact(commandBuffer, pRenderPassBegin, contents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdNextSubpass$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"vkCmdNextSubpass");
    }
    /**
     * {@snippet :
     * void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);
     * }
     */
    public static void vkCmdNextSubpass(MemorySegment commandBuffer, int contents) {
        var mh$ = vkCmdNextSubpass$MH();
        try {
            mh$.invokeExact(commandBuffer, contents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndRenderPass$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$0,"vkCmdEndRenderPass");
    }
    /**
     * {@snippet :
     * void vkCmdEndRenderPass(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdEndRenderPass(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRenderPass$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdExecuteCommands$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"vkCmdExecuteCommands");
    }
    /**
     * {@snippet :
     * void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);
     * }
     */
    public static void vkCmdExecuteCommands(MemorySegment commandBuffer, int commandBufferCount, MemorySegment pCommandBuffers) {
        var mh$ = vkCmdExecuteCommands$MH();
        try {
            mh$.invokeExact(commandBuffer, commandBufferCount, pCommandBuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkSamplerYcbcrConversion_T* VkSamplerYcbcrConversion;
     * }
     */
    public static final AddressLayout VkSamplerYcbcrConversion = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkDescriptorUpdateTemplate_T* VkDescriptorUpdateTemplate;
     * }
     */
    public static final AddressLayout VkDescriptorUpdateTemplate = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0;
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1;
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0;
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1;
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0;
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1;
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0;
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1;
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0;
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_FULL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1;
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0;
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1;
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN = 0;
     * }
     */
    public static int VK_CHROMA_LOCATION_COSITED_EVEN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT = 1;
     * }
     */
    public static int VK_CHROMA_LOCATION_MIDPOINT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0;
     * }
     */
    public static int VK_CHROMA_LOCATION_COSITED_EVEN_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR = 1;
     * }
     */
    public static int VK_CHROMA_LOCATION_MIDPOINT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_CHROMA_LOCATION_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0;
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1;
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0;
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
}


