// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdDrawIndexed)(struct VkCommandBuffer_T* commandBuffer,unsigned int indexCount,unsigned int instanceCount,unsigned int firstIndex,int vertexOffset,unsigned int firstInstance);
 * }
 */
public interface PFN_vkCmdDrawIndexed {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int indexCount, int instanceCount, int firstIndex, int vertexOffset, int firstInstance);
    static MemorySegment allocate(PFN_vkCmdDrawIndexed fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$168.const$1, fi, constants$168.const$0, scope);
    }
    static PFN_vkCmdDrawIndexed ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _indexCount, int _instanceCount, int _firstIndex, int _vertexOffset, int _firstInstance) -> {
            try {
                constants$168.const$2.invokeExact(symbol, _commandBuffer, _indexCount, _instanceCount, _firstIndex, _vertexOffset, _firstInstance);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


