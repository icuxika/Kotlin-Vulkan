// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265HrdParameters {
 *     StdVideoH265HrdFlags flags;
 *     uint8_t tick_divisor_minus2;
 *     uint8_t du_cpb_removal_delay_increment_length_minus1;
 *     uint8_t dpb_output_delay_du_length_minus1;
 *     uint8_t bit_rate_scale;
 *     uint8_t cpb_size_scale;
 *     uint8_t cpb_size_du_scale;
 *     uint8_t initial_cpb_removal_delay_length_minus1;
 *     uint8_t au_cpb_removal_delay_length_minus1;
 *     uint8_t dpb_output_delay_length_minus1;
 *     uint8_t cpb_cnt_minus1[7];
 *     uint16_t elemental_duration_in_tc_minus1[7];
 *     uint16_t reserved[3];
 *     const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
 *     const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
 * };
 * }
 */
public class StdVideoH265HrdParameters {

    public static MemoryLayout $LAYOUT() {
        return constants$539.const$4;
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle tick_divisor_minus2$VH() {
        return constants$539.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t tick_divisor_minus2;
     * }
     */
    public static byte tick_divisor_minus2$get(MemorySegment seg) {
        return (byte)constants$539.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t tick_divisor_minus2;
     * }
     */
    public static void tick_divisor_minus2$set(MemorySegment seg, byte x) {
        constants$539.const$5.set(seg, x);
    }
    public static byte tick_divisor_minus2$get(MemorySegment seg, long index) {
        return (byte)constants$539.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tick_divisor_minus2$set(MemorySegment seg, long index, byte x) {
        constants$539.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle du_cpb_removal_delay_increment_length_minus1$VH() {
        return constants$540.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t du_cpb_removal_delay_increment_length_minus1;
     * }
     */
    public static byte du_cpb_removal_delay_increment_length_minus1$get(MemorySegment seg) {
        return (byte)constants$540.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t du_cpb_removal_delay_increment_length_minus1;
     * }
     */
    public static void du_cpb_removal_delay_increment_length_minus1$set(MemorySegment seg, byte x) {
        constants$540.const$0.set(seg, x);
    }
    public static byte du_cpb_removal_delay_increment_length_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void du_cpb_removal_delay_increment_length_minus1$set(MemorySegment seg, long index, byte x) {
        constants$540.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dpb_output_delay_du_length_minus1$VH() {
        return constants$540.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t dpb_output_delay_du_length_minus1;
     * }
     */
    public static byte dpb_output_delay_du_length_minus1$get(MemorySegment seg) {
        return (byte)constants$540.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t dpb_output_delay_du_length_minus1;
     * }
     */
    public static void dpb_output_delay_du_length_minus1$set(MemorySegment seg, byte x) {
        constants$540.const$1.set(seg, x);
    }
    public static byte dpb_output_delay_du_length_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dpb_output_delay_du_length_minus1$set(MemorySegment seg, long index, byte x) {
        constants$540.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_rate_scale$VH() {
        return constants$540.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t bit_rate_scale;
     * }
     */
    public static byte bit_rate_scale$get(MemorySegment seg) {
        return (byte)constants$540.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t bit_rate_scale;
     * }
     */
    public static void bit_rate_scale$set(MemorySegment seg, byte x) {
        constants$540.const$2.set(seg, x);
    }
    public static byte bit_rate_scale$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate_scale$set(MemorySegment seg, long index, byte x) {
        constants$540.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cpb_size_scale$VH() {
        return constants$540.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t cpb_size_scale;
     * }
     */
    public static byte cpb_size_scale$get(MemorySegment seg) {
        return (byte)constants$540.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t cpb_size_scale;
     * }
     */
    public static void cpb_size_scale$set(MemorySegment seg, byte x) {
        constants$540.const$3.set(seg, x);
    }
    public static byte cpb_size_scale$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cpb_size_scale$set(MemorySegment seg, long index, byte x) {
        constants$540.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cpb_size_du_scale$VH() {
        return constants$540.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t cpb_size_du_scale;
     * }
     */
    public static byte cpb_size_du_scale$get(MemorySegment seg) {
        return (byte)constants$540.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t cpb_size_du_scale;
     * }
     */
    public static void cpb_size_du_scale$set(MemorySegment seg, byte x) {
        constants$540.const$4.set(seg, x);
    }
    public static byte cpb_size_du_scale$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cpb_size_du_scale$set(MemorySegment seg, long index, byte x) {
        constants$540.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle initial_cpb_removal_delay_length_minus1$VH() {
        return constants$540.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t initial_cpb_removal_delay_length_minus1;
     * }
     */
    public static byte initial_cpb_removal_delay_length_minus1$get(MemorySegment seg) {
        return (byte)constants$540.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t initial_cpb_removal_delay_length_minus1;
     * }
     */
    public static void initial_cpb_removal_delay_length_minus1$set(MemorySegment seg, byte x) {
        constants$540.const$5.set(seg, x);
    }
    public static byte initial_cpb_removal_delay_length_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$540.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void initial_cpb_removal_delay_length_minus1$set(MemorySegment seg, long index, byte x) {
        constants$540.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle au_cpb_removal_delay_length_minus1$VH() {
        return constants$541.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t au_cpb_removal_delay_length_minus1;
     * }
     */
    public static byte au_cpb_removal_delay_length_minus1$get(MemorySegment seg) {
        return (byte)constants$541.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t au_cpb_removal_delay_length_minus1;
     * }
     */
    public static void au_cpb_removal_delay_length_minus1$set(MemorySegment seg, byte x) {
        constants$541.const$0.set(seg, x);
    }
    public static byte au_cpb_removal_delay_length_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$541.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void au_cpb_removal_delay_length_minus1$set(MemorySegment seg, long index, byte x) {
        constants$541.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dpb_output_delay_length_minus1$VH() {
        return constants$541.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t dpb_output_delay_length_minus1;
     * }
     */
    public static byte dpb_output_delay_length_minus1$get(MemorySegment seg) {
        return (byte)constants$541.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t dpb_output_delay_length_minus1;
     * }
     */
    public static void dpb_output_delay_length_minus1$set(MemorySegment seg, byte x) {
        constants$541.const$1.set(seg, x);
    }
    public static byte dpb_output_delay_length_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$541.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dpb_output_delay_length_minus1$set(MemorySegment seg, long index, byte x) {
        constants$541.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cpb_cnt_minus1$slice(MemorySegment seg) {
        return seg.asSlice(13, 7);
    }
    public static MemorySegment elemental_duration_in_tc_minus1$slice(MemorySegment seg) {
        return seg.asSlice(20, 14);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(34, 6);
    }
    public static VarHandle pSubLayerHrdParametersNal$VH() {
        return constants$541.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
     * }
     */
    public static MemorySegment pSubLayerHrdParametersNal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$541.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
     * }
     */
    public static void pSubLayerHrdParametersNal$set(MemorySegment seg, MemorySegment x) {
        constants$541.const$2.set(seg, x);
    }
    public static MemorySegment pSubLayerHrdParametersNal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$541.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pSubLayerHrdParametersNal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$541.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSubLayerHrdParametersVcl$VH() {
        return constants$541.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
     * }
     */
    public static MemorySegment pSubLayerHrdParametersVcl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$541.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
     * }
     */
    public static void pSubLayerHrdParametersVcl$set(MemorySegment seg, MemorySegment x) {
        constants$541.const$3.set(seg, x);
    }
    public static MemorySegment pSubLayerHrdParametersVcl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$541.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pSubLayerHrdParametersVcl$set(MemorySegment seg, long index, MemorySegment x) {
        constants$541.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


