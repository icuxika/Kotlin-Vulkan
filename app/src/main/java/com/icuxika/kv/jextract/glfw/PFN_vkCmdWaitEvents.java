// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdWaitEvents)(struct VkCommandBuffer_T* commandBuffer,unsigned int eventCount,struct VkEvent_T** pEvents,unsigned int srcStageMask,unsigned int dstStageMask,unsigned int memoryBarrierCount,struct VkMemoryBarrier* pMemoryBarriers,unsigned int bufferMemoryBarrierCount,struct VkBufferMemoryBarrier* pBufferMemoryBarriers,unsigned int imageMemoryBarrierCount,struct VkImageMemoryBarrier* pImageMemoryBarriers);
 * }
 */
public interface PFN_vkCmdWaitEvents {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int eventCount, java.lang.foreign.MemorySegment pEvents, int srcStageMask, int dstStageMask, int memoryBarrierCount, java.lang.foreign.MemorySegment pMemoryBarriers, int bufferMemoryBarrierCount, java.lang.foreign.MemorySegment pBufferMemoryBarriers, int imageMemoryBarrierCount, java.lang.foreign.MemorySegment pImageMemoryBarriers);
    static MemorySegment allocate(PFN_vkCmdWaitEvents fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$175.const$1, fi, constants$175.const$0, scope);
    }
    static PFN_vkCmdWaitEvents ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _eventCount, java.lang.foreign.MemorySegment _pEvents, int _srcStageMask, int _dstStageMask, int _memoryBarrierCount, java.lang.foreign.MemorySegment _pMemoryBarriers, int _bufferMemoryBarrierCount, java.lang.foreign.MemorySegment _pBufferMemoryBarriers, int _imageMemoryBarrierCount, java.lang.foreign.MemorySegment _pImageMemoryBarriers) -> {
            try {
                constants$175.const$2.invokeExact(symbol, _commandBuffer, _eventCount, _pEvents, _srcStageMask, _dstStageMask, _memoryBarrierCount, _pMemoryBarriers, _bufferMemoryBarrierCount, _pBufferMemoryBarriers, _imageMemoryBarrierCount, _pImageMemoryBarriers);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


