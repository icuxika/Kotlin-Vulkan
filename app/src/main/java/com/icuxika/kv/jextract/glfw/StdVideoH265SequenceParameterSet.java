// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265SequenceParameterSet {
 *     StdVideoH265SpsFlags flags;
 *     StdVideoH265ChromaFormatIdc chroma_format_idc;
 *     uint32_t pic_width_in_luma_samples;
 *     uint32_t pic_height_in_luma_samples;
 *     uint8_t sps_video_parameter_set_id;
 *     uint8_t sps_max_sub_layers_minus1;
 *     uint8_t sps_seq_parameter_set_id;
 *     uint8_t bit_depth_luma_minus8;
 *     uint8_t bit_depth_chroma_minus8;
 *     uint8_t log2_max_pic_order_cnt_lsb_minus4;
 *     uint8_t log2_min_luma_coding_block_size_minus3;
 *     uint8_t log2_diff_max_min_luma_coding_block_size;
 *     uint8_t log2_min_luma_transform_block_size_minus2;
 *     uint8_t log2_diff_max_min_luma_transform_block_size;
 *     uint8_t max_transform_hierarchy_depth_inter;
 *     uint8_t max_transform_hierarchy_depth_intra;
 *     uint8_t num_short_term_ref_pic_sets;
 *     uint8_t num_long_term_ref_pics_sps;
 *     uint8_t pcm_sample_bit_depth_luma_minus1;
 *     uint8_t pcm_sample_bit_depth_chroma_minus1;
 *     uint8_t log2_min_pcm_luma_coding_block_size_minus3;
 *     uint8_t log2_diff_max_min_pcm_luma_coding_block_size;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint8_t palette_max_size;
 *     uint8_t delta_palette_max_predictor_size;
 *     uint8_t motion_vector_resolution_control_idc;
 *     uint8_t sps_num_palette_predictor_initializers_minus1;
 *     uint32_t conf_win_left_offset;
 *     uint32_t conf_win_right_offset;
 *     uint32_t conf_win_top_offset;
 *     uint32_t conf_win_bottom_offset;
 *     const StdVideoH265ProfileTierLevel* pProfileTierLevel;
 *     const StdVideoH265DecPicBufMgr* pDecPicBufMgr;
 *     const StdVideoH265ScalingLists* pScalingLists;
 *     const StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
 *     const StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
 *     const StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
 *     const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
 * };
 * }
 */
public class StdVideoH265SequenceParameterSet {

    public static MemoryLayout $LAYOUT() {
        return constants$552.const$0;
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle chroma_format_idc$VH() {
        return constants$552.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * StdVideoH265ChromaFormatIdc chroma_format_idc;
     * }
     */
    public static int chroma_format_idc$get(MemorySegment seg) {
        return (int)constants$552.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * StdVideoH265ChromaFormatIdc chroma_format_idc;
     * }
     */
    public static void chroma_format_idc$set(MemorySegment seg, int x) {
        constants$552.const$1.set(seg, x);
    }
    public static int chroma_format_idc$get(MemorySegment seg, long index) {
        return (int)constants$552.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_format_idc$set(MemorySegment seg, long index, int x) {
        constants$552.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pic_width_in_luma_samples$VH() {
        return constants$552.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pic_width_in_luma_samples;
     * }
     */
    public static int pic_width_in_luma_samples$get(MemorySegment seg) {
        return (int)constants$552.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pic_width_in_luma_samples;
     * }
     */
    public static void pic_width_in_luma_samples$set(MemorySegment seg, int x) {
        constants$552.const$2.set(seg, x);
    }
    public static int pic_width_in_luma_samples$get(MemorySegment seg, long index) {
        return (int)constants$552.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pic_width_in_luma_samples$set(MemorySegment seg, long index, int x) {
        constants$552.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pic_height_in_luma_samples$VH() {
        return constants$552.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t pic_height_in_luma_samples;
     * }
     */
    public static int pic_height_in_luma_samples$get(MemorySegment seg) {
        return (int)constants$552.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t pic_height_in_luma_samples;
     * }
     */
    public static void pic_height_in_luma_samples$set(MemorySegment seg, int x) {
        constants$552.const$3.set(seg, x);
    }
    public static int pic_height_in_luma_samples$get(MemorySegment seg, long index) {
        return (int)constants$552.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pic_height_in_luma_samples$set(MemorySegment seg, long index, int x) {
        constants$552.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sps_video_parameter_set_id$VH() {
        return constants$552.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t sps_video_parameter_set_id;
     * }
     */
    public static byte sps_video_parameter_set_id$get(MemorySegment seg) {
        return (byte)constants$552.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t sps_video_parameter_set_id;
     * }
     */
    public static void sps_video_parameter_set_id$set(MemorySegment seg, byte x) {
        constants$552.const$4.set(seg, x);
    }
    public static byte sps_video_parameter_set_id$get(MemorySegment seg, long index) {
        return (byte)constants$552.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sps_video_parameter_set_id$set(MemorySegment seg, long index, byte x) {
        constants$552.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sps_max_sub_layers_minus1$VH() {
        return constants$552.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t sps_max_sub_layers_minus1;
     * }
     */
    public static byte sps_max_sub_layers_minus1$get(MemorySegment seg) {
        return (byte)constants$552.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t sps_max_sub_layers_minus1;
     * }
     */
    public static void sps_max_sub_layers_minus1$set(MemorySegment seg, byte x) {
        constants$552.const$5.set(seg, x);
    }
    public static byte sps_max_sub_layers_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$552.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sps_max_sub_layers_minus1$set(MemorySegment seg, long index, byte x) {
        constants$552.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sps_seq_parameter_set_id$VH() {
        return constants$553.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t sps_seq_parameter_set_id;
     * }
     */
    public static byte sps_seq_parameter_set_id$get(MemorySegment seg) {
        return (byte)constants$553.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t sps_seq_parameter_set_id;
     * }
     */
    public static void sps_seq_parameter_set_id$set(MemorySegment seg, byte x) {
        constants$553.const$0.set(seg, x);
    }
    public static byte sps_seq_parameter_set_id$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sps_seq_parameter_set_id$set(MemorySegment seg, long index, byte x) {
        constants$553.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_depth_luma_minus8$VH() {
        return constants$553.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t bit_depth_luma_minus8;
     * }
     */
    public static byte bit_depth_luma_minus8$get(MemorySegment seg) {
        return (byte)constants$553.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t bit_depth_luma_minus8;
     * }
     */
    public static void bit_depth_luma_minus8$set(MemorySegment seg, byte x) {
        constants$553.const$1.set(seg, x);
    }
    public static byte bit_depth_luma_minus8$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_depth_luma_minus8$set(MemorySegment seg, long index, byte x) {
        constants$553.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_depth_chroma_minus8$VH() {
        return constants$553.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t bit_depth_chroma_minus8;
     * }
     */
    public static byte bit_depth_chroma_minus8$get(MemorySegment seg) {
        return (byte)constants$553.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t bit_depth_chroma_minus8;
     * }
     */
    public static void bit_depth_chroma_minus8$set(MemorySegment seg, byte x) {
        constants$553.const$2.set(seg, x);
    }
    public static byte bit_depth_chroma_minus8$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_depth_chroma_minus8$set(MemorySegment seg, long index, byte x) {
        constants$553.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_max_pic_order_cnt_lsb_minus4$VH() {
        return constants$553.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4;
     * }
     */
    public static byte log2_max_pic_order_cnt_lsb_minus4$get(MemorySegment seg) {
        return (byte)constants$553.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4;
     * }
     */
    public static void log2_max_pic_order_cnt_lsb_minus4$set(MemorySegment seg, byte x) {
        constants$553.const$3.set(seg, x);
    }
    public static byte log2_max_pic_order_cnt_lsb_minus4$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_max_pic_order_cnt_lsb_minus4$set(MemorySegment seg, long index, byte x) {
        constants$553.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_min_luma_coding_block_size_minus3$VH() {
        return constants$553.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_min_luma_coding_block_size_minus3;
     * }
     */
    public static byte log2_min_luma_coding_block_size_minus3$get(MemorySegment seg) {
        return (byte)constants$553.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_min_luma_coding_block_size_minus3;
     * }
     */
    public static void log2_min_luma_coding_block_size_minus3$set(MemorySegment seg, byte x) {
        constants$553.const$4.set(seg, x);
    }
    public static byte log2_min_luma_coding_block_size_minus3$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_min_luma_coding_block_size_minus3$set(MemorySegment seg, long index, byte x) {
        constants$553.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_diff_max_min_luma_coding_block_size$VH() {
        return constants$553.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_luma_coding_block_size;
     * }
     */
    public static byte log2_diff_max_min_luma_coding_block_size$get(MemorySegment seg) {
        return (byte)constants$553.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_luma_coding_block_size;
     * }
     */
    public static void log2_diff_max_min_luma_coding_block_size$set(MemorySegment seg, byte x) {
        constants$553.const$5.set(seg, x);
    }
    public static byte log2_diff_max_min_luma_coding_block_size$get(MemorySegment seg, long index) {
        return (byte)constants$553.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_diff_max_min_luma_coding_block_size$set(MemorySegment seg, long index, byte x) {
        constants$553.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_min_luma_transform_block_size_minus2$VH() {
        return constants$554.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_min_luma_transform_block_size_minus2;
     * }
     */
    public static byte log2_min_luma_transform_block_size_minus2$get(MemorySegment seg) {
        return (byte)constants$554.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_min_luma_transform_block_size_minus2;
     * }
     */
    public static void log2_min_luma_transform_block_size_minus2$set(MemorySegment seg, byte x) {
        constants$554.const$0.set(seg, x);
    }
    public static byte log2_min_luma_transform_block_size_minus2$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_min_luma_transform_block_size_minus2$set(MemorySegment seg, long index, byte x) {
        constants$554.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_diff_max_min_luma_transform_block_size$VH() {
        return constants$554.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_luma_transform_block_size;
     * }
     */
    public static byte log2_diff_max_min_luma_transform_block_size$get(MemorySegment seg) {
        return (byte)constants$554.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_luma_transform_block_size;
     * }
     */
    public static void log2_diff_max_min_luma_transform_block_size$set(MemorySegment seg, byte x) {
        constants$554.const$1.set(seg, x);
    }
    public static byte log2_diff_max_min_luma_transform_block_size$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_diff_max_min_luma_transform_block_size$set(MemorySegment seg, long index, byte x) {
        constants$554.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_transform_hierarchy_depth_inter$VH() {
        return constants$554.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t max_transform_hierarchy_depth_inter;
     * }
     */
    public static byte max_transform_hierarchy_depth_inter$get(MemorySegment seg) {
        return (byte)constants$554.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t max_transform_hierarchy_depth_inter;
     * }
     */
    public static void max_transform_hierarchy_depth_inter$set(MemorySegment seg, byte x) {
        constants$554.const$2.set(seg, x);
    }
    public static byte max_transform_hierarchy_depth_inter$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void max_transform_hierarchy_depth_inter$set(MemorySegment seg, long index, byte x) {
        constants$554.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_transform_hierarchy_depth_intra$VH() {
        return constants$554.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t max_transform_hierarchy_depth_intra;
     * }
     */
    public static byte max_transform_hierarchy_depth_intra$get(MemorySegment seg) {
        return (byte)constants$554.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t max_transform_hierarchy_depth_intra;
     * }
     */
    public static void max_transform_hierarchy_depth_intra$set(MemorySegment seg, byte x) {
        constants$554.const$3.set(seg, x);
    }
    public static byte max_transform_hierarchy_depth_intra$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_transform_hierarchy_depth_intra$set(MemorySegment seg, long index, byte x) {
        constants$554.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_short_term_ref_pic_sets$VH() {
        return constants$554.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_short_term_ref_pic_sets;
     * }
     */
    public static byte num_short_term_ref_pic_sets$get(MemorySegment seg) {
        return (byte)constants$554.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_short_term_ref_pic_sets;
     * }
     */
    public static void num_short_term_ref_pic_sets$set(MemorySegment seg, byte x) {
        constants$554.const$4.set(seg, x);
    }
    public static byte num_short_term_ref_pic_sets$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void num_short_term_ref_pic_sets$set(MemorySegment seg, long index, byte x) {
        constants$554.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_long_term_ref_pics_sps$VH() {
        return constants$554.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_long_term_ref_pics_sps;
     * }
     */
    public static byte num_long_term_ref_pics_sps$get(MemorySegment seg) {
        return (byte)constants$554.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_long_term_ref_pics_sps;
     * }
     */
    public static void num_long_term_ref_pics_sps$set(MemorySegment seg, byte x) {
        constants$554.const$5.set(seg, x);
    }
    public static byte num_long_term_ref_pics_sps$get(MemorySegment seg, long index) {
        return (byte)constants$554.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void num_long_term_ref_pics_sps$set(MemorySegment seg, long index, byte x) {
        constants$554.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pcm_sample_bit_depth_luma_minus1$VH() {
        return constants$555.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t pcm_sample_bit_depth_luma_minus1;
     * }
     */
    public static byte pcm_sample_bit_depth_luma_minus1$get(MemorySegment seg) {
        return (byte)constants$555.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t pcm_sample_bit_depth_luma_minus1;
     * }
     */
    public static void pcm_sample_bit_depth_luma_minus1$set(MemorySegment seg, byte x) {
        constants$555.const$0.set(seg, x);
    }
    public static byte pcm_sample_bit_depth_luma_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pcm_sample_bit_depth_luma_minus1$set(MemorySegment seg, long index, byte x) {
        constants$555.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pcm_sample_bit_depth_chroma_minus1$VH() {
        return constants$555.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t pcm_sample_bit_depth_chroma_minus1;
     * }
     */
    public static byte pcm_sample_bit_depth_chroma_minus1$get(MemorySegment seg) {
        return (byte)constants$555.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t pcm_sample_bit_depth_chroma_minus1;
     * }
     */
    public static void pcm_sample_bit_depth_chroma_minus1$set(MemorySegment seg, byte x) {
        constants$555.const$1.set(seg, x);
    }
    public static byte pcm_sample_bit_depth_chroma_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pcm_sample_bit_depth_chroma_minus1$set(MemorySegment seg, long index, byte x) {
        constants$555.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_min_pcm_luma_coding_block_size_minus3$VH() {
        return constants$555.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3;
     * }
     */
    public static byte log2_min_pcm_luma_coding_block_size_minus3$get(MemorySegment seg) {
        return (byte)constants$555.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3;
     * }
     */
    public static void log2_min_pcm_luma_coding_block_size_minus3$set(MemorySegment seg, byte x) {
        constants$555.const$2.set(seg, x);
    }
    public static byte log2_min_pcm_luma_coding_block_size_minus3$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_min_pcm_luma_coding_block_size_minus3$set(MemorySegment seg, long index, byte x) {
        constants$555.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_diff_max_min_pcm_luma_coding_block_size$VH() {
        return constants$555.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size;
     * }
     */
    public static byte log2_diff_max_min_pcm_luma_coding_block_size$get(MemorySegment seg) {
        return (byte)constants$555.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size;
     * }
     */
    public static void log2_diff_max_min_pcm_luma_coding_block_size$set(MemorySegment seg, byte x) {
        constants$555.const$3.set(seg, x);
    }
    public static byte log2_diff_max_min_pcm_luma_coding_block_size$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_diff_max_min_pcm_luma_coding_block_size$set(MemorySegment seg, long index, byte x) {
        constants$555.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$555.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved1;
     * }
     */
    public static byte reserved1$get(MemorySegment seg) {
        return (byte)constants$555.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, byte x) {
        constants$555.const$4.set(seg, x);
    }
    public static byte reserved1$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, byte x) {
        constants$555.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$555.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static byte reserved2$get(MemorySegment seg) {
        return (byte)constants$555.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, byte x) {
        constants$555.const$5.set(seg, x);
    }
    public static byte reserved2$get(MemorySegment seg, long index) {
        return (byte)constants$555.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, byte x) {
        constants$555.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle palette_max_size$VH() {
        return constants$556.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t palette_max_size;
     * }
     */
    public static byte palette_max_size$get(MemorySegment seg) {
        return (byte)constants$556.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t palette_max_size;
     * }
     */
    public static void palette_max_size$set(MemorySegment seg, byte x) {
        constants$556.const$0.set(seg, x);
    }
    public static byte palette_max_size$get(MemorySegment seg, long index) {
        return (byte)constants$556.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void palette_max_size$set(MemorySegment seg, long index, byte x) {
        constants$556.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle delta_palette_max_predictor_size$VH() {
        return constants$556.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t delta_palette_max_predictor_size;
     * }
     */
    public static byte delta_palette_max_predictor_size$get(MemorySegment seg) {
        return (byte)constants$556.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t delta_palette_max_predictor_size;
     * }
     */
    public static void delta_palette_max_predictor_size$set(MemorySegment seg, byte x) {
        constants$556.const$1.set(seg, x);
    }
    public static byte delta_palette_max_predictor_size$get(MemorySegment seg, long index) {
        return (byte)constants$556.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void delta_palette_max_predictor_size$set(MemorySegment seg, long index, byte x) {
        constants$556.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle motion_vector_resolution_control_idc$VH() {
        return constants$556.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t motion_vector_resolution_control_idc;
     * }
     */
    public static byte motion_vector_resolution_control_idc$get(MemorySegment seg) {
        return (byte)constants$556.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t motion_vector_resolution_control_idc;
     * }
     */
    public static void motion_vector_resolution_control_idc$set(MemorySegment seg, byte x) {
        constants$556.const$2.set(seg, x);
    }
    public static byte motion_vector_resolution_control_idc$get(MemorySegment seg, long index) {
        return (byte)constants$556.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void motion_vector_resolution_control_idc$set(MemorySegment seg, long index, byte x) {
        constants$556.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sps_num_palette_predictor_initializers_minus1$VH() {
        return constants$556.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t sps_num_palette_predictor_initializers_minus1;
     * }
     */
    public static byte sps_num_palette_predictor_initializers_minus1$get(MemorySegment seg) {
        return (byte)constants$556.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t sps_num_palette_predictor_initializers_minus1;
     * }
     */
    public static void sps_num_palette_predictor_initializers_minus1$set(MemorySegment seg, byte x) {
        constants$556.const$3.set(seg, x);
    }
    public static byte sps_num_palette_predictor_initializers_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$556.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sps_num_palette_predictor_initializers_minus1$set(MemorySegment seg, long index, byte x) {
        constants$556.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conf_win_left_offset$VH() {
        return constants$556.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t conf_win_left_offset;
     * }
     */
    public static int conf_win_left_offset$get(MemorySegment seg) {
        return (int)constants$556.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t conf_win_left_offset;
     * }
     */
    public static void conf_win_left_offset$set(MemorySegment seg, int x) {
        constants$556.const$4.set(seg, x);
    }
    public static int conf_win_left_offset$get(MemorySegment seg, long index) {
        return (int)constants$556.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void conf_win_left_offset$set(MemorySegment seg, long index, int x) {
        constants$556.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conf_win_right_offset$VH() {
        return constants$556.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t conf_win_right_offset;
     * }
     */
    public static int conf_win_right_offset$get(MemorySegment seg) {
        return (int)constants$556.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t conf_win_right_offset;
     * }
     */
    public static void conf_win_right_offset$set(MemorySegment seg, int x) {
        constants$556.const$5.set(seg, x);
    }
    public static int conf_win_right_offset$get(MemorySegment seg, long index) {
        return (int)constants$556.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void conf_win_right_offset$set(MemorySegment seg, long index, int x) {
        constants$556.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conf_win_top_offset$VH() {
        return constants$557.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t conf_win_top_offset;
     * }
     */
    public static int conf_win_top_offset$get(MemorySegment seg) {
        return (int)constants$557.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t conf_win_top_offset;
     * }
     */
    public static void conf_win_top_offset$set(MemorySegment seg, int x) {
        constants$557.const$0.set(seg, x);
    }
    public static int conf_win_top_offset$get(MemorySegment seg, long index) {
        return (int)constants$557.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void conf_win_top_offset$set(MemorySegment seg, long index, int x) {
        constants$557.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conf_win_bottom_offset$VH() {
        return constants$557.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t conf_win_bottom_offset;
     * }
     */
    public static int conf_win_bottom_offset$get(MemorySegment seg) {
        return (int)constants$557.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t conf_win_bottom_offset;
     * }
     */
    public static void conf_win_bottom_offset$set(MemorySegment seg, int x) {
        constants$557.const$1.set(seg, x);
    }
    public static int conf_win_bottom_offset$get(MemorySegment seg, long index) {
        return (int)constants$557.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void conf_win_bottom_offset$set(MemorySegment seg, long index, int x) {
        constants$557.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pProfileTierLevel$VH() {
        return constants$557.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265ProfileTierLevel* pProfileTierLevel;
     * }
     */
    public static MemorySegment pProfileTierLevel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265ProfileTierLevel* pProfileTierLevel;
     * }
     */
    public static void pProfileTierLevel$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$2.set(seg, x);
    }
    public static MemorySegment pProfileTierLevel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pProfileTierLevel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pDecPicBufMgr$VH() {
        return constants$557.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265DecPicBufMgr* pDecPicBufMgr;
     * }
     */
    public static MemorySegment pDecPicBufMgr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265DecPicBufMgr* pDecPicBufMgr;
     * }
     */
    public static void pDecPicBufMgr$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$3.set(seg, x);
    }
    public static MemorySegment pDecPicBufMgr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pDecPicBufMgr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pScalingLists$VH() {
        return constants$557.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265ScalingLists* pScalingLists;
     * }
     */
    public static MemorySegment pScalingLists$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265ScalingLists* pScalingLists;
     * }
     */
    public static void pScalingLists$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$4.set(seg, x);
    }
    public static MemorySegment pScalingLists$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pScalingLists$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pShortTermRefPicSet$VH() {
        return constants$557.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
     * }
     */
    public static MemorySegment pShortTermRefPicSet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$557.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
     * }
     */
    public static void pShortTermRefPicSet$set(MemorySegment seg, MemorySegment x) {
        constants$557.const$5.set(seg, x);
    }
    public static MemorySegment pShortTermRefPicSet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$557.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pShortTermRefPicSet$set(MemorySegment seg, long index, MemorySegment x) {
        constants$557.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pLongTermRefPicsSps$VH() {
        return constants$558.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
     * }
     */
    public static MemorySegment pLongTermRefPicsSps$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$558.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
     * }
     */
    public static void pLongTermRefPicsSps$set(MemorySegment seg, MemorySegment x) {
        constants$558.const$0.set(seg, x);
    }
    public static MemorySegment pLongTermRefPicsSps$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$558.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pLongTermRefPicsSps$set(MemorySegment seg, long index, MemorySegment x) {
        constants$558.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pSequenceParameterSetVui$VH() {
        return constants$558.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
     * }
     */
    public static MemorySegment pSequenceParameterSetVui$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$558.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
     * }
     */
    public static void pSequenceParameterSetVui$set(MemorySegment seg, MemorySegment x) {
        constants$558.const$1.set(seg, x);
    }
    public static MemorySegment pSequenceParameterSetVui$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$558.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pSequenceParameterSetVui$set(MemorySegment seg, long index, MemorySegment x) {
        constants$558.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pPredictorPaletteEntries$VH() {
        return constants$558.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
     * }
     */
    public static MemorySegment pPredictorPaletteEntries$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$558.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
     * }
     */
    public static void pPredictorPaletteEntries$set(MemorySegment seg, MemorySegment x) {
        constants$558.const$2.set(seg, x);
    }
    public static MemorySegment pPredictorPaletteEntries$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$558.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pPredictorPaletteEntries$set(MemorySegment seg, long index, MemorySegment x) {
        constants$558.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


