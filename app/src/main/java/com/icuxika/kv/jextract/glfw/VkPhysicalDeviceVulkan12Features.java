// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceVulkan12Features {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkBool32 samplerMirrorClampToEdge;
 *     VkBool32 drawIndirectCount;
 *     VkBool32 storageBuffer8BitAccess;
 *     VkBool32 uniformAndStorageBuffer8BitAccess;
 *     VkBool32 storagePushConstant8;
 *     VkBool32 shaderBufferInt64Atomics;
 *     VkBool32 shaderSharedInt64Atomics;
 *     VkBool32 shaderFloat16;
 *     VkBool32 shaderInt8;
 *     VkBool32 descriptorIndexing;
 *     VkBool32 shaderInputAttachmentArrayDynamicIndexing;
 *     VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
 *     VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
 *     VkBool32 shaderUniformBufferArrayNonUniformIndexing;
 *     VkBool32 shaderSampledImageArrayNonUniformIndexing;
 *     VkBool32 shaderStorageBufferArrayNonUniformIndexing;
 *     VkBool32 shaderStorageImageArrayNonUniformIndexing;
 *     VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
 *     VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
 *     VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
 *     VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingSampledImageUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageImageUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingUpdateUnusedWhilePending;
 *     VkBool32 descriptorBindingPartiallyBound;
 *     VkBool32 descriptorBindingVariableDescriptorCount;
 *     VkBool32 runtimeDescriptorArray;
 *     VkBool32 samplerFilterMinmax;
 *     VkBool32 scalarBlockLayout;
 *     VkBool32 imagelessFramebuffer;
 *     VkBool32 uniformBufferStandardLayout;
 *     VkBool32 shaderSubgroupExtendedTypes;
 *     VkBool32 separateDepthStencilLayouts;
 *     VkBool32 hostQueryReset;
 *     VkBool32 timelineSemaphore;
 *     VkBool32 bufferDeviceAddress;
 *     VkBool32 bufferDeviceAddressCaptureReplay;
 *     VkBool32 bufferDeviceAddressMultiDevice;
 *     VkBool32 vulkanMemoryModel;
 *     VkBool32 vulkanMemoryModelDeviceScope;
 *     VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
 *     VkBool32 shaderOutputViewportIndex;
 *     VkBool32 shaderOutputLayer;
 *     VkBool32 subgroupBroadcastDynamicId;
 * };
 * }
 */
public class VkPhysicalDeviceVulkan12Features {

    public static MemoryLayout $LAYOUT() {
        return constants$272.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$272.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$272.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$272.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$272.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$272.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$273.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$273.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$273.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$273.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$273.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samplerMirrorClampToEdge$VH() {
        return constants$273.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 samplerMirrorClampToEdge;
     * }
     */
    public static int samplerMirrorClampToEdge$get(MemorySegment seg) {
        return (int)constants$273.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 samplerMirrorClampToEdge;
     * }
     */
    public static void samplerMirrorClampToEdge$set(MemorySegment seg, int x) {
        constants$273.const$1.set(seg, x);
    }
    public static int samplerMirrorClampToEdge$get(MemorySegment seg, long index) {
        return (int)constants$273.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void samplerMirrorClampToEdge$set(MemorySegment seg, long index, int x) {
        constants$273.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle drawIndirectCount$VH() {
        return constants$273.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 drawIndirectCount;
     * }
     */
    public static int drawIndirectCount$get(MemorySegment seg) {
        return (int)constants$273.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 drawIndirectCount;
     * }
     */
    public static void drawIndirectCount$set(MemorySegment seg, int x) {
        constants$273.const$2.set(seg, x);
    }
    public static int drawIndirectCount$get(MemorySegment seg, long index) {
        return (int)constants$273.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drawIndirectCount$set(MemorySegment seg, long index, int x) {
        constants$273.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle storageBuffer8BitAccess$VH() {
        return constants$273.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 storageBuffer8BitAccess;
     * }
     */
    public static int storageBuffer8BitAccess$get(MemorySegment seg) {
        return (int)constants$273.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 storageBuffer8BitAccess;
     * }
     */
    public static void storageBuffer8BitAccess$set(MemorySegment seg, int x) {
        constants$273.const$3.set(seg, x);
    }
    public static int storageBuffer8BitAccess$get(MemorySegment seg, long index) {
        return (int)constants$273.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void storageBuffer8BitAccess$set(MemorySegment seg, long index, int x) {
        constants$273.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uniformAndStorageBuffer8BitAccess$VH() {
        return constants$273.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 uniformAndStorageBuffer8BitAccess;
     * }
     */
    public static int uniformAndStorageBuffer8BitAccess$get(MemorySegment seg) {
        return (int)constants$273.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 uniformAndStorageBuffer8BitAccess;
     * }
     */
    public static void uniformAndStorageBuffer8BitAccess$set(MemorySegment seg, int x) {
        constants$273.const$4.set(seg, x);
    }
    public static int uniformAndStorageBuffer8BitAccess$get(MemorySegment seg, long index) {
        return (int)constants$273.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void uniformAndStorageBuffer8BitAccess$set(MemorySegment seg, long index, int x) {
        constants$273.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle storagePushConstant8$VH() {
        return constants$273.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 storagePushConstant8;
     * }
     */
    public static int storagePushConstant8$get(MemorySegment seg) {
        return (int)constants$273.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 storagePushConstant8;
     * }
     */
    public static void storagePushConstant8$set(MemorySegment seg, int x) {
        constants$273.const$5.set(seg, x);
    }
    public static int storagePushConstant8$get(MemorySegment seg, long index) {
        return (int)constants$273.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void storagePushConstant8$set(MemorySegment seg, long index, int x) {
        constants$273.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderBufferInt64Atomics$VH() {
        return constants$274.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderBufferInt64Atomics;
     * }
     */
    public static int shaderBufferInt64Atomics$get(MemorySegment seg) {
        return (int)constants$274.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderBufferInt64Atomics;
     * }
     */
    public static void shaderBufferInt64Atomics$set(MemorySegment seg, int x) {
        constants$274.const$0.set(seg, x);
    }
    public static int shaderBufferInt64Atomics$get(MemorySegment seg, long index) {
        return (int)constants$274.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderBufferInt64Atomics$set(MemorySegment seg, long index, int x) {
        constants$274.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSharedInt64Atomics$VH() {
        return constants$274.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSharedInt64Atomics;
     * }
     */
    public static int shaderSharedInt64Atomics$get(MemorySegment seg) {
        return (int)constants$274.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSharedInt64Atomics;
     * }
     */
    public static void shaderSharedInt64Atomics$set(MemorySegment seg, int x) {
        constants$274.const$1.set(seg, x);
    }
    public static int shaderSharedInt64Atomics$get(MemorySegment seg, long index) {
        return (int)constants$274.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSharedInt64Atomics$set(MemorySegment seg, long index, int x) {
        constants$274.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderFloat16$VH() {
        return constants$274.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderFloat16;
     * }
     */
    public static int shaderFloat16$get(MemorySegment seg) {
        return (int)constants$274.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderFloat16;
     * }
     */
    public static void shaderFloat16$set(MemorySegment seg, int x) {
        constants$274.const$2.set(seg, x);
    }
    public static int shaderFloat16$get(MemorySegment seg, long index) {
        return (int)constants$274.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderFloat16$set(MemorySegment seg, long index, int x) {
        constants$274.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInt8$VH() {
        return constants$274.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInt8;
     * }
     */
    public static int shaderInt8$get(MemorySegment seg) {
        return (int)constants$274.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInt8;
     * }
     */
    public static void shaderInt8$set(MemorySegment seg, int x) {
        constants$274.const$3.set(seg, x);
    }
    public static int shaderInt8$get(MemorySegment seg, long index) {
        return (int)constants$274.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInt8$set(MemorySegment seg, long index, int x) {
        constants$274.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorIndexing$VH() {
        return constants$274.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorIndexing;
     * }
     */
    public static int descriptorIndexing$get(MemorySegment seg) {
        return (int)constants$274.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorIndexing;
     * }
     */
    public static void descriptorIndexing$set(MemorySegment seg, int x) {
        constants$274.const$4.set(seg, x);
    }
    public static int descriptorIndexing$get(MemorySegment seg, long index) {
        return (int)constants$274.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorIndexing$set(MemorySegment seg, long index, int x) {
        constants$274.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInputAttachmentArrayDynamicIndexing$VH() {
        return constants$274.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing;
     * }
     */
    public static int shaderInputAttachmentArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$274.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing;
     * }
     */
    public static void shaderInputAttachmentArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$274.const$5.set(seg, x);
    }
    public static int shaderInputAttachmentArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$274.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInputAttachmentArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$274.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderUniformTexelBufferArrayDynamicIndexing$VH() {
        return constants$275.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
     * }
     */
    public static int shaderUniformTexelBufferArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
     * }
     */
    public static void shaderUniformTexelBufferArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$275.const$0.set(seg, x);
    }
    public static int shaderUniformTexelBufferArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderUniformTexelBufferArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageTexelBufferArrayDynamicIndexing$VH() {
        return constants$275.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
     * }
     */
    public static int shaderStorageTexelBufferArrayDynamicIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
     * }
     */
    public static void shaderStorageTexelBufferArrayDynamicIndexing$set(MemorySegment seg, int x) {
        constants$275.const$1.set(seg, x);
    }
    public static int shaderStorageTexelBufferArrayDynamicIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageTexelBufferArrayDynamicIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderUniformBufferArrayNonUniformIndexing$VH() {
        return constants$275.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing;
     * }
     */
    public static int shaderUniformBufferArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing;
     * }
     */
    public static void shaderUniformBufferArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$275.const$2.set(seg, x);
    }
    public static int shaderUniformBufferArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderUniformBufferArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSampledImageArrayNonUniformIndexing$VH() {
        return constants$275.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing;
     * }
     */
    public static int shaderSampledImageArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing;
     * }
     */
    public static void shaderSampledImageArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$275.const$3.set(seg, x);
    }
    public static int shaderSampledImageArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSampledImageArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageBufferArrayNonUniformIndexing$VH() {
        return constants$275.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing;
     * }
     */
    public static int shaderStorageBufferArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing;
     * }
     */
    public static void shaderStorageBufferArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$275.const$4.set(seg, x);
    }
    public static int shaderStorageBufferArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageBufferArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageImageArrayNonUniformIndexing$VH() {
        return constants$275.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing;
     * }
     */
    public static int shaderStorageImageArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$275.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing;
     * }
     */
    public static void shaderStorageImageArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$275.const$5.set(seg, x);
    }
    public static int shaderStorageImageArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$275.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageImageArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$275.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderInputAttachmentArrayNonUniformIndexing$VH() {
        return constants$276.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
     * }
     */
    public static int shaderInputAttachmentArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$276.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
     * }
     */
    public static void shaderInputAttachmentArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$276.const$0.set(seg, x);
    }
    public static int shaderInputAttachmentArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$276.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderInputAttachmentArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$276.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderUniformTexelBufferArrayNonUniformIndexing$VH() {
        return constants$276.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
     * }
     */
    public static int shaderUniformTexelBufferArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$276.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
     * }
     */
    public static void shaderUniformTexelBufferArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$276.const$1.set(seg, x);
    }
    public static int shaderUniformTexelBufferArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$276.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderUniformTexelBufferArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$276.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderStorageTexelBufferArrayNonUniformIndexing$VH() {
        return constants$276.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
     * }
     */
    public static int shaderStorageTexelBufferArrayNonUniformIndexing$get(MemorySegment seg) {
        return (int)constants$276.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
     * }
     */
    public static void shaderStorageTexelBufferArrayNonUniformIndexing$set(MemorySegment seg, int x) {
        constants$276.const$2.set(seg, x);
    }
    public static int shaderStorageTexelBufferArrayNonUniformIndexing$get(MemorySegment seg, long index) {
        return (int)constants$276.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderStorageTexelBufferArrayNonUniformIndexing$set(MemorySegment seg, long index, int x) {
        constants$276.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingUniformBufferUpdateAfterBind$VH() {
        return constants$276.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
     * }
     */
    public static int descriptorBindingUniformBufferUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$276.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
     * }
     */
    public static void descriptorBindingUniformBufferUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$276.const$3.set(seg, x);
    }
    public static int descriptorBindingUniformBufferUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$276.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingUniformBufferUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$276.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingSampledImageUpdateAfterBind$VH() {
        return constants$276.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind;
     * }
     */
    public static int descriptorBindingSampledImageUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$276.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind;
     * }
     */
    public static void descriptorBindingSampledImageUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$276.const$4.set(seg, x);
    }
    public static int descriptorBindingSampledImageUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$276.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingSampledImageUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$276.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingStorageImageUpdateAfterBind$VH() {
        return constants$276.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind;
     * }
     */
    public static int descriptorBindingStorageImageUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$276.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind;
     * }
     */
    public static void descriptorBindingStorageImageUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$276.const$5.set(seg, x);
    }
    public static int descriptorBindingStorageImageUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$276.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingStorageImageUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$276.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingStorageBufferUpdateAfterBind$VH() {
        return constants$277.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
     * }
     */
    public static int descriptorBindingStorageBufferUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$277.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
     * }
     */
    public static void descriptorBindingStorageBufferUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$277.const$0.set(seg, x);
    }
    public static int descriptorBindingStorageBufferUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$277.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingStorageBufferUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$277.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingUniformTexelBufferUpdateAfterBind$VH() {
        return constants$277.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
     * }
     */
    public static int descriptorBindingUniformTexelBufferUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$277.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
     * }
     */
    public static void descriptorBindingUniformTexelBufferUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$277.const$1.set(seg, x);
    }
    public static int descriptorBindingUniformTexelBufferUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$277.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingUniformTexelBufferUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$277.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingStorageTexelBufferUpdateAfterBind$VH() {
        return constants$277.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
     * }
     */
    public static int descriptorBindingStorageTexelBufferUpdateAfterBind$get(MemorySegment seg) {
        return (int)constants$277.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
     * }
     */
    public static void descriptorBindingStorageTexelBufferUpdateAfterBind$set(MemorySegment seg, int x) {
        constants$277.const$2.set(seg, x);
    }
    public static int descriptorBindingStorageTexelBufferUpdateAfterBind$get(MemorySegment seg, long index) {
        return (int)constants$277.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingStorageTexelBufferUpdateAfterBind$set(MemorySegment seg, long index, int x) {
        constants$277.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingUpdateUnusedWhilePending$VH() {
        return constants$277.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending;
     * }
     */
    public static int descriptorBindingUpdateUnusedWhilePending$get(MemorySegment seg) {
        return (int)constants$277.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending;
     * }
     */
    public static void descriptorBindingUpdateUnusedWhilePending$set(MemorySegment seg, int x) {
        constants$277.const$3.set(seg, x);
    }
    public static int descriptorBindingUpdateUnusedWhilePending$get(MemorySegment seg, long index) {
        return (int)constants$277.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingUpdateUnusedWhilePending$set(MemorySegment seg, long index, int x) {
        constants$277.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingPartiallyBound$VH() {
        return constants$277.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingPartiallyBound;
     * }
     */
    public static int descriptorBindingPartiallyBound$get(MemorySegment seg) {
        return (int)constants$277.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingPartiallyBound;
     * }
     */
    public static void descriptorBindingPartiallyBound$set(MemorySegment seg, int x) {
        constants$277.const$4.set(seg, x);
    }
    public static int descriptorBindingPartiallyBound$get(MemorySegment seg, long index) {
        return (int)constants$277.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingPartiallyBound$set(MemorySegment seg, long index, int x) {
        constants$277.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descriptorBindingVariableDescriptorCount$VH() {
        return constants$277.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 descriptorBindingVariableDescriptorCount;
     * }
     */
    public static int descriptorBindingVariableDescriptorCount$get(MemorySegment seg) {
        return (int)constants$277.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 descriptorBindingVariableDescriptorCount;
     * }
     */
    public static void descriptorBindingVariableDescriptorCount$set(MemorySegment seg, int x) {
        constants$277.const$5.set(seg, x);
    }
    public static int descriptorBindingVariableDescriptorCount$get(MemorySegment seg, long index) {
        return (int)constants$277.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void descriptorBindingVariableDescriptorCount$set(MemorySegment seg, long index, int x) {
        constants$277.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle runtimeDescriptorArray$VH() {
        return constants$278.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 runtimeDescriptorArray;
     * }
     */
    public static int runtimeDescriptorArray$get(MemorySegment seg) {
        return (int)constants$278.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 runtimeDescriptorArray;
     * }
     */
    public static void runtimeDescriptorArray$set(MemorySegment seg, int x) {
        constants$278.const$0.set(seg, x);
    }
    public static int runtimeDescriptorArray$get(MemorySegment seg, long index) {
        return (int)constants$278.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void runtimeDescriptorArray$set(MemorySegment seg, long index, int x) {
        constants$278.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samplerFilterMinmax$VH() {
        return constants$278.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 samplerFilterMinmax;
     * }
     */
    public static int samplerFilterMinmax$get(MemorySegment seg) {
        return (int)constants$278.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 samplerFilterMinmax;
     * }
     */
    public static void samplerFilterMinmax$set(MemorySegment seg, int x) {
        constants$278.const$1.set(seg, x);
    }
    public static int samplerFilterMinmax$get(MemorySegment seg, long index) {
        return (int)constants$278.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void samplerFilterMinmax$set(MemorySegment seg, long index, int x) {
        constants$278.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle scalarBlockLayout$VH() {
        return constants$278.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 scalarBlockLayout;
     * }
     */
    public static int scalarBlockLayout$get(MemorySegment seg) {
        return (int)constants$278.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 scalarBlockLayout;
     * }
     */
    public static void scalarBlockLayout$set(MemorySegment seg, int x) {
        constants$278.const$2.set(seg, x);
    }
    public static int scalarBlockLayout$get(MemorySegment seg, long index) {
        return (int)constants$278.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void scalarBlockLayout$set(MemorySegment seg, long index, int x) {
        constants$278.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imagelessFramebuffer$VH() {
        return constants$278.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 imagelessFramebuffer;
     * }
     */
    public static int imagelessFramebuffer$get(MemorySegment seg) {
        return (int)constants$278.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 imagelessFramebuffer;
     * }
     */
    public static void imagelessFramebuffer$set(MemorySegment seg, int x) {
        constants$278.const$3.set(seg, x);
    }
    public static int imagelessFramebuffer$get(MemorySegment seg, long index) {
        return (int)constants$278.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void imagelessFramebuffer$set(MemorySegment seg, long index, int x) {
        constants$278.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uniformBufferStandardLayout$VH() {
        return constants$278.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 uniformBufferStandardLayout;
     * }
     */
    public static int uniformBufferStandardLayout$get(MemorySegment seg) {
        return (int)constants$278.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 uniformBufferStandardLayout;
     * }
     */
    public static void uniformBufferStandardLayout$set(MemorySegment seg, int x) {
        constants$278.const$4.set(seg, x);
    }
    public static int uniformBufferStandardLayout$get(MemorySegment seg, long index) {
        return (int)constants$278.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void uniformBufferStandardLayout$set(MemorySegment seg, long index, int x) {
        constants$278.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderSubgroupExtendedTypes$VH() {
        return constants$278.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderSubgroupExtendedTypes;
     * }
     */
    public static int shaderSubgroupExtendedTypes$get(MemorySegment seg) {
        return (int)constants$278.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderSubgroupExtendedTypes;
     * }
     */
    public static void shaderSubgroupExtendedTypes$set(MemorySegment seg, int x) {
        constants$278.const$5.set(seg, x);
    }
    public static int shaderSubgroupExtendedTypes$get(MemorySegment seg, long index) {
        return (int)constants$278.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderSubgroupExtendedTypes$set(MemorySegment seg, long index, int x) {
        constants$278.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle separateDepthStencilLayouts$VH() {
        return constants$279.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 separateDepthStencilLayouts;
     * }
     */
    public static int separateDepthStencilLayouts$get(MemorySegment seg) {
        return (int)constants$279.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 separateDepthStencilLayouts;
     * }
     */
    public static void separateDepthStencilLayouts$set(MemorySegment seg, int x) {
        constants$279.const$0.set(seg, x);
    }
    public static int separateDepthStencilLayouts$get(MemorySegment seg, long index) {
        return (int)constants$279.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void separateDepthStencilLayouts$set(MemorySegment seg, long index, int x) {
        constants$279.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hostQueryReset$VH() {
        return constants$279.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 hostQueryReset;
     * }
     */
    public static int hostQueryReset$get(MemorySegment seg) {
        return (int)constants$279.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 hostQueryReset;
     * }
     */
    public static void hostQueryReset$set(MemorySegment seg, int x) {
        constants$279.const$1.set(seg, x);
    }
    public static int hostQueryReset$get(MemorySegment seg, long index) {
        return (int)constants$279.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hostQueryReset$set(MemorySegment seg, long index, int x) {
        constants$279.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timelineSemaphore$VH() {
        return constants$279.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 timelineSemaphore;
     * }
     */
    public static int timelineSemaphore$get(MemorySegment seg) {
        return (int)constants$279.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 timelineSemaphore;
     * }
     */
    public static void timelineSemaphore$set(MemorySegment seg, int x) {
        constants$279.const$2.set(seg, x);
    }
    public static int timelineSemaphore$get(MemorySegment seg, long index) {
        return (int)constants$279.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void timelineSemaphore$set(MemorySegment seg, long index, int x) {
        constants$279.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bufferDeviceAddress$VH() {
        return constants$279.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddress;
     * }
     */
    public static int bufferDeviceAddress$get(MemorySegment seg) {
        return (int)constants$279.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddress;
     * }
     */
    public static void bufferDeviceAddress$set(MemorySegment seg, int x) {
        constants$279.const$3.set(seg, x);
    }
    public static int bufferDeviceAddress$get(MemorySegment seg, long index) {
        return (int)constants$279.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferDeviceAddress$set(MemorySegment seg, long index, int x) {
        constants$279.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bufferDeviceAddressCaptureReplay$VH() {
        return constants$279.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddressCaptureReplay;
     * }
     */
    public static int bufferDeviceAddressCaptureReplay$get(MemorySegment seg) {
        return (int)constants$279.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddressCaptureReplay;
     * }
     */
    public static void bufferDeviceAddressCaptureReplay$set(MemorySegment seg, int x) {
        constants$279.const$4.set(seg, x);
    }
    public static int bufferDeviceAddressCaptureReplay$get(MemorySegment seg, long index) {
        return (int)constants$279.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferDeviceAddressCaptureReplay$set(MemorySegment seg, long index, int x) {
        constants$279.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bufferDeviceAddressMultiDevice$VH() {
        return constants$279.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddressMultiDevice;
     * }
     */
    public static int bufferDeviceAddressMultiDevice$get(MemorySegment seg) {
        return (int)constants$279.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 bufferDeviceAddressMultiDevice;
     * }
     */
    public static void bufferDeviceAddressMultiDevice$set(MemorySegment seg, int x) {
        constants$279.const$5.set(seg, x);
    }
    public static int bufferDeviceAddressMultiDevice$get(MemorySegment seg, long index) {
        return (int)constants$279.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferDeviceAddressMultiDevice$set(MemorySegment seg, long index, int x) {
        constants$279.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vulkanMemoryModel$VH() {
        return constants$280.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModel;
     * }
     */
    public static int vulkanMemoryModel$get(MemorySegment seg) {
        return (int)constants$280.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModel;
     * }
     */
    public static void vulkanMemoryModel$set(MemorySegment seg, int x) {
        constants$280.const$0.set(seg, x);
    }
    public static int vulkanMemoryModel$get(MemorySegment seg, long index) {
        return (int)constants$280.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void vulkanMemoryModel$set(MemorySegment seg, long index, int x) {
        constants$280.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vulkanMemoryModelDeviceScope$VH() {
        return constants$280.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModelDeviceScope;
     * }
     */
    public static int vulkanMemoryModelDeviceScope$get(MemorySegment seg) {
        return (int)constants$280.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModelDeviceScope;
     * }
     */
    public static void vulkanMemoryModelDeviceScope$set(MemorySegment seg, int x) {
        constants$280.const$1.set(seg, x);
    }
    public static int vulkanMemoryModelDeviceScope$get(MemorySegment seg, long index) {
        return (int)constants$280.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void vulkanMemoryModelDeviceScope$set(MemorySegment seg, long index, int x) {
        constants$280.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vulkanMemoryModelAvailabilityVisibilityChains$VH() {
        return constants$280.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
     * }
     */
    public static int vulkanMemoryModelAvailabilityVisibilityChains$get(MemorySegment seg) {
        return (int)constants$280.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
     * }
     */
    public static void vulkanMemoryModelAvailabilityVisibilityChains$set(MemorySegment seg, int x) {
        constants$280.const$2.set(seg, x);
    }
    public static int vulkanMemoryModelAvailabilityVisibilityChains$get(MemorySegment seg, long index) {
        return (int)constants$280.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void vulkanMemoryModelAvailabilityVisibilityChains$set(MemorySegment seg, long index, int x) {
        constants$280.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderOutputViewportIndex$VH() {
        return constants$280.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderOutputViewportIndex;
     * }
     */
    public static int shaderOutputViewportIndex$get(MemorySegment seg) {
        return (int)constants$280.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderOutputViewportIndex;
     * }
     */
    public static void shaderOutputViewportIndex$set(MemorySegment seg, int x) {
        constants$280.const$3.set(seg, x);
    }
    public static int shaderOutputViewportIndex$get(MemorySegment seg, long index) {
        return (int)constants$280.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderOutputViewportIndex$set(MemorySegment seg, long index, int x) {
        constants$280.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shaderOutputLayer$VH() {
        return constants$280.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 shaderOutputLayer;
     * }
     */
    public static int shaderOutputLayer$get(MemorySegment seg) {
        return (int)constants$280.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 shaderOutputLayer;
     * }
     */
    public static void shaderOutputLayer$set(MemorySegment seg, int x) {
        constants$280.const$4.set(seg, x);
    }
    public static int shaderOutputLayer$get(MemorySegment seg, long index) {
        return (int)constants$280.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void shaderOutputLayer$set(MemorySegment seg, long index, int x) {
        constants$280.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subgroupBroadcastDynamicId$VH() {
        return constants$280.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 subgroupBroadcastDynamicId;
     * }
     */
    public static int subgroupBroadcastDynamicId$get(MemorySegment seg) {
        return (int)constants$280.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 subgroupBroadcastDynamicId;
     * }
     */
    public static void subgroupBroadcastDynamicId$set(MemorySegment seg, int x) {
        constants$280.const$5.set(seg, x);
    }
    public static int subgroupBroadcastDynamicId$get(MemorySegment seg, long index) {
        return (int)constants$280.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void subgroupBroadcastDynamicId$set(MemorySegment seg, long index, int x) {
        constants$280.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


