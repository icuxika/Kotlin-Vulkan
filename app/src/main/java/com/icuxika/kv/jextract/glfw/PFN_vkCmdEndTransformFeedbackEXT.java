// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdEndTransformFeedbackEXT)(struct VkCommandBuffer_T* commandBuffer,unsigned int firstCounterBuffer,unsigned int counterBufferCount,struct VkBuffer_T** pCounterBuffers,unsigned long long* pCounterBufferOffsets);
 * }
 */
public interface PFN_vkCmdEndTransformFeedbackEXT {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int firstCounterBuffer, int counterBufferCount, java.lang.foreign.MemorySegment pCounterBuffers, java.lang.foreign.MemorySegment pCounterBufferOffsets);
    static MemorySegment allocate(PFN_vkCmdEndTransformFeedbackEXT fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$627.const$2, fi, constants$167.const$0, scope);
    }
    static PFN_vkCmdEndTransformFeedbackEXT ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _firstCounterBuffer, int _counterBufferCount, java.lang.foreign.MemorySegment _pCounterBuffers, java.lang.foreign.MemorySegment _pCounterBufferOffsets) -> {
            try {
                constants$167.const$2.invokeExact(symbol, _commandBuffer, _firstCounterBuffer, _counterBufferCount, _pCounterBuffers, _pCounterBufferOffsets);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


