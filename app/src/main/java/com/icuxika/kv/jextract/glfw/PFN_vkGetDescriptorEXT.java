// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkGetDescriptorEXT)(struct VkDevice_T* device,struct VkDescriptorGetInfoEXT* pDescriptorInfo,unsigned long long dataSize,void* pDescriptor);
 * }
 */
public interface PFN_vkGetDescriptorEXT {

    void apply(java.lang.foreign.MemorySegment device, java.lang.foreign.MemorySegment pDescriptorInfo, long dataSize, java.lang.foreign.MemorySegment pDescriptor);
    static MemorySegment allocate(PFN_vkGetDescriptorEXT fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$874.const$2, fi, constants$874.const$1, scope);
    }
    static PFN_vkGetDescriptorEXT ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _device, java.lang.foreign.MemorySegment _pDescriptorInfo, long _dataSize, java.lang.foreign.MemorySegment _pDescriptor) -> {
            try {
                constants$874.const$3.invokeExact(symbol, _device, _pDescriptorInfo, _dataSize, _pDescriptor);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


