// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_vkCmdDrawIndirectByteCountEXT)(struct VkCommandBuffer_T* commandBuffer,unsigned int instanceCount,unsigned int firstInstance,struct VkBuffer_T* counterBuffer,unsigned long long counterBufferOffset,unsigned int counterOffset,unsigned int vertexStride);
 * }
 */
public interface PFN_vkCmdDrawIndirectByteCountEXT {

    void apply(java.lang.foreign.MemorySegment commandBuffer, int instanceCount, int firstInstance, java.lang.foreign.MemorySegment counterBuffer, long counterBufferOffset, int counterOffset, int vertexStride);
    static MemorySegment allocate(PFN_vkCmdDrawIndirectByteCountEXT fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$628.const$2, fi, constants$628.const$1, scope);
    }
    static PFN_vkCmdDrawIndirectByteCountEXT ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _commandBuffer, int _instanceCount, int _firstInstance, java.lang.foreign.MemorySegment _counterBuffer, long _counterBufferOffset, int _counterOffset, int _vertexStride) -> {
            try {
                constants$628.const$3.invokeExact(symbol, _commandBuffer, _instanceCount, _firstInstance, _counterBuffer, _counterBufferOffset, _counterOffset, _vertexStride);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


