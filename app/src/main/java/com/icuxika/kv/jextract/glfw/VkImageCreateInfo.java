// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkImageCreateInfo {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkImageCreateFlags flags;
 *     VkImageType imageType;
 *     VkFormat format;
 *     VkExtent3D extent;
 *     uint32_t mipLevels;
 *     uint32_t arrayLayers;
 *     VkSampleCountFlagBits samples;
 *     VkImageTiling tiling;
 *     VkImageUsageFlags usage;
 *     VkSharingMode sharingMode;
 *     uint32_t queueFamilyIndexCount;
 *     const uint32_t* pQueueFamilyIndices;
 *     VkImageLayout initialLayout;
 * };
 * }
 */
public class VkImageCreateInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$73.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$73.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$73.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$73.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$73.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$73.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$74.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$74.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$74.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$74.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$74.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$74.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageCreateFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$74.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageCreateFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$74.const$1.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$74.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$74.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imageType$VH() {
        return constants$74.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageType imageType;
     * }
     */
    public static int imageType$get(MemorySegment seg) {
        return (int)constants$74.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageType imageType;
     * }
     */
    public static void imageType$set(MemorySegment seg, int x) {
        constants$74.const$2.set(seg, x);
    }
    public static int imageType$get(MemorySegment seg, long index) {
        return (int)constants$74.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void imageType$set(MemorySegment seg, long index, int x) {
        constants$74.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle format$VH() {
        return constants$74.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFormat format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$74.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFormat format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$74.const$3.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$74.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$74.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment extent$slice(MemorySegment seg) {
        return seg.asSlice(28, 12);
    }
    public static VarHandle mipLevels$VH() {
        return constants$74.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t mipLevels;
     * }
     */
    public static int mipLevels$get(MemorySegment seg) {
        return (int)constants$74.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t mipLevels;
     * }
     */
    public static void mipLevels$set(MemorySegment seg, int x) {
        constants$74.const$4.set(seg, x);
    }
    public static int mipLevels$get(MemorySegment seg, long index) {
        return (int)constants$74.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mipLevels$set(MemorySegment seg, long index, int x) {
        constants$74.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle arrayLayers$VH() {
        return constants$74.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t arrayLayers;
     * }
     */
    public static int arrayLayers$get(MemorySegment seg) {
        return (int)constants$74.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t arrayLayers;
     * }
     */
    public static void arrayLayers$set(MemorySegment seg, int x) {
        constants$74.const$5.set(seg, x);
    }
    public static int arrayLayers$get(MemorySegment seg, long index) {
        return (int)constants$74.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void arrayLayers$set(MemorySegment seg, long index, int x) {
        constants$74.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samples$VH() {
        return constants$75.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlagBits samples;
     * }
     */
    public static int samples$get(MemorySegment seg) {
        return (int)constants$75.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlagBits samples;
     * }
     */
    public static void samples$set(MemorySegment seg, int x) {
        constants$75.const$0.set(seg, x);
    }
    public static int samples$get(MemorySegment seg, long index) {
        return (int)constants$75.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void samples$set(MemorySegment seg, long index, int x) {
        constants$75.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiling$VH() {
        return constants$75.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageTiling tiling;
     * }
     */
    public static int tiling$get(MemorySegment seg) {
        return (int)constants$75.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageTiling tiling;
     * }
     */
    public static void tiling$set(MemorySegment seg, int x) {
        constants$75.const$1.set(seg, x);
    }
    public static int tiling$get(MemorySegment seg, long index) {
        return (int)constants$75.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tiling$set(MemorySegment seg, long index, int x) {
        constants$75.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle usage$VH() {
        return constants$75.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageUsageFlags usage;
     * }
     */
    public static int usage$get(MemorySegment seg) {
        return (int)constants$75.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageUsageFlags usage;
     * }
     */
    public static void usage$set(MemorySegment seg, int x) {
        constants$75.const$2.set(seg, x);
    }
    public static int usage$get(MemorySegment seg, long index) {
        return (int)constants$75.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void usage$set(MemorySegment seg, long index, int x) {
        constants$75.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sharingMode$VH() {
        return constants$75.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSharingMode sharingMode;
     * }
     */
    public static int sharingMode$get(MemorySegment seg) {
        return (int)constants$75.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSharingMode sharingMode;
     * }
     */
    public static void sharingMode$set(MemorySegment seg, int x) {
        constants$75.const$3.set(seg, x);
    }
    public static int sharingMode$get(MemorySegment seg, long index) {
        return (int)constants$75.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sharingMode$set(MemorySegment seg, long index, int x) {
        constants$75.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle queueFamilyIndexCount$VH() {
        return constants$75.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t queueFamilyIndexCount;
     * }
     */
    public static int queueFamilyIndexCount$get(MemorySegment seg) {
        return (int)constants$75.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t queueFamilyIndexCount;
     * }
     */
    public static void queueFamilyIndexCount$set(MemorySegment seg, int x) {
        constants$75.const$4.set(seg, x);
    }
    public static int queueFamilyIndexCount$get(MemorySegment seg, long index) {
        return (int)constants$75.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void queueFamilyIndexCount$set(MemorySegment seg, long index, int x) {
        constants$75.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pQueueFamilyIndices$VH() {
        return constants$75.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const uint32_t* pQueueFamilyIndices;
     * }
     */
    public static MemorySegment pQueueFamilyIndices$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$75.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const uint32_t* pQueueFamilyIndices;
     * }
     */
    public static void pQueueFamilyIndices$set(MemorySegment seg, MemorySegment x) {
        constants$75.const$5.set(seg, x);
    }
    public static MemorySegment pQueueFamilyIndices$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$75.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pQueueFamilyIndices$set(MemorySegment seg, long index, MemorySegment x) {
        constants$75.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle initialLayout$VH() {
        return constants$76.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageLayout initialLayout;
     * }
     */
    public static int initialLayout$get(MemorySegment seg) {
        return (int)constants$76.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageLayout initialLayout;
     * }
     */
    public static void initialLayout$set(MemorySegment seg, int x) {
        constants$76.const$0.set(seg, x);
    }
    public static int initialLayout$get(MemorySegment seg, long index) {
        return (int)constants$76.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void initialLayout$set(MemorySegment seg, long index, int x) {
        constants$76.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


