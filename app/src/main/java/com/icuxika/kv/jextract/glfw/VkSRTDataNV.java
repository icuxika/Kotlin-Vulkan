// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkSRTDataNV {
 *     float sx;
 *     float a;
 *     float b;
 *     float pvx;
 *     float sy;
 *     float c;
 *     float pvy;
 *     float sz;
 *     float pvz;
 *     float qx;
 *     float qy;
 *     float qz;
 *     float qw;
 *     float tx;
 *     float ty;
 *     float tz;
 * };
 * }
 */
public class VkSRTDataNV {

    public static MemoryLayout $LAYOUT() {
        return constants$886.const$0;
    }
    public static VarHandle sx$VH() {
        return constants$886.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float sx;
     * }
     */
    public static float sx$get(MemorySegment seg) {
        return (float)constants$886.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float sx;
     * }
     */
    public static void sx$set(MemorySegment seg, float x) {
        constants$886.const$1.set(seg, x);
    }
    public static float sx$get(MemorySegment seg, long index) {
        return (float)constants$886.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sx$set(MemorySegment seg, long index, float x) {
        constants$886.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle a$VH() {
        return constants$886.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float a;
     * }
     */
    public static float a$get(MemorySegment seg) {
        return (float)constants$886.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float a;
     * }
     */
    public static void a$set(MemorySegment seg, float x) {
        constants$886.const$2.set(seg, x);
    }
    public static float a$get(MemorySegment seg, long index) {
        return (float)constants$886.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void a$set(MemorySegment seg, long index, float x) {
        constants$886.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b$VH() {
        return constants$886.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float b;
     * }
     */
    public static float b$get(MemorySegment seg) {
        return (float)constants$886.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float b;
     * }
     */
    public static void b$set(MemorySegment seg, float x) {
        constants$886.const$3.set(seg, x);
    }
    public static float b$get(MemorySegment seg, long index) {
        return (float)constants$886.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, float x) {
        constants$886.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pvx$VH() {
        return constants$886.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float pvx;
     * }
     */
    public static float pvx$get(MemorySegment seg) {
        return (float)constants$886.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float pvx;
     * }
     */
    public static void pvx$set(MemorySegment seg, float x) {
        constants$886.const$4.set(seg, x);
    }
    public static float pvx$get(MemorySegment seg, long index) {
        return (float)constants$886.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pvx$set(MemorySegment seg, long index, float x) {
        constants$886.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sy$VH() {
        return constants$886.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float sy;
     * }
     */
    public static float sy$get(MemorySegment seg) {
        return (float)constants$886.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float sy;
     * }
     */
    public static void sy$set(MemorySegment seg, float x) {
        constants$886.const$5.set(seg, x);
    }
    public static float sy$get(MemorySegment seg, long index) {
        return (float)constants$886.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sy$set(MemorySegment seg, long index, float x) {
        constants$886.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle c$VH() {
        return constants$887.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float c;
     * }
     */
    public static float c$get(MemorySegment seg) {
        return (float)constants$887.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float c;
     * }
     */
    public static void c$set(MemorySegment seg, float x) {
        constants$887.const$0.set(seg, x);
    }
    public static float c$get(MemorySegment seg, long index) {
        return (float)constants$887.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void c$set(MemorySegment seg, long index, float x) {
        constants$887.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pvy$VH() {
        return constants$887.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float pvy;
     * }
     */
    public static float pvy$get(MemorySegment seg) {
        return (float)constants$887.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float pvy;
     * }
     */
    public static void pvy$set(MemorySegment seg, float x) {
        constants$887.const$1.set(seg, x);
    }
    public static float pvy$get(MemorySegment seg, long index) {
        return (float)constants$887.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pvy$set(MemorySegment seg, long index, float x) {
        constants$887.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sz$VH() {
        return constants$887.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float sz;
     * }
     */
    public static float sz$get(MemorySegment seg) {
        return (float)constants$887.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float sz;
     * }
     */
    public static void sz$set(MemorySegment seg, float x) {
        constants$887.const$2.set(seg, x);
    }
    public static float sz$get(MemorySegment seg, long index) {
        return (float)constants$887.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sz$set(MemorySegment seg, long index, float x) {
        constants$887.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pvz$VH() {
        return constants$887.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float pvz;
     * }
     */
    public static float pvz$get(MemorySegment seg) {
        return (float)constants$887.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float pvz;
     * }
     */
    public static void pvz$set(MemorySegment seg, float x) {
        constants$887.const$3.set(seg, x);
    }
    public static float pvz$get(MemorySegment seg, long index) {
        return (float)constants$887.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pvz$set(MemorySegment seg, long index, float x) {
        constants$887.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qx$VH() {
        return constants$887.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qx;
     * }
     */
    public static float qx$get(MemorySegment seg) {
        return (float)constants$887.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qx;
     * }
     */
    public static void qx$set(MemorySegment seg, float x) {
        constants$887.const$4.set(seg, x);
    }
    public static float qx$get(MemorySegment seg, long index) {
        return (float)constants$887.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void qx$set(MemorySegment seg, long index, float x) {
        constants$887.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qy$VH() {
        return constants$887.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qy;
     * }
     */
    public static float qy$get(MemorySegment seg) {
        return (float)constants$887.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qy;
     * }
     */
    public static void qy$set(MemorySegment seg, float x) {
        constants$887.const$5.set(seg, x);
    }
    public static float qy$get(MemorySegment seg, long index) {
        return (float)constants$887.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void qy$set(MemorySegment seg, long index, float x) {
        constants$887.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qz$VH() {
        return constants$888.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qz;
     * }
     */
    public static float qz$get(MemorySegment seg) {
        return (float)constants$888.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qz;
     * }
     */
    public static void qz$set(MemorySegment seg, float x) {
        constants$888.const$0.set(seg, x);
    }
    public static float qz$get(MemorySegment seg, long index) {
        return (float)constants$888.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void qz$set(MemorySegment seg, long index, float x) {
        constants$888.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qw$VH() {
        return constants$888.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qw;
     * }
     */
    public static float qw$get(MemorySegment seg) {
        return (float)constants$888.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qw;
     * }
     */
    public static void qw$set(MemorySegment seg, float x) {
        constants$888.const$1.set(seg, x);
    }
    public static float qw$get(MemorySegment seg, long index) {
        return (float)constants$888.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void qw$set(MemorySegment seg, long index, float x) {
        constants$888.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tx$VH() {
        return constants$888.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float tx;
     * }
     */
    public static float tx$get(MemorySegment seg) {
        return (float)constants$888.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float tx;
     * }
     */
    public static void tx$set(MemorySegment seg, float x) {
        constants$888.const$2.set(seg, x);
    }
    public static float tx$get(MemorySegment seg, long index) {
        return (float)constants$888.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tx$set(MemorySegment seg, long index, float x) {
        constants$888.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ty$VH() {
        return constants$888.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ty;
     * }
     */
    public static float ty$get(MemorySegment seg) {
        return (float)constants$888.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ty;
     * }
     */
    public static void ty$set(MemorySegment seg, float x) {
        constants$888.const$3.set(seg, x);
    }
    public static float ty$get(MemorySegment seg, long index) {
        return (float)constants$888.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ty$set(MemorySegment seg, long index, float x) {
        constants$888.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tz$VH() {
        return constants$888.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float tz;
     * }
     */
    public static float tz$get(MemorySegment seg) {
        return (float)constants$888.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float tz;
     * }
     */
    public static void tz$set(MemorySegment seg, float x) {
        constants$888.const$4.set(seg, x);
    }
    public static float tz$get(MemorySegment seg, long index) {
        return (float)constants$888.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void tz$set(MemorySegment seg, long index, float x) {
        constants$888.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


