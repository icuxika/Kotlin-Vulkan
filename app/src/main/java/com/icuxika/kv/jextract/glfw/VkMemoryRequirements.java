// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkMemoryRequirements {
 *     VkDeviceSize size;
 *     VkDeviceSize alignment;
 *     uint32_t memoryTypeBits;
 * };
 * }
 */
public class VkMemoryRequirements {

    public static MemoryLayout $LAYOUT() {
        return constants$59.const$1;
    }
    public static VarHandle size$VH() {
        return constants$59.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)constants$59.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$59.const$2.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)constants$59.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        constants$59.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle alignment$VH() {
        return constants$59.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize alignment;
     * }
     */
    public static long alignment$get(MemorySegment seg) {
        return (long)constants$59.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize alignment;
     * }
     */
    public static void alignment$set(MemorySegment seg, long x) {
        constants$59.const$3.set(seg, x);
    }
    public static long alignment$get(MemorySegment seg, long index) {
        return (long)constants$59.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void alignment$set(MemorySegment seg, long index, long x) {
        constants$59.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle memoryTypeBits$VH() {
        return constants$59.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t memoryTypeBits;
     * }
     */
    public static int memoryTypeBits$get(MemorySegment seg) {
        return (int)constants$59.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t memoryTypeBits;
     * }
     */
    public static void memoryTypeBits$set(MemorySegment seg, int x) {
        constants$59.const$4.set(seg, x);
    }
    public static int memoryTypeBits$get(MemorySegment seg, long index) {
        return (int)constants$59.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void memoryTypeBits$set(MemorySegment seg, long index, int x) {
        constants$59.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


