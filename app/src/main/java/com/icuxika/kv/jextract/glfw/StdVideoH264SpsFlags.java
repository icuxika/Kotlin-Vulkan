// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH264SpsFlags {
 *      *     uint32_t constraint_set0_flag;
 *     uint32_t constraint_set1_flag;
 *     uint32_t constraint_set2_flag;
 *     uint32_t constraint_set3_flag;
 *     uint32_t constraint_set4_flag;
 *     uint32_t constraint_set5_flag;
 *     uint32_t direct_8x8_inference_flag;
 *     uint32_t mb_adaptive_frame_field_flag;
 *     uint32_t frame_mbs_only_flag;
 *     uint32_t delta_pic_order_always_zero_flag;
 *     uint32_t separate_colour_plane_flag;
 *     uint32_t gaps_in_frame_num_value_allowed_flag;
 *     uint32_t qpprime_y_zero_transform_bypass_flag;
 *     uint32_t frame_cropping_flag;
 *     uint32_t seq_scaling_matrix_present_flag;
 *     uint32_t vui_parameters_present_flag;
 * };
 * }
 */
public class StdVideoH264SpsFlags {

    public static MemoryLayout $LAYOUT() {
        return constants$481.const$3;
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


