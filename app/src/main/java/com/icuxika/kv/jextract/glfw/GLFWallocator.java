// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct GLFWallocator {
 *     GLFWallocatefun allocate;
 *     GLFWreallocatefun reallocate;
 *     GLFWdeallocatefun deallocate;
 *     void* user;
 * };
 * }
 */
public class GLFWallocator {

    public static MemoryLayout $LAYOUT() {
        return constants$1157.const$3;
    }
    public static VarHandle allocate$VH() {
        return constants$1157.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GLFWallocatefun allocate;
     * }
     */
    public static MemorySegment allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1157.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GLFWallocatefun allocate;
     * }
     */
    public static void allocate$set(MemorySegment seg, MemorySegment x) {
        constants$1157.const$4.set(seg, x);
    }
    public static MemorySegment allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1157.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void allocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1157.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GLFWallocatefun allocate(MemorySegment segment, Arena scope) {
        return GLFWallocatefun.ofAddress(allocate$get(segment), scope);
    }
    public static VarHandle reallocate$VH() {
        return constants$1157.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GLFWreallocatefun reallocate;
     * }
     */
    public static MemorySegment reallocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1157.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GLFWreallocatefun reallocate;
     * }
     */
    public static void reallocate$set(MemorySegment seg, MemorySegment x) {
        constants$1157.const$5.set(seg, x);
    }
    public static MemorySegment reallocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1157.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reallocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1157.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GLFWreallocatefun reallocate(MemorySegment segment, Arena scope) {
        return GLFWreallocatefun.ofAddress(reallocate$get(segment), scope);
    }
    public static VarHandle deallocate$VH() {
        return constants$1158.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GLFWdeallocatefun deallocate;
     * }
     */
    public static MemorySegment deallocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1158.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GLFWdeallocatefun deallocate;
     * }
     */
    public static void deallocate$set(MemorySegment seg, MemorySegment x) {
        constants$1158.const$0.set(seg, x);
    }
    public static MemorySegment deallocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1158.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void deallocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1158.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static GLFWdeallocatefun deallocate(MemorySegment segment, Arena scope) {
        return GLFWdeallocatefun.ofAddress(deallocate$get(segment), scope);
    }
    public static VarHandle user$VH() {
        return constants$1158.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* user;
     * }
     */
    public static MemorySegment user$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1158.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* user;
     * }
     */
    public static void user$set(MemorySegment seg, MemorySegment x) {
        constants$1158.const$1.set(seg, x);
    }
    public static MemorySegment user$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1158.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void user$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1158.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


