// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum VkResult (*PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(struct VkPhysicalDevice_T* physicalDevice,unsigned int* pPropertyCount,struct VkCooperativeMatrixPropertiesNV* pProperties);
 * }
 */
public interface PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV {

    int apply(java.lang.foreign.MemorySegment device, java.lang.foreign.MemorySegment deferredOperation, java.lang.foreign.MemorySegment pInfo);
    static MemorySegment allocate(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$791.const$1, fi, constants$139.const$5, scope);
    }
    static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _device, java.lang.foreign.MemorySegment _deferredOperation, java.lang.foreign.MemorySegment _pInfo) -> {
            try {
                return (int)constants$140.const$1.invokeExact(symbol, _device, _deferredOperation, _pInfo);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


