// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkExtent2D minFragmentShadingRateAttachmentTexelSize;
 *     VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
 *     uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
 *     VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
 *     VkBool32 layeredShadingRateAttachments;
 *     VkBool32 fragmentShadingRateNonTrivialCombinerOps;
 *     VkExtent2D maxFragmentSize;
 *     uint32_t maxFragmentSizeAspectRatio;
 *     uint32_t maxFragmentShadingRateCoverageSamples;
 *     VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
 *     VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
 *     VkBool32 fragmentShadingRateWithSampleMask;
 *     VkBool32 fragmentShadingRateWithShaderSampleMask;
 *     VkBool32 fragmentShadingRateWithConservativeRasterization;
 *     VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
 *     VkBool32 fragmentShadingRateWithCustomSampleLocations;
 *     VkBool32 fragmentShadingRateStrictMultiplyCombiner;
 * };
 * }
 */
public class VkPhysicalDeviceFragmentShadingRatePropertiesKHR {

    public static MemoryLayout $LAYOUT() {
        return constants$576.const$5;
    }
    public static VarHandle sType$VH() {
        return constants$577.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$577.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$577.const$0.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$577.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$577.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$577.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$577.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$577.const$1.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$577.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$577.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment minFragmentShadingRateAttachmentTexelSize$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment maxFragmentShadingRateAttachmentTexelSize$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static VarHandle maxFragmentShadingRateAttachmentTexelSizeAspectRatio$VH() {
        return constants$577.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
     * }
     */
    public static int maxFragmentShadingRateAttachmentTexelSizeAspectRatio$get(MemorySegment seg) {
        return (int)constants$577.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
     * }
     */
    public static void maxFragmentShadingRateAttachmentTexelSizeAspectRatio$set(MemorySegment seg, int x) {
        constants$577.const$2.set(seg, x);
    }
    public static int maxFragmentShadingRateAttachmentTexelSizeAspectRatio$get(MemorySegment seg, long index) {
        return (int)constants$577.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentShadingRateAttachmentTexelSizeAspectRatio$set(MemorySegment seg, long index, int x) {
        constants$577.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle primitiveFragmentShadingRateWithMultipleViewports$VH() {
        return constants$577.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
     * }
     */
    public static int primitiveFragmentShadingRateWithMultipleViewports$get(MemorySegment seg) {
        return (int)constants$577.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
     * }
     */
    public static void primitiveFragmentShadingRateWithMultipleViewports$set(MemorySegment seg, int x) {
        constants$577.const$3.set(seg, x);
    }
    public static int primitiveFragmentShadingRateWithMultipleViewports$get(MemorySegment seg, long index) {
        return (int)constants$577.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void primitiveFragmentShadingRateWithMultipleViewports$set(MemorySegment seg, long index, int x) {
        constants$577.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle layeredShadingRateAttachments$VH() {
        return constants$577.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 layeredShadingRateAttachments;
     * }
     */
    public static int layeredShadingRateAttachments$get(MemorySegment seg) {
        return (int)constants$577.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 layeredShadingRateAttachments;
     * }
     */
    public static void layeredShadingRateAttachments$set(MemorySegment seg, int x) {
        constants$577.const$4.set(seg, x);
    }
    public static int layeredShadingRateAttachments$get(MemorySegment seg, long index) {
        return (int)constants$577.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void layeredShadingRateAttachments$set(MemorySegment seg, long index, int x) {
        constants$577.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateNonTrivialCombinerOps$VH() {
        return constants$577.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateNonTrivialCombinerOps;
     * }
     */
    public static int fragmentShadingRateNonTrivialCombinerOps$get(MemorySegment seg) {
        return (int)constants$577.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateNonTrivialCombinerOps;
     * }
     */
    public static void fragmentShadingRateNonTrivialCombinerOps$set(MemorySegment seg, int x) {
        constants$577.const$5.set(seg, x);
    }
    public static int fragmentShadingRateNonTrivialCombinerOps$get(MemorySegment seg, long index) {
        return (int)constants$577.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateNonTrivialCombinerOps$set(MemorySegment seg, long index, int x) {
        constants$577.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment maxFragmentSize$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static VarHandle maxFragmentSizeAspectRatio$VH() {
        return constants$578.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentSizeAspectRatio;
     * }
     */
    public static int maxFragmentSizeAspectRatio$get(MemorySegment seg) {
        return (int)constants$578.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentSizeAspectRatio;
     * }
     */
    public static void maxFragmentSizeAspectRatio$set(MemorySegment seg, int x) {
        constants$578.const$0.set(seg, x);
    }
    public static int maxFragmentSizeAspectRatio$get(MemorySegment seg, long index) {
        return (int)constants$578.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentSizeAspectRatio$set(MemorySegment seg, long index, int x) {
        constants$578.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentShadingRateCoverageSamples$VH() {
        return constants$578.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentShadingRateCoverageSamples;
     * }
     */
    public static int maxFragmentShadingRateCoverageSamples$get(MemorySegment seg) {
        return (int)constants$578.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentShadingRateCoverageSamples;
     * }
     */
    public static void maxFragmentShadingRateCoverageSamples$set(MemorySegment seg, int x) {
        constants$578.const$1.set(seg, x);
    }
    public static int maxFragmentShadingRateCoverageSamples$get(MemorySegment seg, long index) {
        return (int)constants$578.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentShadingRateCoverageSamples$set(MemorySegment seg, long index, int x) {
        constants$578.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentShadingRateRasterizationSamples$VH() {
        return constants$578.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
     * }
     */
    public static int maxFragmentShadingRateRasterizationSamples$get(MemorySegment seg) {
        return (int)constants$578.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
     * }
     */
    public static void maxFragmentShadingRateRasterizationSamples$set(MemorySegment seg, int x) {
        constants$578.const$2.set(seg, x);
    }
    public static int maxFragmentShadingRateRasterizationSamples$get(MemorySegment seg, long index) {
        return (int)constants$578.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentShadingRateRasterizationSamples$set(MemorySegment seg, long index, int x) {
        constants$578.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithShaderDepthStencilWrites$VH() {
        return constants$578.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
     * }
     */
    public static int fragmentShadingRateWithShaderDepthStencilWrites$get(MemorySegment seg) {
        return (int)constants$578.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
     * }
     */
    public static void fragmentShadingRateWithShaderDepthStencilWrites$set(MemorySegment seg, int x) {
        constants$578.const$3.set(seg, x);
    }
    public static int fragmentShadingRateWithShaderDepthStencilWrites$get(MemorySegment seg, long index) {
        return (int)constants$578.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithShaderDepthStencilWrites$set(MemorySegment seg, long index, int x) {
        constants$578.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithSampleMask$VH() {
        return constants$578.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithSampleMask;
     * }
     */
    public static int fragmentShadingRateWithSampleMask$get(MemorySegment seg) {
        return (int)constants$578.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithSampleMask;
     * }
     */
    public static void fragmentShadingRateWithSampleMask$set(MemorySegment seg, int x) {
        constants$578.const$4.set(seg, x);
    }
    public static int fragmentShadingRateWithSampleMask$get(MemorySegment seg, long index) {
        return (int)constants$578.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithSampleMask$set(MemorySegment seg, long index, int x) {
        constants$578.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithShaderSampleMask$VH() {
        return constants$578.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithShaderSampleMask;
     * }
     */
    public static int fragmentShadingRateWithShaderSampleMask$get(MemorySegment seg) {
        return (int)constants$578.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithShaderSampleMask;
     * }
     */
    public static void fragmentShadingRateWithShaderSampleMask$set(MemorySegment seg, int x) {
        constants$578.const$5.set(seg, x);
    }
    public static int fragmentShadingRateWithShaderSampleMask$get(MemorySegment seg, long index) {
        return (int)constants$578.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithShaderSampleMask$set(MemorySegment seg, long index, int x) {
        constants$578.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithConservativeRasterization$VH() {
        return constants$579.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithConservativeRasterization;
     * }
     */
    public static int fragmentShadingRateWithConservativeRasterization$get(MemorySegment seg) {
        return (int)constants$579.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithConservativeRasterization;
     * }
     */
    public static void fragmentShadingRateWithConservativeRasterization$set(MemorySegment seg, int x) {
        constants$579.const$0.set(seg, x);
    }
    public static int fragmentShadingRateWithConservativeRasterization$get(MemorySegment seg, long index) {
        return (int)constants$579.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithConservativeRasterization$set(MemorySegment seg, long index, int x) {
        constants$579.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithFragmentShaderInterlock$VH() {
        return constants$579.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
     * }
     */
    public static int fragmentShadingRateWithFragmentShaderInterlock$get(MemorySegment seg) {
        return (int)constants$579.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
     * }
     */
    public static void fragmentShadingRateWithFragmentShaderInterlock$set(MemorySegment seg, int x) {
        constants$579.const$1.set(seg, x);
    }
    public static int fragmentShadingRateWithFragmentShaderInterlock$get(MemorySegment seg, long index) {
        return (int)constants$579.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithFragmentShaderInterlock$set(MemorySegment seg, long index, int x) {
        constants$579.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateWithCustomSampleLocations$VH() {
        return constants$579.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithCustomSampleLocations;
     * }
     */
    public static int fragmentShadingRateWithCustomSampleLocations$get(MemorySegment seg) {
        return (int)constants$579.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateWithCustomSampleLocations;
     * }
     */
    public static void fragmentShadingRateWithCustomSampleLocations$set(MemorySegment seg, int x) {
        constants$579.const$2.set(seg, x);
    }
    public static int fragmentShadingRateWithCustomSampleLocations$get(MemorySegment seg, long index) {
        return (int)constants$579.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateWithCustomSampleLocations$set(MemorySegment seg, long index, int x) {
        constants$579.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fragmentShadingRateStrictMultiplyCombiner$VH() {
        return constants$579.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateStrictMultiplyCombiner;
     * }
     */
    public static int fragmentShadingRateStrictMultiplyCombiner$get(MemorySegment seg) {
        return (int)constants$579.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 fragmentShadingRateStrictMultiplyCombiner;
     * }
     */
    public static void fragmentShadingRateStrictMultiplyCombiner$set(MemorySegment seg, int x) {
        constants$579.const$3.set(seg, x);
    }
    public static int fragmentShadingRateStrictMultiplyCombiner$get(MemorySegment seg, long index) {
        return (int)constants$579.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentShadingRateStrictMultiplyCombiner$set(MemorySegment seg, long index, int x) {
        constants$579.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


