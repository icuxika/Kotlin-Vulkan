// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPipelineDepthStencilStateCreateInfo {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkPipelineDepthStencilStateCreateFlags flags;
 *     VkBool32 depthTestEnable;
 *     VkBool32 depthWriteEnable;
 *     VkCompareOp depthCompareOp;
 *     VkBool32 depthBoundsTestEnable;
 *     VkBool32 stencilTestEnable;
 *     VkStencilOpState front;
 *     VkStencilOpState back;
 *     float minDepthBounds;
 *     float maxDepthBounds;
 * };
 * }
 */
public class VkPipelineDepthStencilStateCreateInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$97.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$97.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$97.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$97.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$97.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$97.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$98.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$98.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$98.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$98.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$98.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$98.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineDepthStencilStateCreateFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$98.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineDepthStencilStateCreateFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$98.const$1.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$98.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$98.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthTestEnable$VH() {
        return constants$98.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthTestEnable;
     * }
     */
    public static int depthTestEnable$get(MemorySegment seg) {
        return (int)constants$98.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthTestEnable;
     * }
     */
    public static void depthTestEnable$set(MemorySegment seg, int x) {
        constants$98.const$2.set(seg, x);
    }
    public static int depthTestEnable$get(MemorySegment seg, long index) {
        return (int)constants$98.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void depthTestEnable$set(MemorySegment seg, long index, int x) {
        constants$98.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthWriteEnable$VH() {
        return constants$98.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthWriteEnable;
     * }
     */
    public static int depthWriteEnable$get(MemorySegment seg) {
        return (int)constants$98.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthWriteEnable;
     * }
     */
    public static void depthWriteEnable$set(MemorySegment seg, int x) {
        constants$98.const$3.set(seg, x);
    }
    public static int depthWriteEnable$get(MemorySegment seg, long index) {
        return (int)constants$98.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void depthWriteEnable$set(MemorySegment seg, long index, int x) {
        constants$98.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthCompareOp$VH() {
        return constants$98.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkCompareOp depthCompareOp;
     * }
     */
    public static int depthCompareOp$get(MemorySegment seg) {
        return (int)constants$98.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkCompareOp depthCompareOp;
     * }
     */
    public static void depthCompareOp$set(MemorySegment seg, int x) {
        constants$98.const$4.set(seg, x);
    }
    public static int depthCompareOp$get(MemorySegment seg, long index) {
        return (int)constants$98.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void depthCompareOp$set(MemorySegment seg, long index, int x) {
        constants$98.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depthBoundsTestEnable$VH() {
        return constants$98.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 depthBoundsTestEnable;
     * }
     */
    public static int depthBoundsTestEnable$get(MemorySegment seg) {
        return (int)constants$98.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 depthBoundsTestEnable;
     * }
     */
    public static void depthBoundsTestEnable$set(MemorySegment seg, int x) {
        constants$98.const$5.set(seg, x);
    }
    public static int depthBoundsTestEnable$get(MemorySegment seg, long index) {
        return (int)constants$98.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void depthBoundsTestEnable$set(MemorySegment seg, long index, int x) {
        constants$98.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stencilTestEnable$VH() {
        return constants$99.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 stencilTestEnable;
     * }
     */
    public static int stencilTestEnable$get(MemorySegment seg) {
        return (int)constants$99.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 stencilTestEnable;
     * }
     */
    public static void stencilTestEnable$set(MemorySegment seg, int x) {
        constants$99.const$0.set(seg, x);
    }
    public static int stencilTestEnable$get(MemorySegment seg, long index) {
        return (int)constants$99.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void stencilTestEnable$set(MemorySegment seg, long index, int x) {
        constants$99.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment front$slice(MemorySegment seg) {
        return seg.asSlice(40, 28);
    }
    public static MemorySegment back$slice(MemorySegment seg) {
        return seg.asSlice(68, 28);
    }
    public static VarHandle minDepthBounds$VH() {
        return constants$99.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minDepthBounds;
     * }
     */
    public static float minDepthBounds$get(MemorySegment seg) {
        return (float)constants$99.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minDepthBounds;
     * }
     */
    public static void minDepthBounds$set(MemorySegment seg, float x) {
        constants$99.const$1.set(seg, x);
    }
    public static float minDepthBounds$get(MemorySegment seg, long index) {
        return (float)constants$99.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void minDepthBounds$set(MemorySegment seg, long index, float x) {
        constants$99.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDepthBounds$VH() {
        return constants$99.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxDepthBounds;
     * }
     */
    public static float maxDepthBounds$get(MemorySegment seg) {
        return (float)constants$99.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxDepthBounds;
     * }
     */
    public static void maxDepthBounds$set(MemorySegment seg, float x) {
        constants$99.const$2.set(seg, x);
    }
    public static float maxDepthBounds$get(MemorySegment seg, long index) {
        return (float)constants$99.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDepthBounds$set(MemorySegment seg, long index, float x) {
        constants$99.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


