// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
 *     VkConservativeRasterizationModeEXT conservativeRasterizationMode;
 *     float extraPrimitiveOverestimationSize;
 * };
 * }
 */
public class VkPipelineRasterizationConservativeStateCreateInfoEXT {

    public static MemoryLayout $LAYOUT() {
        return constants$672.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$672.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$672.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$672.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$672.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$672.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$673.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$673.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$673.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$673.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$673.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$673.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$673.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$673.const$1.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$673.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$673.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle conservativeRasterizationMode$VH() {
        return constants$673.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkConservativeRasterizationModeEXT conservativeRasterizationMode;
     * }
     */
    public static int conservativeRasterizationMode$get(MemorySegment seg) {
        return (int)constants$673.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkConservativeRasterizationModeEXT conservativeRasterizationMode;
     * }
     */
    public static void conservativeRasterizationMode$set(MemorySegment seg, int x) {
        constants$673.const$2.set(seg, x);
    }
    public static int conservativeRasterizationMode$get(MemorySegment seg, long index) {
        return (int)constants$673.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void conservativeRasterizationMode$set(MemorySegment seg, long index, int x) {
        constants$673.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extraPrimitiveOverestimationSize$VH() {
        return constants$673.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float extraPrimitiveOverestimationSize;
     * }
     */
    public static float extraPrimitiveOverestimationSize$get(MemorySegment seg) {
        return (float)constants$673.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float extraPrimitiveOverestimationSize;
     * }
     */
    public static void extraPrimitiveOverestimationSize$set(MemorySegment seg, float x) {
        constants$673.const$3.set(seg, x);
    }
    public static float extraPrimitiveOverestimationSize$get(MemorySegment seg, long index) {
        return (float)constants$673.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void extraPrimitiveOverestimationSize$set(MemorySegment seg, long index, float x) {
        constants$673.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


