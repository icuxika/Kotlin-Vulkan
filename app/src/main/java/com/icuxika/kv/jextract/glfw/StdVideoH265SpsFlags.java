// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265SpsFlags {
 *      *     uint32_t sps_temporal_id_nesting_flag;
 *     uint32_t separate_colour_plane_flag;
 *     uint32_t conformance_window_flag;
 *     uint32_t sps_sub_layer_ordering_info_present_flag;
 *     uint32_t scaling_list_enabled_flag;
 *     uint32_t sps_scaling_list_data_present_flag;
 *     uint32_t amp_enabled_flag;
 *     uint32_t sample_adaptive_offset_enabled_flag;
 *     uint32_t pcm_enabled_flag;
 *     uint32_t pcm_loop_filter_disabled_flag;
 *     uint32_t long_term_ref_pics_present_flag;
 *     uint32_t sps_temporal_mvp_enabled_flag;
 *     uint32_t strong_intra_smoothing_enabled_flag;
 *     uint32_t vui_parameters_present_flag;
 *     uint32_t sps_extension_present_flag;
 *     uint32_t sps_range_extension_flag;
 *     uint32_t transform_skip_rotation_enabled_flag;
 *     uint32_t transform_skip_context_enabled_flag;
 *     uint32_t implicit_rdpcm_enabled_flag;
 *     uint32_t explicit_rdpcm_enabled_flag;
 *     uint32_t extended_precision_processing_flag;
 *     uint32_t intra_smoothing_disabled_flag;
 *     uint32_t high_precision_offsets_enabled_flag;
 *     uint32_t persistent_rice_adaptation_enabled_flag;
 *     uint32_t cabac_bypass_alignment_enabled_flag;
 *     uint32_t sps_scc_extension_flag;
 *     uint32_t sps_curr_pic_ref_enabled_flag;
 *     uint32_t palette_mode_enabled_flag;
 *     uint32_t sps_palette_predictor_initializers_present_flag;
 *     uint32_t intra_boundary_filtering_disabled_flag;
 * };
 * }
 */
public class StdVideoH265SpsFlags {

    public static MemoryLayout $LAYOUT() {
        return constants$549.const$2;
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


