// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkAttachmentDescription {
 *     VkAttachmentDescriptionFlags flags;
 *     VkFormat format;
 *     VkSampleCountFlagBits samples;
 *     VkAttachmentLoadOp loadOp;
 *     VkAttachmentStoreOp storeOp;
 *     VkAttachmentLoadOp stencilLoadOp;
 *     VkAttachmentStoreOp stencilStoreOp;
 *     VkImageLayout initialLayout;
 *     VkImageLayout finalLayout;
 * };
 * }
 */
public class VkAttachmentDescription {

    public static MemoryLayout $LAYOUT() {
        return constants$121.const$2;
    }
    public static VarHandle flags$VH() {
        return constants$121.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAttachmentDescriptionFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$121.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAttachmentDescriptionFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$121.const$3.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$121.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$121.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle format$VH() {
        return constants$121.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFormat format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$121.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFormat format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$121.const$4.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$121.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$121.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samples$VH() {
        return constants$121.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlagBits samples;
     * }
     */
    public static int samples$get(MemorySegment seg) {
        return (int)constants$121.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlagBits samples;
     * }
     */
    public static void samples$set(MemorySegment seg, int x) {
        constants$121.const$5.set(seg, x);
    }
    public static int samples$get(MemorySegment seg, long index) {
        return (int)constants$121.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void samples$set(MemorySegment seg, long index, int x) {
        constants$121.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle loadOp$VH() {
        return constants$122.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAttachmentLoadOp loadOp;
     * }
     */
    public static int loadOp$get(MemorySegment seg) {
        return (int)constants$122.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAttachmentLoadOp loadOp;
     * }
     */
    public static void loadOp$set(MemorySegment seg, int x) {
        constants$122.const$0.set(seg, x);
    }
    public static int loadOp$get(MemorySegment seg, long index) {
        return (int)constants$122.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void loadOp$set(MemorySegment seg, long index, int x) {
        constants$122.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle storeOp$VH() {
        return constants$122.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAttachmentStoreOp storeOp;
     * }
     */
    public static int storeOp$get(MemorySegment seg) {
        return (int)constants$122.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAttachmentStoreOp storeOp;
     * }
     */
    public static void storeOp$set(MemorySegment seg, int x) {
        constants$122.const$1.set(seg, x);
    }
    public static int storeOp$get(MemorySegment seg, long index) {
        return (int)constants$122.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void storeOp$set(MemorySegment seg, long index, int x) {
        constants$122.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stencilLoadOp$VH() {
        return constants$122.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAttachmentLoadOp stencilLoadOp;
     * }
     */
    public static int stencilLoadOp$get(MemorySegment seg) {
        return (int)constants$122.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAttachmentLoadOp stencilLoadOp;
     * }
     */
    public static void stencilLoadOp$set(MemorySegment seg, int x) {
        constants$122.const$2.set(seg, x);
    }
    public static int stencilLoadOp$get(MemorySegment seg, long index) {
        return (int)constants$122.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void stencilLoadOp$set(MemorySegment seg, long index, int x) {
        constants$122.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stencilStoreOp$VH() {
        return constants$122.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkAttachmentStoreOp stencilStoreOp;
     * }
     */
    public static int stencilStoreOp$get(MemorySegment seg) {
        return (int)constants$122.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkAttachmentStoreOp stencilStoreOp;
     * }
     */
    public static void stencilStoreOp$set(MemorySegment seg, int x) {
        constants$122.const$3.set(seg, x);
    }
    public static int stencilStoreOp$get(MemorySegment seg, long index) {
        return (int)constants$122.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void stencilStoreOp$set(MemorySegment seg, long index, int x) {
        constants$122.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle initialLayout$VH() {
        return constants$122.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageLayout initialLayout;
     * }
     */
    public static int initialLayout$get(MemorySegment seg) {
        return (int)constants$122.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageLayout initialLayout;
     * }
     */
    public static void initialLayout$set(MemorySegment seg, int x) {
        constants$122.const$4.set(seg, x);
    }
    public static int initialLayout$get(MemorySegment seg, long index) {
        return (int)constants$122.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void initialLayout$set(MemorySegment seg, long index, int x) {
        constants$122.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle finalLayout$VH() {
        return constants$122.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkImageLayout finalLayout;
     * }
     */
    public static int finalLayout$get(MemorySegment seg) {
        return (int)constants$122.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkImageLayout finalLayout;
     * }
     */
    public static void finalLayout$set(MemorySegment seg, int x) {
        constants$122.const$5.set(seg, x);
    }
    public static int finalLayout$get(MemorySegment seg, long index) {
        return (int)constants$122.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void finalLayout$set(MemorySegment seg, long index, int x) {
        constants$122.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


