// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void* (*PFN_vkAllocationFunction)(void* pUserData,unsigned long long size,unsigned long long alignment,enum VkSystemAllocationScope allocationScope);
 * }
 */
public interface PFN_vkAllocationFunction {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pUserData, long size, long alignment, int allocationScope);
    static MemorySegment allocate(PFN_vkAllocationFunction fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$13.const$4, fi, constants$13.const$3, scope);
    }
    static PFN_vkAllocationFunction ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _pUserData, long _size, long _alignment, int _allocationScope) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$13.const$5.invokeExact(symbol, _pUserData, _size, _alignment, _allocationScope);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


