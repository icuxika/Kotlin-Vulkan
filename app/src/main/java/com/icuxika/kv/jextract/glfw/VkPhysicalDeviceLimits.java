// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkPhysicalDeviceLimits {
 *     uint32_t maxImageDimension1D;
 *     uint32_t maxImageDimension2D;
 *     uint32_t maxImageDimension3D;
 *     uint32_t maxImageDimensionCube;
 *     uint32_t maxImageArrayLayers;
 *     uint32_t maxTexelBufferElements;
 *     uint32_t maxUniformBufferRange;
 *     uint32_t maxStorageBufferRange;
 *     uint32_t maxPushConstantsSize;
 *     uint32_t maxMemoryAllocationCount;
 *     uint32_t maxSamplerAllocationCount;
 *     VkDeviceSize bufferImageGranularity;
 *     VkDeviceSize sparseAddressSpaceSize;
 *     uint32_t maxBoundDescriptorSets;
 *     uint32_t maxPerStageDescriptorSamplers;
 *     uint32_t maxPerStageDescriptorUniformBuffers;
 *     uint32_t maxPerStageDescriptorStorageBuffers;
 *     uint32_t maxPerStageDescriptorSampledImages;
 *     uint32_t maxPerStageDescriptorStorageImages;
 *     uint32_t maxPerStageDescriptorInputAttachments;
 *     uint32_t maxPerStageResources;
 *     uint32_t maxDescriptorSetSamplers;
 *     uint32_t maxDescriptorSetUniformBuffers;
 *     uint32_t maxDescriptorSetUniformBuffersDynamic;
 *     uint32_t maxDescriptorSetStorageBuffers;
 *     uint32_t maxDescriptorSetStorageBuffersDynamic;
 *     uint32_t maxDescriptorSetSampledImages;
 *     uint32_t maxDescriptorSetStorageImages;
 *     uint32_t maxDescriptorSetInputAttachments;
 *     uint32_t maxVertexInputAttributes;
 *     uint32_t maxVertexInputBindings;
 *     uint32_t maxVertexInputAttributeOffset;
 *     uint32_t maxVertexInputBindingStride;
 *     uint32_t maxVertexOutputComponents;
 *     uint32_t maxTessellationGenerationLevel;
 *     uint32_t maxTessellationPatchSize;
 *     uint32_t maxTessellationControlPerVertexInputComponents;
 *     uint32_t maxTessellationControlPerVertexOutputComponents;
 *     uint32_t maxTessellationControlPerPatchOutputComponents;
 *     uint32_t maxTessellationControlTotalOutputComponents;
 *     uint32_t maxTessellationEvaluationInputComponents;
 *     uint32_t maxTessellationEvaluationOutputComponents;
 *     uint32_t maxGeometryShaderInvocations;
 *     uint32_t maxGeometryInputComponents;
 *     uint32_t maxGeometryOutputComponents;
 *     uint32_t maxGeometryOutputVertices;
 *     uint32_t maxGeometryTotalOutputComponents;
 *     uint32_t maxFragmentInputComponents;
 *     uint32_t maxFragmentOutputAttachments;
 *     uint32_t maxFragmentDualSrcAttachments;
 *     uint32_t maxFragmentCombinedOutputResources;
 *     uint32_t maxComputeSharedMemorySize;
 *     uint32_t maxComputeWorkGroupCount[3];
 *     uint32_t maxComputeWorkGroupInvocations;
 *     uint32_t maxComputeWorkGroupSize[3];
 *     uint32_t subPixelPrecisionBits;
 *     uint32_t subTexelPrecisionBits;
 *     uint32_t mipmapPrecisionBits;
 *     uint32_t maxDrawIndexedIndexValue;
 *     uint32_t maxDrawIndirectCount;
 *     float maxSamplerLodBias;
 *     float maxSamplerAnisotropy;
 *     uint32_t maxViewports;
 *     uint32_t maxViewportDimensions[2];
 *     float viewportBoundsRange[2];
 *     uint32_t viewportSubPixelBits;
 *     size_t minMemoryMapAlignment;
 *     VkDeviceSize minTexelBufferOffsetAlignment;
 *     VkDeviceSize minUniformBufferOffsetAlignment;
 *     VkDeviceSize minStorageBufferOffsetAlignment;
 *     int32_t minTexelOffset;
 *     uint32_t maxTexelOffset;
 *     int32_t minTexelGatherOffset;
 *     uint32_t maxTexelGatherOffset;
 *     float minInterpolationOffset;
 *     float maxInterpolationOffset;
 *     uint32_t subPixelInterpolationOffsetBits;
 *     uint32_t maxFramebufferWidth;
 *     uint32_t maxFramebufferHeight;
 *     uint32_t maxFramebufferLayers;
 *     VkSampleCountFlags framebufferColorSampleCounts;
 *     VkSampleCountFlags framebufferDepthSampleCounts;
 *     VkSampleCountFlags framebufferStencilSampleCounts;
 *     VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
 *     uint32_t maxColorAttachments;
 *     VkSampleCountFlags sampledImageColorSampleCounts;
 *     VkSampleCountFlags sampledImageIntegerSampleCounts;
 *     VkSampleCountFlags sampledImageDepthSampleCounts;
 *     VkSampleCountFlags sampledImageStencilSampleCounts;
 *     VkSampleCountFlags storageImageSampleCounts;
 *     uint32_t maxSampleMaskWords;
 *     VkBool32 timestampComputeAndGraphics;
 *     float timestampPeriod;
 *     uint32_t maxClipDistances;
 *     uint32_t maxCullDistances;
 *     uint32_t maxCombinedClipAndCullDistances;
 *     uint32_t discreteQueuePriorities;
 *     float pointSizeRange[2];
 *     float lineWidthRange[2];
 *     float pointSizeGranularity;
 *     float lineWidthGranularity;
 *     VkBool32 strictLines;
 *     VkBool32 standardSampleLocations;
 *     VkDeviceSize optimalBufferCopyOffsetAlignment;
 *     VkDeviceSize optimalBufferCopyRowPitchAlignment;
 *     VkDeviceSize nonCoherentAtomSize;
 * };
 * }
 */
public class VkPhysicalDeviceLimits {

    public static MemoryLayout $LAYOUT() {
        return constants$31.const$5;
    }
    public static VarHandle maxImageDimension1D$VH() {
        return constants$32.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageDimension1D;
     * }
     */
    public static int maxImageDimension1D$get(MemorySegment seg) {
        return (int)constants$32.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageDimension1D;
     * }
     */
    public static void maxImageDimension1D$set(MemorySegment seg, int x) {
        constants$32.const$0.set(seg, x);
    }
    public static int maxImageDimension1D$get(MemorySegment seg, long index) {
        return (int)constants$32.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageDimension1D$set(MemorySegment seg, long index, int x) {
        constants$32.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxImageDimension2D$VH() {
        return constants$32.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageDimension2D;
     * }
     */
    public static int maxImageDimension2D$get(MemorySegment seg) {
        return (int)constants$32.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageDimension2D;
     * }
     */
    public static void maxImageDimension2D$set(MemorySegment seg, int x) {
        constants$32.const$1.set(seg, x);
    }
    public static int maxImageDimension2D$get(MemorySegment seg, long index) {
        return (int)constants$32.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageDimension2D$set(MemorySegment seg, long index, int x) {
        constants$32.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxImageDimension3D$VH() {
        return constants$32.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageDimension3D;
     * }
     */
    public static int maxImageDimension3D$get(MemorySegment seg) {
        return (int)constants$32.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageDimension3D;
     * }
     */
    public static void maxImageDimension3D$set(MemorySegment seg, int x) {
        constants$32.const$2.set(seg, x);
    }
    public static int maxImageDimension3D$get(MemorySegment seg, long index) {
        return (int)constants$32.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageDimension3D$set(MemorySegment seg, long index, int x) {
        constants$32.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxImageDimensionCube$VH() {
        return constants$32.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageDimensionCube;
     * }
     */
    public static int maxImageDimensionCube$get(MemorySegment seg) {
        return (int)constants$32.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageDimensionCube;
     * }
     */
    public static void maxImageDimensionCube$set(MemorySegment seg, int x) {
        constants$32.const$3.set(seg, x);
    }
    public static int maxImageDimensionCube$get(MemorySegment seg, long index) {
        return (int)constants$32.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageDimensionCube$set(MemorySegment seg, long index, int x) {
        constants$32.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxImageArrayLayers$VH() {
        return constants$32.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxImageArrayLayers;
     * }
     */
    public static int maxImageArrayLayers$get(MemorySegment seg) {
        return (int)constants$32.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxImageArrayLayers;
     * }
     */
    public static void maxImageArrayLayers$set(MemorySegment seg, int x) {
        constants$32.const$4.set(seg, x);
    }
    public static int maxImageArrayLayers$get(MemorySegment seg, long index) {
        return (int)constants$32.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxImageArrayLayers$set(MemorySegment seg, long index, int x) {
        constants$32.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTexelBufferElements$VH() {
        return constants$32.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTexelBufferElements;
     * }
     */
    public static int maxTexelBufferElements$get(MemorySegment seg) {
        return (int)constants$32.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTexelBufferElements;
     * }
     */
    public static void maxTexelBufferElements$set(MemorySegment seg, int x) {
        constants$32.const$5.set(seg, x);
    }
    public static int maxTexelBufferElements$get(MemorySegment seg, long index) {
        return (int)constants$32.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTexelBufferElements$set(MemorySegment seg, long index, int x) {
        constants$32.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxUniformBufferRange$VH() {
        return constants$33.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxUniformBufferRange;
     * }
     */
    public static int maxUniformBufferRange$get(MemorySegment seg) {
        return (int)constants$33.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxUniformBufferRange;
     * }
     */
    public static void maxUniformBufferRange$set(MemorySegment seg, int x) {
        constants$33.const$0.set(seg, x);
    }
    public static int maxUniformBufferRange$get(MemorySegment seg, long index) {
        return (int)constants$33.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxUniformBufferRange$set(MemorySegment seg, long index, int x) {
        constants$33.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxStorageBufferRange$VH() {
        return constants$33.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxStorageBufferRange;
     * }
     */
    public static int maxStorageBufferRange$get(MemorySegment seg) {
        return (int)constants$33.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxStorageBufferRange;
     * }
     */
    public static void maxStorageBufferRange$set(MemorySegment seg, int x) {
        constants$33.const$1.set(seg, x);
    }
    public static int maxStorageBufferRange$get(MemorySegment seg, long index) {
        return (int)constants$33.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxStorageBufferRange$set(MemorySegment seg, long index, int x) {
        constants$33.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPushConstantsSize$VH() {
        return constants$33.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPushConstantsSize;
     * }
     */
    public static int maxPushConstantsSize$get(MemorySegment seg) {
        return (int)constants$33.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPushConstantsSize;
     * }
     */
    public static void maxPushConstantsSize$set(MemorySegment seg, int x) {
        constants$33.const$2.set(seg, x);
    }
    public static int maxPushConstantsSize$get(MemorySegment seg, long index) {
        return (int)constants$33.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPushConstantsSize$set(MemorySegment seg, long index, int x) {
        constants$33.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxMemoryAllocationCount$VH() {
        return constants$33.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxMemoryAllocationCount;
     * }
     */
    public static int maxMemoryAllocationCount$get(MemorySegment seg) {
        return (int)constants$33.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxMemoryAllocationCount;
     * }
     */
    public static void maxMemoryAllocationCount$set(MemorySegment seg, int x) {
        constants$33.const$3.set(seg, x);
    }
    public static int maxMemoryAllocationCount$get(MemorySegment seg, long index) {
        return (int)constants$33.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxMemoryAllocationCount$set(MemorySegment seg, long index, int x) {
        constants$33.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxSamplerAllocationCount$VH() {
        return constants$33.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxSamplerAllocationCount;
     * }
     */
    public static int maxSamplerAllocationCount$get(MemorySegment seg) {
        return (int)constants$33.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxSamplerAllocationCount;
     * }
     */
    public static void maxSamplerAllocationCount$set(MemorySegment seg, int x) {
        constants$33.const$4.set(seg, x);
    }
    public static int maxSamplerAllocationCount$get(MemorySegment seg, long index) {
        return (int)constants$33.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxSamplerAllocationCount$set(MemorySegment seg, long index, int x) {
        constants$33.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bufferImageGranularity$VH() {
        return constants$33.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize bufferImageGranularity;
     * }
     */
    public static long bufferImageGranularity$get(MemorySegment seg) {
        return (long)constants$33.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize bufferImageGranularity;
     * }
     */
    public static void bufferImageGranularity$set(MemorySegment seg, long x) {
        constants$33.const$5.set(seg, x);
    }
    public static long bufferImageGranularity$get(MemorySegment seg, long index) {
        return (long)constants$33.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferImageGranularity$set(MemorySegment seg, long index, long x) {
        constants$33.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sparseAddressSpaceSize$VH() {
        return constants$34.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize sparseAddressSpaceSize;
     * }
     */
    public static long sparseAddressSpaceSize$get(MemorySegment seg) {
        return (long)constants$34.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize sparseAddressSpaceSize;
     * }
     */
    public static void sparseAddressSpaceSize$set(MemorySegment seg, long x) {
        constants$34.const$0.set(seg, x);
    }
    public static long sparseAddressSpaceSize$get(MemorySegment seg, long index) {
        return (long)constants$34.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sparseAddressSpaceSize$set(MemorySegment seg, long index, long x) {
        constants$34.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxBoundDescriptorSets$VH() {
        return constants$34.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxBoundDescriptorSets;
     * }
     */
    public static int maxBoundDescriptorSets$get(MemorySegment seg) {
        return (int)constants$34.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxBoundDescriptorSets;
     * }
     */
    public static void maxBoundDescriptorSets$set(MemorySegment seg, int x) {
        constants$34.const$1.set(seg, x);
    }
    public static int maxBoundDescriptorSets$get(MemorySegment seg, long index) {
        return (int)constants$34.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxBoundDescriptorSets$set(MemorySegment seg, long index, int x) {
        constants$34.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorSamplers$VH() {
        return constants$34.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorSamplers;
     * }
     */
    public static int maxPerStageDescriptorSamplers$get(MemorySegment seg) {
        return (int)constants$34.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorSamplers;
     * }
     */
    public static void maxPerStageDescriptorSamplers$set(MemorySegment seg, int x) {
        constants$34.const$2.set(seg, x);
    }
    public static int maxPerStageDescriptorSamplers$get(MemorySegment seg, long index) {
        return (int)constants$34.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorSamplers$set(MemorySegment seg, long index, int x) {
        constants$34.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorUniformBuffers$VH() {
        return constants$34.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUniformBuffers;
     * }
     */
    public static int maxPerStageDescriptorUniformBuffers$get(MemorySegment seg) {
        return (int)constants$34.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorUniformBuffers;
     * }
     */
    public static void maxPerStageDescriptorUniformBuffers$set(MemorySegment seg, int x) {
        constants$34.const$3.set(seg, x);
    }
    public static int maxPerStageDescriptorUniformBuffers$get(MemorySegment seg, long index) {
        return (int)constants$34.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorUniformBuffers$set(MemorySegment seg, long index, int x) {
        constants$34.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorStorageBuffers$VH() {
        return constants$34.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorStorageBuffers;
     * }
     */
    public static int maxPerStageDescriptorStorageBuffers$get(MemorySegment seg) {
        return (int)constants$34.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorStorageBuffers;
     * }
     */
    public static void maxPerStageDescriptorStorageBuffers$set(MemorySegment seg, int x) {
        constants$34.const$4.set(seg, x);
    }
    public static int maxPerStageDescriptorStorageBuffers$get(MemorySegment seg, long index) {
        return (int)constants$34.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorStorageBuffers$set(MemorySegment seg, long index, int x) {
        constants$34.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorSampledImages$VH() {
        return constants$34.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorSampledImages;
     * }
     */
    public static int maxPerStageDescriptorSampledImages$get(MemorySegment seg) {
        return (int)constants$34.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorSampledImages;
     * }
     */
    public static void maxPerStageDescriptorSampledImages$set(MemorySegment seg, int x) {
        constants$34.const$5.set(seg, x);
    }
    public static int maxPerStageDescriptorSampledImages$get(MemorySegment seg, long index) {
        return (int)constants$34.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorSampledImages$set(MemorySegment seg, long index, int x) {
        constants$34.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorStorageImages$VH() {
        return constants$35.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorStorageImages;
     * }
     */
    public static int maxPerStageDescriptorStorageImages$get(MemorySegment seg) {
        return (int)constants$35.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorStorageImages;
     * }
     */
    public static void maxPerStageDescriptorStorageImages$set(MemorySegment seg, int x) {
        constants$35.const$0.set(seg, x);
    }
    public static int maxPerStageDescriptorStorageImages$get(MemorySegment seg, long index) {
        return (int)constants$35.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorStorageImages$set(MemorySegment seg, long index, int x) {
        constants$35.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageDescriptorInputAttachments$VH() {
        return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorInputAttachments;
     * }
     */
    public static int maxPerStageDescriptorInputAttachments$get(MemorySegment seg) {
        return (int)constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageDescriptorInputAttachments;
     * }
     */
    public static void maxPerStageDescriptorInputAttachments$set(MemorySegment seg, int x) {
        constants$35.const$1.set(seg, x);
    }
    public static int maxPerStageDescriptorInputAttachments$get(MemorySegment seg, long index) {
        return (int)constants$35.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageDescriptorInputAttachments$set(MemorySegment seg, long index, int x) {
        constants$35.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxPerStageResources$VH() {
        return constants$35.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxPerStageResources;
     * }
     */
    public static int maxPerStageResources$get(MemorySegment seg) {
        return (int)constants$35.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxPerStageResources;
     * }
     */
    public static void maxPerStageResources$set(MemorySegment seg, int x) {
        constants$35.const$2.set(seg, x);
    }
    public static int maxPerStageResources$get(MemorySegment seg, long index) {
        return (int)constants$35.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxPerStageResources$set(MemorySegment seg, long index, int x) {
        constants$35.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetSamplers$VH() {
        return constants$35.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetSamplers;
     * }
     */
    public static int maxDescriptorSetSamplers$get(MemorySegment seg) {
        return (int)constants$35.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetSamplers;
     * }
     */
    public static void maxDescriptorSetSamplers$set(MemorySegment seg, int x) {
        constants$35.const$3.set(seg, x);
    }
    public static int maxDescriptorSetSamplers$get(MemorySegment seg, long index) {
        return (int)constants$35.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetSamplers$set(MemorySegment seg, long index, int x) {
        constants$35.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUniformBuffers$VH() {
        return constants$35.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUniformBuffers;
     * }
     */
    public static int maxDescriptorSetUniformBuffers$get(MemorySegment seg) {
        return (int)constants$35.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUniformBuffers;
     * }
     */
    public static void maxDescriptorSetUniformBuffers$set(MemorySegment seg, int x) {
        constants$35.const$4.set(seg, x);
    }
    public static int maxDescriptorSetUniformBuffers$get(MemorySegment seg, long index) {
        return (int)constants$35.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUniformBuffers$set(MemorySegment seg, long index, int x) {
        constants$35.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetUniformBuffersDynamic$VH() {
        return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUniformBuffersDynamic;
     * }
     */
    public static int maxDescriptorSetUniformBuffersDynamic$get(MemorySegment seg) {
        return (int)constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetUniformBuffersDynamic;
     * }
     */
    public static void maxDescriptorSetUniformBuffersDynamic$set(MemorySegment seg, int x) {
        constants$35.const$5.set(seg, x);
    }
    public static int maxDescriptorSetUniformBuffersDynamic$get(MemorySegment seg, long index) {
        return (int)constants$35.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetUniformBuffersDynamic$set(MemorySegment seg, long index, int x) {
        constants$35.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetStorageBuffers$VH() {
        return constants$36.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageBuffers;
     * }
     */
    public static int maxDescriptorSetStorageBuffers$get(MemorySegment seg) {
        return (int)constants$36.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageBuffers;
     * }
     */
    public static void maxDescriptorSetStorageBuffers$set(MemorySegment seg, int x) {
        constants$36.const$0.set(seg, x);
    }
    public static int maxDescriptorSetStorageBuffers$get(MemorySegment seg, long index) {
        return (int)constants$36.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetStorageBuffers$set(MemorySegment seg, long index, int x) {
        constants$36.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetStorageBuffersDynamic$VH() {
        return constants$36.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageBuffersDynamic;
     * }
     */
    public static int maxDescriptorSetStorageBuffersDynamic$get(MemorySegment seg) {
        return (int)constants$36.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageBuffersDynamic;
     * }
     */
    public static void maxDescriptorSetStorageBuffersDynamic$set(MemorySegment seg, int x) {
        constants$36.const$1.set(seg, x);
    }
    public static int maxDescriptorSetStorageBuffersDynamic$get(MemorySegment seg, long index) {
        return (int)constants$36.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetStorageBuffersDynamic$set(MemorySegment seg, long index, int x) {
        constants$36.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetSampledImages$VH() {
        return constants$36.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetSampledImages;
     * }
     */
    public static int maxDescriptorSetSampledImages$get(MemorySegment seg) {
        return (int)constants$36.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetSampledImages;
     * }
     */
    public static void maxDescriptorSetSampledImages$set(MemorySegment seg, int x) {
        constants$36.const$2.set(seg, x);
    }
    public static int maxDescriptorSetSampledImages$get(MemorySegment seg, long index) {
        return (int)constants$36.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetSampledImages$set(MemorySegment seg, long index, int x) {
        constants$36.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetStorageImages$VH() {
        return constants$36.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageImages;
     * }
     */
    public static int maxDescriptorSetStorageImages$get(MemorySegment seg) {
        return (int)constants$36.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetStorageImages;
     * }
     */
    public static void maxDescriptorSetStorageImages$set(MemorySegment seg, int x) {
        constants$36.const$3.set(seg, x);
    }
    public static int maxDescriptorSetStorageImages$get(MemorySegment seg, long index) {
        return (int)constants$36.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetStorageImages$set(MemorySegment seg, long index, int x) {
        constants$36.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDescriptorSetInputAttachments$VH() {
        return constants$36.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetInputAttachments;
     * }
     */
    public static int maxDescriptorSetInputAttachments$get(MemorySegment seg) {
        return (int)constants$36.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDescriptorSetInputAttachments;
     * }
     */
    public static void maxDescriptorSetInputAttachments$set(MemorySegment seg, int x) {
        constants$36.const$4.set(seg, x);
    }
    public static int maxDescriptorSetInputAttachments$get(MemorySegment seg, long index) {
        return (int)constants$36.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDescriptorSetInputAttachments$set(MemorySegment seg, long index, int x) {
        constants$36.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxVertexInputAttributes$VH() {
        return constants$36.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxVertexInputAttributes;
     * }
     */
    public static int maxVertexInputAttributes$get(MemorySegment seg) {
        return (int)constants$36.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxVertexInputAttributes;
     * }
     */
    public static void maxVertexInputAttributes$set(MemorySegment seg, int x) {
        constants$36.const$5.set(seg, x);
    }
    public static int maxVertexInputAttributes$get(MemorySegment seg, long index) {
        return (int)constants$36.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxVertexInputAttributes$set(MemorySegment seg, long index, int x) {
        constants$36.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxVertexInputBindings$VH() {
        return constants$37.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxVertexInputBindings;
     * }
     */
    public static int maxVertexInputBindings$get(MemorySegment seg) {
        return (int)constants$37.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxVertexInputBindings;
     * }
     */
    public static void maxVertexInputBindings$set(MemorySegment seg, int x) {
        constants$37.const$0.set(seg, x);
    }
    public static int maxVertexInputBindings$get(MemorySegment seg, long index) {
        return (int)constants$37.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxVertexInputBindings$set(MemorySegment seg, long index, int x) {
        constants$37.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxVertexInputAttributeOffset$VH() {
        return constants$37.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxVertexInputAttributeOffset;
     * }
     */
    public static int maxVertexInputAttributeOffset$get(MemorySegment seg) {
        return (int)constants$37.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxVertexInputAttributeOffset;
     * }
     */
    public static void maxVertexInputAttributeOffset$set(MemorySegment seg, int x) {
        constants$37.const$1.set(seg, x);
    }
    public static int maxVertexInputAttributeOffset$get(MemorySegment seg, long index) {
        return (int)constants$37.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxVertexInputAttributeOffset$set(MemorySegment seg, long index, int x) {
        constants$37.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxVertexInputBindingStride$VH() {
        return constants$37.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxVertexInputBindingStride;
     * }
     */
    public static int maxVertexInputBindingStride$get(MemorySegment seg) {
        return (int)constants$37.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxVertexInputBindingStride;
     * }
     */
    public static void maxVertexInputBindingStride$set(MemorySegment seg, int x) {
        constants$37.const$2.set(seg, x);
    }
    public static int maxVertexInputBindingStride$get(MemorySegment seg, long index) {
        return (int)constants$37.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxVertexInputBindingStride$set(MemorySegment seg, long index, int x) {
        constants$37.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxVertexOutputComponents$VH() {
        return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxVertexOutputComponents;
     * }
     */
    public static int maxVertexOutputComponents$get(MemorySegment seg) {
        return (int)constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxVertexOutputComponents;
     * }
     */
    public static void maxVertexOutputComponents$set(MemorySegment seg, int x) {
        constants$37.const$3.set(seg, x);
    }
    public static int maxVertexOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$37.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxVertexOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$37.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationGenerationLevel$VH() {
        return constants$37.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationGenerationLevel;
     * }
     */
    public static int maxTessellationGenerationLevel$get(MemorySegment seg) {
        return (int)constants$37.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationGenerationLevel;
     * }
     */
    public static void maxTessellationGenerationLevel$set(MemorySegment seg, int x) {
        constants$37.const$4.set(seg, x);
    }
    public static int maxTessellationGenerationLevel$get(MemorySegment seg, long index) {
        return (int)constants$37.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationGenerationLevel$set(MemorySegment seg, long index, int x) {
        constants$37.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationPatchSize$VH() {
        return constants$37.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationPatchSize;
     * }
     */
    public static int maxTessellationPatchSize$get(MemorySegment seg) {
        return (int)constants$37.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationPatchSize;
     * }
     */
    public static void maxTessellationPatchSize$set(MemorySegment seg, int x) {
        constants$37.const$5.set(seg, x);
    }
    public static int maxTessellationPatchSize$get(MemorySegment seg, long index) {
        return (int)constants$37.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationPatchSize$set(MemorySegment seg, long index, int x) {
        constants$37.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationControlPerVertexInputComponents$VH() {
        return constants$38.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerVertexInputComponents;
     * }
     */
    public static int maxTessellationControlPerVertexInputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerVertexInputComponents;
     * }
     */
    public static void maxTessellationControlPerVertexInputComponents$set(MemorySegment seg, int x) {
        constants$38.const$0.set(seg, x);
    }
    public static int maxTessellationControlPerVertexInputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationControlPerVertexInputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationControlPerVertexOutputComponents$VH() {
        return constants$38.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerVertexOutputComponents;
     * }
     */
    public static int maxTessellationControlPerVertexOutputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerVertexOutputComponents;
     * }
     */
    public static void maxTessellationControlPerVertexOutputComponents$set(MemorySegment seg, int x) {
        constants$38.const$1.set(seg, x);
    }
    public static int maxTessellationControlPerVertexOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationControlPerVertexOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationControlPerPatchOutputComponents$VH() {
        return constants$38.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerPatchOutputComponents;
     * }
     */
    public static int maxTessellationControlPerPatchOutputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationControlPerPatchOutputComponents;
     * }
     */
    public static void maxTessellationControlPerPatchOutputComponents$set(MemorySegment seg, int x) {
        constants$38.const$2.set(seg, x);
    }
    public static int maxTessellationControlPerPatchOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationControlPerPatchOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationControlTotalOutputComponents$VH() {
        return constants$38.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationControlTotalOutputComponents;
     * }
     */
    public static int maxTessellationControlTotalOutputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationControlTotalOutputComponents;
     * }
     */
    public static void maxTessellationControlTotalOutputComponents$set(MemorySegment seg, int x) {
        constants$38.const$3.set(seg, x);
    }
    public static int maxTessellationControlTotalOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationControlTotalOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationEvaluationInputComponents$VH() {
        return constants$38.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationEvaluationInputComponents;
     * }
     */
    public static int maxTessellationEvaluationInputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationEvaluationInputComponents;
     * }
     */
    public static void maxTessellationEvaluationInputComponents$set(MemorySegment seg, int x) {
        constants$38.const$4.set(seg, x);
    }
    public static int maxTessellationEvaluationInputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationEvaluationInputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTessellationEvaluationOutputComponents$VH() {
        return constants$38.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTessellationEvaluationOutputComponents;
     * }
     */
    public static int maxTessellationEvaluationOutputComponents$get(MemorySegment seg) {
        return (int)constants$38.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTessellationEvaluationOutputComponents;
     * }
     */
    public static void maxTessellationEvaluationOutputComponents$set(MemorySegment seg, int x) {
        constants$38.const$5.set(seg, x);
    }
    public static int maxTessellationEvaluationOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$38.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTessellationEvaluationOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$38.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryShaderInvocations$VH() {
        return constants$39.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxGeometryShaderInvocations;
     * }
     */
    public static int maxGeometryShaderInvocations$get(MemorySegment seg) {
        return (int)constants$39.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxGeometryShaderInvocations;
     * }
     */
    public static void maxGeometryShaderInvocations$set(MemorySegment seg, int x) {
        constants$39.const$0.set(seg, x);
    }
    public static int maxGeometryShaderInvocations$get(MemorySegment seg, long index) {
        return (int)constants$39.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryShaderInvocations$set(MemorySegment seg, long index, int x) {
        constants$39.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryInputComponents$VH() {
        return constants$39.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxGeometryInputComponents;
     * }
     */
    public static int maxGeometryInputComponents$get(MemorySegment seg) {
        return (int)constants$39.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxGeometryInputComponents;
     * }
     */
    public static void maxGeometryInputComponents$set(MemorySegment seg, int x) {
        constants$39.const$1.set(seg, x);
    }
    public static int maxGeometryInputComponents$get(MemorySegment seg, long index) {
        return (int)constants$39.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryInputComponents$set(MemorySegment seg, long index, int x) {
        constants$39.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryOutputComponents$VH() {
        return constants$39.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxGeometryOutputComponents;
     * }
     */
    public static int maxGeometryOutputComponents$get(MemorySegment seg) {
        return (int)constants$39.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxGeometryOutputComponents;
     * }
     */
    public static void maxGeometryOutputComponents$set(MemorySegment seg, int x) {
        constants$39.const$2.set(seg, x);
    }
    public static int maxGeometryOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$39.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$39.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryOutputVertices$VH() {
        return constants$39.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxGeometryOutputVertices;
     * }
     */
    public static int maxGeometryOutputVertices$get(MemorySegment seg) {
        return (int)constants$39.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxGeometryOutputVertices;
     * }
     */
    public static void maxGeometryOutputVertices$set(MemorySegment seg, int x) {
        constants$39.const$3.set(seg, x);
    }
    public static int maxGeometryOutputVertices$get(MemorySegment seg, long index) {
        return (int)constants$39.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryOutputVertices$set(MemorySegment seg, long index, int x) {
        constants$39.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxGeometryTotalOutputComponents$VH() {
        return constants$39.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxGeometryTotalOutputComponents;
     * }
     */
    public static int maxGeometryTotalOutputComponents$get(MemorySegment seg) {
        return (int)constants$39.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxGeometryTotalOutputComponents;
     * }
     */
    public static void maxGeometryTotalOutputComponents$set(MemorySegment seg, int x) {
        constants$39.const$4.set(seg, x);
    }
    public static int maxGeometryTotalOutputComponents$get(MemorySegment seg, long index) {
        return (int)constants$39.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxGeometryTotalOutputComponents$set(MemorySegment seg, long index, int x) {
        constants$39.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentInputComponents$VH() {
        return constants$39.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentInputComponents;
     * }
     */
    public static int maxFragmentInputComponents$get(MemorySegment seg) {
        return (int)constants$39.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentInputComponents;
     * }
     */
    public static void maxFragmentInputComponents$set(MemorySegment seg, int x) {
        constants$39.const$5.set(seg, x);
    }
    public static int maxFragmentInputComponents$get(MemorySegment seg, long index) {
        return (int)constants$39.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentInputComponents$set(MemorySegment seg, long index, int x) {
        constants$39.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentOutputAttachments$VH() {
        return constants$40.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentOutputAttachments;
     * }
     */
    public static int maxFragmentOutputAttachments$get(MemorySegment seg) {
        return (int)constants$40.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentOutputAttachments;
     * }
     */
    public static void maxFragmentOutputAttachments$set(MemorySegment seg, int x) {
        constants$40.const$0.set(seg, x);
    }
    public static int maxFragmentOutputAttachments$get(MemorySegment seg, long index) {
        return (int)constants$40.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentOutputAttachments$set(MemorySegment seg, long index, int x) {
        constants$40.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentDualSrcAttachments$VH() {
        return constants$40.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentDualSrcAttachments;
     * }
     */
    public static int maxFragmentDualSrcAttachments$get(MemorySegment seg) {
        return (int)constants$40.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentDualSrcAttachments;
     * }
     */
    public static void maxFragmentDualSrcAttachments$set(MemorySegment seg, int x) {
        constants$40.const$1.set(seg, x);
    }
    public static int maxFragmentDualSrcAttachments$get(MemorySegment seg, long index) {
        return (int)constants$40.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentDualSrcAttachments$set(MemorySegment seg, long index, int x) {
        constants$40.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFragmentCombinedOutputResources$VH() {
        return constants$40.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFragmentCombinedOutputResources;
     * }
     */
    public static int maxFragmentCombinedOutputResources$get(MemorySegment seg) {
        return (int)constants$40.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFragmentCombinedOutputResources;
     * }
     */
    public static void maxFragmentCombinedOutputResources$set(MemorySegment seg, int x) {
        constants$40.const$2.set(seg, x);
    }
    public static int maxFragmentCombinedOutputResources$get(MemorySegment seg, long index) {
        return (int)constants$40.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFragmentCombinedOutputResources$set(MemorySegment seg, long index, int x) {
        constants$40.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxComputeSharedMemorySize$VH() {
        return constants$40.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxComputeSharedMemorySize;
     * }
     */
    public static int maxComputeSharedMemorySize$get(MemorySegment seg) {
        return (int)constants$40.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxComputeSharedMemorySize;
     * }
     */
    public static void maxComputeSharedMemorySize$set(MemorySegment seg, int x) {
        constants$40.const$3.set(seg, x);
    }
    public static int maxComputeSharedMemorySize$get(MemorySegment seg, long index) {
        return (int)constants$40.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxComputeSharedMemorySize$set(MemorySegment seg, long index, int x) {
        constants$40.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment maxComputeWorkGroupCount$slice(MemorySegment seg) {
        return seg.asSlice(220, 12);
    }
    public static VarHandle maxComputeWorkGroupInvocations$VH() {
        return constants$40.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxComputeWorkGroupInvocations;
     * }
     */
    public static int maxComputeWorkGroupInvocations$get(MemorySegment seg) {
        return (int)constants$40.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxComputeWorkGroupInvocations;
     * }
     */
    public static void maxComputeWorkGroupInvocations$set(MemorySegment seg, int x) {
        constants$40.const$4.set(seg, x);
    }
    public static int maxComputeWorkGroupInvocations$get(MemorySegment seg, long index) {
        return (int)constants$40.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxComputeWorkGroupInvocations$set(MemorySegment seg, long index, int x) {
        constants$40.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment maxComputeWorkGroupSize$slice(MemorySegment seg) {
        return seg.asSlice(236, 12);
    }
    public static VarHandle subPixelPrecisionBits$VH() {
        return constants$40.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t subPixelPrecisionBits;
     * }
     */
    public static int subPixelPrecisionBits$get(MemorySegment seg) {
        return (int)constants$40.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t subPixelPrecisionBits;
     * }
     */
    public static void subPixelPrecisionBits$set(MemorySegment seg, int x) {
        constants$40.const$5.set(seg, x);
    }
    public static int subPixelPrecisionBits$get(MemorySegment seg, long index) {
        return (int)constants$40.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void subPixelPrecisionBits$set(MemorySegment seg, long index, int x) {
        constants$40.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subTexelPrecisionBits$VH() {
        return constants$41.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t subTexelPrecisionBits;
     * }
     */
    public static int subTexelPrecisionBits$get(MemorySegment seg) {
        return (int)constants$41.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t subTexelPrecisionBits;
     * }
     */
    public static void subTexelPrecisionBits$set(MemorySegment seg, int x) {
        constants$41.const$0.set(seg, x);
    }
    public static int subTexelPrecisionBits$get(MemorySegment seg, long index) {
        return (int)constants$41.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void subTexelPrecisionBits$set(MemorySegment seg, long index, int x) {
        constants$41.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mipmapPrecisionBits$VH() {
        return constants$41.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t mipmapPrecisionBits;
     * }
     */
    public static int mipmapPrecisionBits$get(MemorySegment seg) {
        return (int)constants$41.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t mipmapPrecisionBits;
     * }
     */
    public static void mipmapPrecisionBits$set(MemorySegment seg, int x) {
        constants$41.const$1.set(seg, x);
    }
    public static int mipmapPrecisionBits$get(MemorySegment seg, long index) {
        return (int)constants$41.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void mipmapPrecisionBits$set(MemorySegment seg, long index, int x) {
        constants$41.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDrawIndexedIndexValue$VH() {
        return constants$41.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDrawIndexedIndexValue;
     * }
     */
    public static int maxDrawIndexedIndexValue$get(MemorySegment seg) {
        return (int)constants$41.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDrawIndexedIndexValue;
     * }
     */
    public static void maxDrawIndexedIndexValue$set(MemorySegment seg, int x) {
        constants$41.const$2.set(seg, x);
    }
    public static int maxDrawIndexedIndexValue$get(MemorySegment seg, long index) {
        return (int)constants$41.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDrawIndexedIndexValue$set(MemorySegment seg, long index, int x) {
        constants$41.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxDrawIndirectCount$VH() {
        return constants$41.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxDrawIndirectCount;
     * }
     */
    public static int maxDrawIndirectCount$get(MemorySegment seg) {
        return (int)constants$41.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxDrawIndirectCount;
     * }
     */
    public static void maxDrawIndirectCount$set(MemorySegment seg, int x) {
        constants$41.const$3.set(seg, x);
    }
    public static int maxDrawIndirectCount$get(MemorySegment seg, long index) {
        return (int)constants$41.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxDrawIndirectCount$set(MemorySegment seg, long index, int x) {
        constants$41.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxSamplerLodBias$VH() {
        return constants$41.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxSamplerLodBias;
     * }
     */
    public static float maxSamplerLodBias$get(MemorySegment seg) {
        return (float)constants$41.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxSamplerLodBias;
     * }
     */
    public static void maxSamplerLodBias$set(MemorySegment seg, float x) {
        constants$41.const$4.set(seg, x);
    }
    public static float maxSamplerLodBias$get(MemorySegment seg, long index) {
        return (float)constants$41.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxSamplerLodBias$set(MemorySegment seg, long index, float x) {
        constants$41.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxSamplerAnisotropy$VH() {
        return constants$41.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxSamplerAnisotropy;
     * }
     */
    public static float maxSamplerAnisotropy$get(MemorySegment seg) {
        return (float)constants$41.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxSamplerAnisotropy;
     * }
     */
    public static void maxSamplerAnisotropy$set(MemorySegment seg, float x) {
        constants$41.const$5.set(seg, x);
    }
    public static float maxSamplerAnisotropy$get(MemorySegment seg, long index) {
        return (float)constants$41.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxSamplerAnisotropy$set(MemorySegment seg, long index, float x) {
        constants$41.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxViewports$VH() {
        return constants$42.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxViewports;
     * }
     */
    public static int maxViewports$get(MemorySegment seg) {
        return (int)constants$42.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxViewports;
     * }
     */
    public static void maxViewports$set(MemorySegment seg, int x) {
        constants$42.const$0.set(seg, x);
    }
    public static int maxViewports$get(MemorySegment seg, long index) {
        return (int)constants$42.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxViewports$set(MemorySegment seg, long index, int x) {
        constants$42.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment maxViewportDimensions$slice(MemorySegment seg) {
        return seg.asSlice(280, 8);
    }
    public static MemorySegment viewportBoundsRange$slice(MemorySegment seg) {
        return seg.asSlice(288, 8);
    }
    public static VarHandle viewportSubPixelBits$VH() {
        return constants$42.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t viewportSubPixelBits;
     * }
     */
    public static int viewportSubPixelBits$get(MemorySegment seg) {
        return (int)constants$42.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t viewportSubPixelBits;
     * }
     */
    public static void viewportSubPixelBits$set(MemorySegment seg, int x) {
        constants$42.const$1.set(seg, x);
    }
    public static int viewportSubPixelBits$get(MemorySegment seg, long index) {
        return (int)constants$42.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void viewportSubPixelBits$set(MemorySegment seg, long index, int x) {
        constants$42.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minMemoryMapAlignment$VH() {
        return constants$42.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t minMemoryMapAlignment;
     * }
     */
    public static long minMemoryMapAlignment$get(MemorySegment seg) {
        return (long)constants$42.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t minMemoryMapAlignment;
     * }
     */
    public static void minMemoryMapAlignment$set(MemorySegment seg, long x) {
        constants$42.const$2.set(seg, x);
    }
    public static long minMemoryMapAlignment$get(MemorySegment seg, long index) {
        return (long)constants$42.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void minMemoryMapAlignment$set(MemorySegment seg, long index, long x) {
        constants$42.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minTexelBufferOffsetAlignment$VH() {
        return constants$42.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize minTexelBufferOffsetAlignment;
     * }
     */
    public static long minTexelBufferOffsetAlignment$get(MemorySegment seg) {
        return (long)constants$42.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize minTexelBufferOffsetAlignment;
     * }
     */
    public static void minTexelBufferOffsetAlignment$set(MemorySegment seg, long x) {
        constants$42.const$3.set(seg, x);
    }
    public static long minTexelBufferOffsetAlignment$get(MemorySegment seg, long index) {
        return (long)constants$42.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void minTexelBufferOffsetAlignment$set(MemorySegment seg, long index, long x) {
        constants$42.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minUniformBufferOffsetAlignment$VH() {
        return constants$42.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize minUniformBufferOffsetAlignment;
     * }
     */
    public static long minUniformBufferOffsetAlignment$get(MemorySegment seg) {
        return (long)constants$42.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize minUniformBufferOffsetAlignment;
     * }
     */
    public static void minUniformBufferOffsetAlignment$set(MemorySegment seg, long x) {
        constants$42.const$4.set(seg, x);
    }
    public static long minUniformBufferOffsetAlignment$get(MemorySegment seg, long index) {
        return (long)constants$42.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void minUniformBufferOffsetAlignment$set(MemorySegment seg, long index, long x) {
        constants$42.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minStorageBufferOffsetAlignment$VH() {
        return constants$42.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize minStorageBufferOffsetAlignment;
     * }
     */
    public static long minStorageBufferOffsetAlignment$get(MemorySegment seg) {
        return (long)constants$42.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize minStorageBufferOffsetAlignment;
     * }
     */
    public static void minStorageBufferOffsetAlignment$set(MemorySegment seg, long x) {
        constants$42.const$5.set(seg, x);
    }
    public static long minStorageBufferOffsetAlignment$get(MemorySegment seg, long index) {
        return (long)constants$42.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void minStorageBufferOffsetAlignment$set(MemorySegment seg, long index, long x) {
        constants$42.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minTexelOffset$VH() {
        return constants$43.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t minTexelOffset;
     * }
     */
    public static int minTexelOffset$get(MemorySegment seg) {
        return (int)constants$43.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t minTexelOffset;
     * }
     */
    public static void minTexelOffset$set(MemorySegment seg, int x) {
        constants$43.const$0.set(seg, x);
    }
    public static int minTexelOffset$get(MemorySegment seg, long index) {
        return (int)constants$43.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void minTexelOffset$set(MemorySegment seg, long index, int x) {
        constants$43.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTexelOffset$VH() {
        return constants$43.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTexelOffset;
     * }
     */
    public static int maxTexelOffset$get(MemorySegment seg) {
        return (int)constants$43.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTexelOffset;
     * }
     */
    public static void maxTexelOffset$set(MemorySegment seg, int x) {
        constants$43.const$1.set(seg, x);
    }
    public static int maxTexelOffset$get(MemorySegment seg, long index) {
        return (int)constants$43.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTexelOffset$set(MemorySegment seg, long index, int x) {
        constants$43.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minTexelGatherOffset$VH() {
        return constants$43.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t minTexelGatherOffset;
     * }
     */
    public static int minTexelGatherOffset$get(MemorySegment seg) {
        return (int)constants$43.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t minTexelGatherOffset;
     * }
     */
    public static void minTexelGatherOffset$set(MemorySegment seg, int x) {
        constants$43.const$2.set(seg, x);
    }
    public static int minTexelGatherOffset$get(MemorySegment seg, long index) {
        return (int)constants$43.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void minTexelGatherOffset$set(MemorySegment seg, long index, int x) {
        constants$43.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxTexelGatherOffset$VH() {
        return constants$43.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxTexelGatherOffset;
     * }
     */
    public static int maxTexelGatherOffset$get(MemorySegment seg) {
        return (int)constants$43.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxTexelGatherOffset;
     * }
     */
    public static void maxTexelGatherOffset$set(MemorySegment seg, int x) {
        constants$43.const$3.set(seg, x);
    }
    public static int maxTexelGatherOffset$get(MemorySegment seg, long index) {
        return (int)constants$43.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxTexelGatherOffset$set(MemorySegment seg, long index, int x) {
        constants$43.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minInterpolationOffset$VH() {
        return constants$43.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minInterpolationOffset;
     * }
     */
    public static float minInterpolationOffset$get(MemorySegment seg) {
        return (float)constants$43.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minInterpolationOffset;
     * }
     */
    public static void minInterpolationOffset$set(MemorySegment seg, float x) {
        constants$43.const$4.set(seg, x);
    }
    public static float minInterpolationOffset$get(MemorySegment seg, long index) {
        return (float)constants$43.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void minInterpolationOffset$set(MemorySegment seg, long index, float x) {
        constants$43.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxInterpolationOffset$VH() {
        return constants$43.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxInterpolationOffset;
     * }
     */
    public static float maxInterpolationOffset$get(MemorySegment seg) {
        return (float)constants$43.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxInterpolationOffset;
     * }
     */
    public static void maxInterpolationOffset$set(MemorySegment seg, float x) {
        constants$43.const$5.set(seg, x);
    }
    public static float maxInterpolationOffset$get(MemorySegment seg, long index) {
        return (float)constants$43.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxInterpolationOffset$set(MemorySegment seg, long index, float x) {
        constants$43.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subPixelInterpolationOffsetBits$VH() {
        return constants$44.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t subPixelInterpolationOffsetBits;
     * }
     */
    public static int subPixelInterpolationOffsetBits$get(MemorySegment seg) {
        return (int)constants$44.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t subPixelInterpolationOffsetBits;
     * }
     */
    public static void subPixelInterpolationOffsetBits$set(MemorySegment seg, int x) {
        constants$44.const$0.set(seg, x);
    }
    public static int subPixelInterpolationOffsetBits$get(MemorySegment seg, long index) {
        return (int)constants$44.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void subPixelInterpolationOffsetBits$set(MemorySegment seg, long index, int x) {
        constants$44.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFramebufferWidth$VH() {
        return constants$44.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFramebufferWidth;
     * }
     */
    public static int maxFramebufferWidth$get(MemorySegment seg) {
        return (int)constants$44.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFramebufferWidth;
     * }
     */
    public static void maxFramebufferWidth$set(MemorySegment seg, int x) {
        constants$44.const$1.set(seg, x);
    }
    public static int maxFramebufferWidth$get(MemorySegment seg, long index) {
        return (int)constants$44.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFramebufferWidth$set(MemorySegment seg, long index, int x) {
        constants$44.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFramebufferHeight$VH() {
        return constants$44.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFramebufferHeight;
     * }
     */
    public static int maxFramebufferHeight$get(MemorySegment seg) {
        return (int)constants$44.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFramebufferHeight;
     * }
     */
    public static void maxFramebufferHeight$set(MemorySegment seg, int x) {
        constants$44.const$2.set(seg, x);
    }
    public static int maxFramebufferHeight$get(MemorySegment seg, long index) {
        return (int)constants$44.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFramebufferHeight$set(MemorySegment seg, long index, int x) {
        constants$44.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxFramebufferLayers$VH() {
        return constants$44.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxFramebufferLayers;
     * }
     */
    public static int maxFramebufferLayers$get(MemorySegment seg) {
        return (int)constants$44.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxFramebufferLayers;
     * }
     */
    public static void maxFramebufferLayers$set(MemorySegment seg, int x) {
        constants$44.const$3.set(seg, x);
    }
    public static int maxFramebufferLayers$get(MemorySegment seg, long index) {
        return (int)constants$44.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maxFramebufferLayers$set(MemorySegment seg, long index, int x) {
        constants$44.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle framebufferColorSampleCounts$VH() {
        return constants$44.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferColorSampleCounts;
     * }
     */
    public static int framebufferColorSampleCounts$get(MemorySegment seg) {
        return (int)constants$44.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferColorSampleCounts;
     * }
     */
    public static void framebufferColorSampleCounts$set(MemorySegment seg, int x) {
        constants$44.const$4.set(seg, x);
    }
    public static int framebufferColorSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$44.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void framebufferColorSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$44.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle framebufferDepthSampleCounts$VH() {
        return constants$44.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferDepthSampleCounts;
     * }
     */
    public static int framebufferDepthSampleCounts$get(MemorySegment seg) {
        return (int)constants$44.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferDepthSampleCounts;
     * }
     */
    public static void framebufferDepthSampleCounts$set(MemorySegment seg, int x) {
        constants$44.const$5.set(seg, x);
    }
    public static int framebufferDepthSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$44.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void framebufferDepthSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$44.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle framebufferStencilSampleCounts$VH() {
        return constants$45.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferStencilSampleCounts;
     * }
     */
    public static int framebufferStencilSampleCounts$get(MemorySegment seg) {
        return (int)constants$45.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferStencilSampleCounts;
     * }
     */
    public static void framebufferStencilSampleCounts$set(MemorySegment seg, int x) {
        constants$45.const$0.set(seg, x);
    }
    public static int framebufferStencilSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$45.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void framebufferStencilSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$45.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle framebufferNoAttachmentsSampleCounts$VH() {
        return constants$45.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
     * }
     */
    public static int framebufferNoAttachmentsSampleCounts$get(MemorySegment seg) {
        return (int)constants$45.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
     * }
     */
    public static void framebufferNoAttachmentsSampleCounts$set(MemorySegment seg, int x) {
        constants$45.const$1.set(seg, x);
    }
    public static int framebufferNoAttachmentsSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$45.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void framebufferNoAttachmentsSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$45.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxColorAttachments$VH() {
        return constants$45.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxColorAttachments;
     * }
     */
    public static int maxColorAttachments$get(MemorySegment seg) {
        return (int)constants$45.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxColorAttachments;
     * }
     */
    public static void maxColorAttachments$set(MemorySegment seg, int x) {
        constants$45.const$2.set(seg, x);
    }
    public static int maxColorAttachments$get(MemorySegment seg, long index) {
        return (int)constants$45.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxColorAttachments$set(MemorySegment seg, long index, int x) {
        constants$45.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sampledImageColorSampleCounts$VH() {
        return constants$45.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageColorSampleCounts;
     * }
     */
    public static int sampledImageColorSampleCounts$get(MemorySegment seg) {
        return (int)constants$45.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageColorSampleCounts;
     * }
     */
    public static void sampledImageColorSampleCounts$set(MemorySegment seg, int x) {
        constants$45.const$3.set(seg, x);
    }
    public static int sampledImageColorSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$45.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sampledImageColorSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$45.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sampledImageIntegerSampleCounts$VH() {
        return constants$45.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageIntegerSampleCounts;
     * }
     */
    public static int sampledImageIntegerSampleCounts$get(MemorySegment seg) {
        return (int)constants$45.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageIntegerSampleCounts;
     * }
     */
    public static void sampledImageIntegerSampleCounts$set(MemorySegment seg, int x) {
        constants$45.const$4.set(seg, x);
    }
    public static int sampledImageIntegerSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$45.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sampledImageIntegerSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$45.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sampledImageDepthSampleCounts$VH() {
        return constants$45.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageDepthSampleCounts;
     * }
     */
    public static int sampledImageDepthSampleCounts$get(MemorySegment seg) {
        return (int)constants$45.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageDepthSampleCounts;
     * }
     */
    public static void sampledImageDepthSampleCounts$set(MemorySegment seg, int x) {
        constants$45.const$5.set(seg, x);
    }
    public static int sampledImageDepthSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$45.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sampledImageDepthSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$45.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sampledImageStencilSampleCounts$VH() {
        return constants$46.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageStencilSampleCounts;
     * }
     */
    public static int sampledImageStencilSampleCounts$get(MemorySegment seg) {
        return (int)constants$46.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags sampledImageStencilSampleCounts;
     * }
     */
    public static void sampledImageStencilSampleCounts$set(MemorySegment seg, int x) {
        constants$46.const$0.set(seg, x);
    }
    public static int sampledImageStencilSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$46.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sampledImageStencilSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$46.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle storageImageSampleCounts$VH() {
        return constants$46.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSampleCountFlags storageImageSampleCounts;
     * }
     */
    public static int storageImageSampleCounts$get(MemorySegment seg) {
        return (int)constants$46.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSampleCountFlags storageImageSampleCounts;
     * }
     */
    public static void storageImageSampleCounts$set(MemorySegment seg, int x) {
        constants$46.const$1.set(seg, x);
    }
    public static int storageImageSampleCounts$get(MemorySegment seg, long index) {
        return (int)constants$46.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void storageImageSampleCounts$set(MemorySegment seg, long index, int x) {
        constants$46.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxSampleMaskWords$VH() {
        return constants$46.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxSampleMaskWords;
     * }
     */
    public static int maxSampleMaskWords$get(MemorySegment seg) {
        return (int)constants$46.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxSampleMaskWords;
     * }
     */
    public static void maxSampleMaskWords$set(MemorySegment seg, int x) {
        constants$46.const$2.set(seg, x);
    }
    public static int maxSampleMaskWords$get(MemorySegment seg, long index) {
        return (int)constants$46.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxSampleMaskWords$set(MemorySegment seg, long index, int x) {
        constants$46.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestampComputeAndGraphics$VH() {
        return constants$46.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 timestampComputeAndGraphics;
     * }
     */
    public static int timestampComputeAndGraphics$get(MemorySegment seg) {
        return (int)constants$46.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 timestampComputeAndGraphics;
     * }
     */
    public static void timestampComputeAndGraphics$set(MemorySegment seg, int x) {
        constants$46.const$3.set(seg, x);
    }
    public static int timestampComputeAndGraphics$get(MemorySegment seg, long index) {
        return (int)constants$46.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void timestampComputeAndGraphics$set(MemorySegment seg, long index, int x) {
        constants$46.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestampPeriod$VH() {
        return constants$46.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float timestampPeriod;
     * }
     */
    public static float timestampPeriod$get(MemorySegment seg) {
        return (float)constants$46.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float timestampPeriod;
     * }
     */
    public static void timestampPeriod$set(MemorySegment seg, float x) {
        constants$46.const$4.set(seg, x);
    }
    public static float timestampPeriod$get(MemorySegment seg, long index) {
        return (float)constants$46.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void timestampPeriod$set(MemorySegment seg, long index, float x) {
        constants$46.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxClipDistances$VH() {
        return constants$46.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxClipDistances;
     * }
     */
    public static int maxClipDistances$get(MemorySegment seg) {
        return (int)constants$46.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxClipDistances;
     * }
     */
    public static void maxClipDistances$set(MemorySegment seg, int x) {
        constants$46.const$5.set(seg, x);
    }
    public static int maxClipDistances$get(MemorySegment seg, long index) {
        return (int)constants$46.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void maxClipDistances$set(MemorySegment seg, long index, int x) {
        constants$46.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxCullDistances$VH() {
        return constants$47.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxCullDistances;
     * }
     */
    public static int maxCullDistances$get(MemorySegment seg) {
        return (int)constants$47.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxCullDistances;
     * }
     */
    public static void maxCullDistances$set(MemorySegment seg, int x) {
        constants$47.const$0.set(seg, x);
    }
    public static int maxCullDistances$get(MemorySegment seg, long index) {
        return (int)constants$47.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxCullDistances$set(MemorySegment seg, long index, int x) {
        constants$47.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxCombinedClipAndCullDistances$VH() {
        return constants$47.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t maxCombinedClipAndCullDistances;
     * }
     */
    public static int maxCombinedClipAndCullDistances$get(MemorySegment seg) {
        return (int)constants$47.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t maxCombinedClipAndCullDistances;
     * }
     */
    public static void maxCombinedClipAndCullDistances$set(MemorySegment seg, int x) {
        constants$47.const$1.set(seg, x);
    }
    public static int maxCombinedClipAndCullDistances$get(MemorySegment seg, long index) {
        return (int)constants$47.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void maxCombinedClipAndCullDistances$set(MemorySegment seg, long index, int x) {
        constants$47.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle discreteQueuePriorities$VH() {
        return constants$47.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t discreteQueuePriorities;
     * }
     */
    public static int discreteQueuePriorities$get(MemorySegment seg) {
        return (int)constants$47.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t discreteQueuePriorities;
     * }
     */
    public static void discreteQueuePriorities$set(MemorySegment seg, int x) {
        constants$47.const$2.set(seg, x);
    }
    public static int discreteQueuePriorities$get(MemorySegment seg, long index) {
        return (int)constants$47.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void discreteQueuePriorities$set(MemorySegment seg, long index, int x) {
        constants$47.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pointSizeRange$slice(MemorySegment seg) {
        return seg.asSlice(444, 8);
    }
    public static MemorySegment lineWidthRange$slice(MemorySegment seg) {
        return seg.asSlice(452, 8);
    }
    public static VarHandle pointSizeGranularity$VH() {
        return constants$47.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float pointSizeGranularity;
     * }
     */
    public static float pointSizeGranularity$get(MemorySegment seg) {
        return (float)constants$47.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float pointSizeGranularity;
     * }
     */
    public static void pointSizeGranularity$set(MemorySegment seg, float x) {
        constants$47.const$3.set(seg, x);
    }
    public static float pointSizeGranularity$get(MemorySegment seg, long index) {
        return (float)constants$47.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pointSizeGranularity$set(MemorySegment seg, long index, float x) {
        constants$47.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lineWidthGranularity$VH() {
        return constants$47.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float lineWidthGranularity;
     * }
     */
    public static float lineWidthGranularity$get(MemorySegment seg) {
        return (float)constants$47.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float lineWidthGranularity;
     * }
     */
    public static void lineWidthGranularity$set(MemorySegment seg, float x) {
        constants$47.const$4.set(seg, x);
    }
    public static float lineWidthGranularity$get(MemorySegment seg, long index) {
        return (float)constants$47.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lineWidthGranularity$set(MemorySegment seg, long index, float x) {
        constants$47.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strictLines$VH() {
        return constants$47.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 strictLines;
     * }
     */
    public static int strictLines$get(MemorySegment seg) {
        return (int)constants$47.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 strictLines;
     * }
     */
    public static void strictLines$set(MemorySegment seg, int x) {
        constants$47.const$5.set(seg, x);
    }
    public static int strictLines$get(MemorySegment seg, long index) {
        return (int)constants$47.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void strictLines$set(MemorySegment seg, long index, int x) {
        constants$47.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle standardSampleLocations$VH() {
        return constants$48.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 standardSampleLocations;
     * }
     */
    public static int standardSampleLocations$get(MemorySegment seg) {
        return (int)constants$48.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 standardSampleLocations;
     * }
     */
    public static void standardSampleLocations$set(MemorySegment seg, int x) {
        constants$48.const$0.set(seg, x);
    }
    public static int standardSampleLocations$get(MemorySegment seg, long index) {
        return (int)constants$48.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void standardSampleLocations$set(MemorySegment seg, long index, int x) {
        constants$48.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle optimalBufferCopyOffsetAlignment$VH() {
        return constants$48.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize optimalBufferCopyOffsetAlignment;
     * }
     */
    public static long optimalBufferCopyOffsetAlignment$get(MemorySegment seg) {
        return (long)constants$48.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize optimalBufferCopyOffsetAlignment;
     * }
     */
    public static void optimalBufferCopyOffsetAlignment$set(MemorySegment seg, long x) {
        constants$48.const$1.set(seg, x);
    }
    public static long optimalBufferCopyOffsetAlignment$get(MemorySegment seg, long index) {
        return (long)constants$48.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void optimalBufferCopyOffsetAlignment$set(MemorySegment seg, long index, long x) {
        constants$48.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle optimalBufferCopyRowPitchAlignment$VH() {
        return constants$48.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment;
     * }
     */
    public static long optimalBufferCopyRowPitchAlignment$get(MemorySegment seg) {
        return (long)constants$48.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment;
     * }
     */
    public static void optimalBufferCopyRowPitchAlignment$set(MemorySegment seg, long x) {
        constants$48.const$2.set(seg, x);
    }
    public static long optimalBufferCopyRowPitchAlignment$get(MemorySegment seg, long index) {
        return (long)constants$48.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void optimalBufferCopyRowPitchAlignment$set(MemorySegment seg, long index, long x) {
        constants$48.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nonCoherentAtomSize$VH() {
        return constants$48.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkDeviceSize nonCoherentAtomSize;
     * }
     */
    public static long nonCoherentAtomSize$get(MemorySegment seg) {
        return (long)constants$48.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkDeviceSize nonCoherentAtomSize;
     * }
     */
    public static void nonCoherentAtomSize$set(MemorySegment seg, long x) {
        constants$48.const$3.set(seg, x);
    }
    public static long nonCoherentAtomSize$get(MemorySegment seg, long index) {
        return (long)constants$48.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nonCoherentAtomSize$set(MemorySegment seg, long index, long x) {
        constants$48.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


