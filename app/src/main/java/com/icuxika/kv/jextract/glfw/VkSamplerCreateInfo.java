// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VkSamplerCreateInfo {
 *     VkStructureType sType;
 *     void* pNext;
 *     VkSamplerCreateFlags flags;
 *     VkFilter magFilter;
 *     VkFilter minFilter;
 *     VkSamplerMipmapMode mipmapMode;
 *     VkSamplerAddressMode addressModeU;
 *     VkSamplerAddressMode addressModeV;
 *     VkSamplerAddressMode addressModeW;
 *     float mipLodBias;
 *     VkBool32 anisotropyEnable;
 *     float maxAnisotropy;
 *     VkBool32 compareEnable;
 *     VkCompareOp compareOp;
 *     float minLod;
 *     float maxLod;
 *     VkBorderColor borderColor;
 *     VkBool32 unnormalizedCoordinates;
 * };
 * }
 */
public class VkSamplerCreateInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$108.const$4;
    }
    public static VarHandle sType$VH() {
        return constants$108.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static int sType$get(MemorySegment seg) {
        return (int)constants$108.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkStructureType sType;
     * }
     */
    public static void sType$set(MemorySegment seg, int x) {
        constants$108.const$5.set(seg, x);
    }
    public static int sType$get(MemorySegment seg, long index) {
        return (int)constants$108.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sType$set(MemorySegment seg, long index, int x) {
        constants$108.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pNext$VH() {
        return constants$109.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static MemorySegment pNext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pNext;
     * }
     */
    public static void pNext$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$0.set(seg, x);
    }
    public static MemorySegment pNext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pNext$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$109.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSamplerCreateFlags flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$109.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSamplerCreateFlags flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$109.const$1.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$109.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$109.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle magFilter$VH() {
        return constants$109.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFilter magFilter;
     * }
     */
    public static int magFilter$get(MemorySegment seg) {
        return (int)constants$109.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFilter magFilter;
     * }
     */
    public static void magFilter$set(MemorySegment seg, int x) {
        constants$109.const$2.set(seg, x);
    }
    public static int magFilter$get(MemorySegment seg, long index) {
        return (int)constants$109.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void magFilter$set(MemorySegment seg, long index, int x) {
        constants$109.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minFilter$VH() {
        return constants$109.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkFilter minFilter;
     * }
     */
    public static int minFilter$get(MemorySegment seg) {
        return (int)constants$109.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkFilter minFilter;
     * }
     */
    public static void minFilter$set(MemorySegment seg, int x) {
        constants$109.const$3.set(seg, x);
    }
    public static int minFilter$get(MemorySegment seg, long index) {
        return (int)constants$109.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void minFilter$set(MemorySegment seg, long index, int x) {
        constants$109.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mipmapMode$VH() {
        return constants$109.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSamplerMipmapMode mipmapMode;
     * }
     */
    public static int mipmapMode$get(MemorySegment seg) {
        return (int)constants$109.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSamplerMipmapMode mipmapMode;
     * }
     */
    public static void mipmapMode$set(MemorySegment seg, int x) {
        constants$109.const$4.set(seg, x);
    }
    public static int mipmapMode$get(MemorySegment seg, long index) {
        return (int)constants$109.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mipmapMode$set(MemorySegment seg, long index, int x) {
        constants$109.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle addressModeU$VH() {
        return constants$109.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeU;
     * }
     */
    public static int addressModeU$get(MemorySegment seg) {
        return (int)constants$109.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeU;
     * }
     */
    public static void addressModeU$set(MemorySegment seg, int x) {
        constants$109.const$5.set(seg, x);
    }
    public static int addressModeU$get(MemorySegment seg, long index) {
        return (int)constants$109.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void addressModeU$set(MemorySegment seg, long index, int x) {
        constants$109.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle addressModeV$VH() {
        return constants$110.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeV;
     * }
     */
    public static int addressModeV$get(MemorySegment seg) {
        return (int)constants$110.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeV;
     * }
     */
    public static void addressModeV$set(MemorySegment seg, int x) {
        constants$110.const$0.set(seg, x);
    }
    public static int addressModeV$get(MemorySegment seg, long index) {
        return (int)constants$110.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void addressModeV$set(MemorySegment seg, long index, int x) {
        constants$110.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle addressModeW$VH() {
        return constants$110.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeW;
     * }
     */
    public static int addressModeW$get(MemorySegment seg) {
        return (int)constants$110.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkSamplerAddressMode addressModeW;
     * }
     */
    public static void addressModeW$set(MemorySegment seg, int x) {
        constants$110.const$1.set(seg, x);
    }
    public static int addressModeW$get(MemorySegment seg, long index) {
        return (int)constants$110.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void addressModeW$set(MemorySegment seg, long index, int x) {
        constants$110.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mipLodBias$VH() {
        return constants$110.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float mipLodBias;
     * }
     */
    public static float mipLodBias$get(MemorySegment seg) {
        return (float)constants$110.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float mipLodBias;
     * }
     */
    public static void mipLodBias$set(MemorySegment seg, float x) {
        constants$110.const$2.set(seg, x);
    }
    public static float mipLodBias$get(MemorySegment seg, long index) {
        return (float)constants$110.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mipLodBias$set(MemorySegment seg, long index, float x) {
        constants$110.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle anisotropyEnable$VH() {
        return constants$110.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 anisotropyEnable;
     * }
     */
    public static int anisotropyEnable$get(MemorySegment seg) {
        return (int)constants$110.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 anisotropyEnable;
     * }
     */
    public static void anisotropyEnable$set(MemorySegment seg, int x) {
        constants$110.const$3.set(seg, x);
    }
    public static int anisotropyEnable$get(MemorySegment seg, long index) {
        return (int)constants$110.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void anisotropyEnable$set(MemorySegment seg, long index, int x) {
        constants$110.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxAnisotropy$VH() {
        return constants$110.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxAnisotropy;
     * }
     */
    public static float maxAnisotropy$get(MemorySegment seg) {
        return (float)constants$110.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxAnisotropy;
     * }
     */
    public static void maxAnisotropy$set(MemorySegment seg, float x) {
        constants$110.const$4.set(seg, x);
    }
    public static float maxAnisotropy$get(MemorySegment seg, long index) {
        return (float)constants$110.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void maxAnisotropy$set(MemorySegment seg, long index, float x) {
        constants$110.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle compareEnable$VH() {
        return constants$110.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 compareEnable;
     * }
     */
    public static int compareEnable$get(MemorySegment seg) {
        return (int)constants$110.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 compareEnable;
     * }
     */
    public static void compareEnable$set(MemorySegment seg, int x) {
        constants$110.const$5.set(seg, x);
    }
    public static int compareEnable$get(MemorySegment seg, long index) {
        return (int)constants$110.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void compareEnable$set(MemorySegment seg, long index, int x) {
        constants$110.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle compareOp$VH() {
        return constants$111.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkCompareOp compareOp;
     * }
     */
    public static int compareOp$get(MemorySegment seg) {
        return (int)constants$111.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkCompareOp compareOp;
     * }
     */
    public static void compareOp$set(MemorySegment seg, int x) {
        constants$111.const$0.set(seg, x);
    }
    public static int compareOp$get(MemorySegment seg, long index) {
        return (int)constants$111.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void compareOp$set(MemorySegment seg, long index, int x) {
        constants$111.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle minLod$VH() {
        return constants$111.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float minLod;
     * }
     */
    public static float minLod$get(MemorySegment seg) {
        return (float)constants$111.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float minLod;
     * }
     */
    public static void minLod$set(MemorySegment seg, float x) {
        constants$111.const$1.set(seg, x);
    }
    public static float minLod$get(MemorySegment seg, long index) {
        return (float)constants$111.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void minLod$set(MemorySegment seg, long index, float x) {
        constants$111.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxLod$VH() {
        return constants$111.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float maxLod;
     * }
     */
    public static float maxLod$get(MemorySegment seg) {
        return (float)constants$111.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float maxLod;
     * }
     */
    public static void maxLod$set(MemorySegment seg, float x) {
        constants$111.const$2.set(seg, x);
    }
    public static float maxLod$get(MemorySegment seg, long index) {
        return (float)constants$111.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void maxLod$set(MemorySegment seg, long index, float x) {
        constants$111.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle borderColor$VH() {
        return constants$111.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBorderColor borderColor;
     * }
     */
    public static int borderColor$get(MemorySegment seg) {
        return (int)constants$111.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBorderColor borderColor;
     * }
     */
    public static void borderColor$set(MemorySegment seg, int x) {
        constants$111.const$3.set(seg, x);
    }
    public static int borderColor$get(MemorySegment seg, long index) {
        return (int)constants$111.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void borderColor$set(MemorySegment seg, long index, int x) {
        constants$111.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle unnormalizedCoordinates$VH() {
        return constants$111.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VkBool32 unnormalizedCoordinates;
     * }
     */
    public static int unnormalizedCoordinates$get(MemorySegment seg) {
        return (int)constants$111.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VkBool32 unnormalizedCoordinates;
     * }
     */
    public static void unnormalizedCoordinates$set(MemorySegment seg, int x) {
        constants$111.const$4.set(seg, x);
    }
    public static int unnormalizedCoordinates$get(MemorySegment seg, long index) {
        return (int)constants$111.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void unnormalizedCoordinates$set(MemorySegment seg, long index, int x) {
        constants$111.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


