// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct StdVideoH265PictureParameterSet {
 *     StdVideoH265PpsFlags flags;
 *     uint8_t pps_pic_parameter_set_id;
 *     uint8_t pps_seq_parameter_set_id;
 *     uint8_t sps_video_parameter_set_id;
 *     uint8_t num_extra_slice_header_bits;
 *     uint8_t num_ref_idx_l0_default_active_minus1;
 *     uint8_t num_ref_idx_l1_default_active_minus1;
 *     int8_t init_qp_minus26;
 *     uint8_t diff_cu_qp_delta_depth;
 *     int8_t pps_cb_qp_offset;
 *     int8_t pps_cr_qp_offset;
 *     int8_t pps_beta_offset_div2;
 *     int8_t pps_tc_offset_div2;
 *     uint8_t log2_parallel_merge_level_minus2;
 *     uint8_t log2_max_transform_skip_block_size_minus2;
 *     uint8_t diff_cu_chroma_qp_offset_depth;
 *     uint8_t chroma_qp_offset_list_len_minus1;
 *     int8_t cb_qp_offset_list[6];
 *     int8_t cr_qp_offset_list[6];
 *     uint8_t log2_sao_offset_scale_luma;
 *     uint8_t log2_sao_offset_scale_chroma;
 *     int8_t pps_act_y_qp_offset_plus5;
 *     int8_t pps_act_cb_qp_offset_plus5;
 *     int8_t pps_act_cr_qp_offset_plus3;
 *     uint8_t pps_num_palette_predictor_initializers;
 *     uint8_t luma_bit_depth_entry_minus8;
 *     uint8_t chroma_bit_depth_entry_minus8;
 *     uint8_t num_tile_columns_minus1;
 *     uint8_t num_tile_rows_minus1;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint16_t column_width_minus1[19];
 *     uint16_t row_height_minus1[21];
 *     uint32_t reserved3;
 *     const StdVideoH265ScalingLists* pScalingLists;
 *     const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
 * };
 * }
 */
public class StdVideoH265PictureParameterSet {

    public static MemoryLayout $LAYOUT() {
        return constants$558.const$4;
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle pps_pic_parameter_set_id$VH() {
        return constants$558.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t pps_pic_parameter_set_id;
     * }
     */
    public static byte pps_pic_parameter_set_id$get(MemorySegment seg) {
        return (byte)constants$558.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t pps_pic_parameter_set_id;
     * }
     */
    public static void pps_pic_parameter_set_id$set(MemorySegment seg, byte x) {
        constants$558.const$5.set(seg, x);
    }
    public static byte pps_pic_parameter_set_id$get(MemorySegment seg, long index) {
        return (byte)constants$558.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_pic_parameter_set_id$set(MemorySegment seg, long index, byte x) {
        constants$558.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_seq_parameter_set_id$VH() {
        return constants$559.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t pps_seq_parameter_set_id;
     * }
     */
    public static byte pps_seq_parameter_set_id$get(MemorySegment seg) {
        return (byte)constants$559.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t pps_seq_parameter_set_id;
     * }
     */
    public static void pps_seq_parameter_set_id$set(MemorySegment seg, byte x) {
        constants$559.const$0.set(seg, x);
    }
    public static byte pps_seq_parameter_set_id$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_seq_parameter_set_id$set(MemorySegment seg, long index, byte x) {
        constants$559.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sps_video_parameter_set_id$VH() {
        return constants$559.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t sps_video_parameter_set_id;
     * }
     */
    public static byte sps_video_parameter_set_id$get(MemorySegment seg) {
        return (byte)constants$559.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t sps_video_parameter_set_id;
     * }
     */
    public static void sps_video_parameter_set_id$set(MemorySegment seg, byte x) {
        constants$559.const$1.set(seg, x);
    }
    public static byte sps_video_parameter_set_id$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sps_video_parameter_set_id$set(MemorySegment seg, long index, byte x) {
        constants$559.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_extra_slice_header_bits$VH() {
        return constants$559.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_extra_slice_header_bits;
     * }
     */
    public static byte num_extra_slice_header_bits$get(MemorySegment seg) {
        return (byte)constants$559.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_extra_slice_header_bits;
     * }
     */
    public static void num_extra_slice_header_bits$set(MemorySegment seg, byte x) {
        constants$559.const$2.set(seg, x);
    }
    public static byte num_extra_slice_header_bits$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void num_extra_slice_header_bits$set(MemorySegment seg, long index, byte x) {
        constants$559.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_ref_idx_l0_default_active_minus1$VH() {
        return constants$559.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_ref_idx_l0_default_active_minus1;
     * }
     */
    public static byte num_ref_idx_l0_default_active_minus1$get(MemorySegment seg) {
        return (byte)constants$559.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_ref_idx_l0_default_active_minus1;
     * }
     */
    public static void num_ref_idx_l0_default_active_minus1$set(MemorySegment seg, byte x) {
        constants$559.const$3.set(seg, x);
    }
    public static byte num_ref_idx_l0_default_active_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void num_ref_idx_l0_default_active_minus1$set(MemorySegment seg, long index, byte x) {
        constants$559.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_ref_idx_l1_default_active_minus1$VH() {
        return constants$559.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_ref_idx_l1_default_active_minus1;
     * }
     */
    public static byte num_ref_idx_l1_default_active_minus1$get(MemorySegment seg) {
        return (byte)constants$559.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_ref_idx_l1_default_active_minus1;
     * }
     */
    public static void num_ref_idx_l1_default_active_minus1$set(MemorySegment seg, byte x) {
        constants$559.const$4.set(seg, x);
    }
    public static byte num_ref_idx_l1_default_active_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void num_ref_idx_l1_default_active_minus1$set(MemorySegment seg, long index, byte x) {
        constants$559.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle init_qp_minus26$VH() {
        return constants$559.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t init_qp_minus26;
     * }
     */
    public static byte init_qp_minus26$get(MemorySegment seg) {
        return (byte)constants$559.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t init_qp_minus26;
     * }
     */
    public static void init_qp_minus26$set(MemorySegment seg, byte x) {
        constants$559.const$5.set(seg, x);
    }
    public static byte init_qp_minus26$get(MemorySegment seg, long index) {
        return (byte)constants$559.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void init_qp_minus26$set(MemorySegment seg, long index, byte x) {
        constants$559.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle diff_cu_qp_delta_depth$VH() {
        return constants$560.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t diff_cu_qp_delta_depth;
     * }
     */
    public static byte diff_cu_qp_delta_depth$get(MemorySegment seg) {
        return (byte)constants$560.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t diff_cu_qp_delta_depth;
     * }
     */
    public static void diff_cu_qp_delta_depth$set(MemorySegment seg, byte x) {
        constants$560.const$0.set(seg, x);
    }
    public static byte diff_cu_qp_delta_depth$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void diff_cu_qp_delta_depth$set(MemorySegment seg, long index, byte x) {
        constants$560.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_cb_qp_offset$VH() {
        return constants$560.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_cb_qp_offset;
     * }
     */
    public static byte pps_cb_qp_offset$get(MemorySegment seg) {
        return (byte)constants$560.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_cb_qp_offset;
     * }
     */
    public static void pps_cb_qp_offset$set(MemorySegment seg, byte x) {
        constants$560.const$1.set(seg, x);
    }
    public static byte pps_cb_qp_offset$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_cb_qp_offset$set(MemorySegment seg, long index, byte x) {
        constants$560.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_cr_qp_offset$VH() {
        return constants$560.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_cr_qp_offset;
     * }
     */
    public static byte pps_cr_qp_offset$get(MemorySegment seg) {
        return (byte)constants$560.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_cr_qp_offset;
     * }
     */
    public static void pps_cr_qp_offset$set(MemorySegment seg, byte x) {
        constants$560.const$2.set(seg, x);
    }
    public static byte pps_cr_qp_offset$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_cr_qp_offset$set(MemorySegment seg, long index, byte x) {
        constants$560.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_beta_offset_div2$VH() {
        return constants$560.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_beta_offset_div2;
     * }
     */
    public static byte pps_beta_offset_div2$get(MemorySegment seg) {
        return (byte)constants$560.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_beta_offset_div2;
     * }
     */
    public static void pps_beta_offset_div2$set(MemorySegment seg, byte x) {
        constants$560.const$3.set(seg, x);
    }
    public static byte pps_beta_offset_div2$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_beta_offset_div2$set(MemorySegment seg, long index, byte x) {
        constants$560.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_tc_offset_div2$VH() {
        return constants$560.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_tc_offset_div2;
     * }
     */
    public static byte pps_tc_offset_div2$get(MemorySegment seg) {
        return (byte)constants$560.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_tc_offset_div2;
     * }
     */
    public static void pps_tc_offset_div2$set(MemorySegment seg, byte x) {
        constants$560.const$4.set(seg, x);
    }
    public static byte pps_tc_offset_div2$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_tc_offset_div2$set(MemorySegment seg, long index, byte x) {
        constants$560.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_parallel_merge_level_minus2$VH() {
        return constants$560.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_parallel_merge_level_minus2;
     * }
     */
    public static byte log2_parallel_merge_level_minus2$get(MemorySegment seg) {
        return (byte)constants$560.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_parallel_merge_level_minus2;
     * }
     */
    public static void log2_parallel_merge_level_minus2$set(MemorySegment seg, byte x) {
        constants$560.const$5.set(seg, x);
    }
    public static byte log2_parallel_merge_level_minus2$get(MemorySegment seg, long index) {
        return (byte)constants$560.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_parallel_merge_level_minus2$set(MemorySegment seg, long index, byte x) {
        constants$560.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_max_transform_skip_block_size_minus2$VH() {
        return constants$561.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_max_transform_skip_block_size_minus2;
     * }
     */
    public static byte log2_max_transform_skip_block_size_minus2$get(MemorySegment seg) {
        return (byte)constants$561.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_max_transform_skip_block_size_minus2;
     * }
     */
    public static void log2_max_transform_skip_block_size_minus2$set(MemorySegment seg, byte x) {
        constants$561.const$0.set(seg, x);
    }
    public static byte log2_max_transform_skip_block_size_minus2$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_max_transform_skip_block_size_minus2$set(MemorySegment seg, long index, byte x) {
        constants$561.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle diff_cu_chroma_qp_offset_depth$VH() {
        return constants$561.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t diff_cu_chroma_qp_offset_depth;
     * }
     */
    public static byte diff_cu_chroma_qp_offset_depth$get(MemorySegment seg) {
        return (byte)constants$561.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t diff_cu_chroma_qp_offset_depth;
     * }
     */
    public static void diff_cu_chroma_qp_offset_depth$set(MemorySegment seg, byte x) {
        constants$561.const$1.set(seg, x);
    }
    public static byte diff_cu_chroma_qp_offset_depth$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void diff_cu_chroma_qp_offset_depth$set(MemorySegment seg, long index, byte x) {
        constants$561.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_qp_offset_list_len_minus1$VH() {
        return constants$561.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t chroma_qp_offset_list_len_minus1;
     * }
     */
    public static byte chroma_qp_offset_list_len_minus1$get(MemorySegment seg) {
        return (byte)constants$561.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t chroma_qp_offset_list_len_minus1;
     * }
     */
    public static void chroma_qp_offset_list_len_minus1$set(MemorySegment seg, byte x) {
        constants$561.const$2.set(seg, x);
    }
    public static byte chroma_qp_offset_list_len_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_qp_offset_list_len_minus1$set(MemorySegment seg, long index, byte x) {
        constants$561.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cb_qp_offset_list$slice(MemorySegment seg) {
        return seg.asSlice(20, 6);
    }
    public static MemorySegment cr_qp_offset_list$slice(MemorySegment seg) {
        return seg.asSlice(26, 6);
    }
    public static VarHandle log2_sao_offset_scale_luma$VH() {
        return constants$561.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_sao_offset_scale_luma;
     * }
     */
    public static byte log2_sao_offset_scale_luma$get(MemorySegment seg) {
        return (byte)constants$561.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_sao_offset_scale_luma;
     * }
     */
    public static void log2_sao_offset_scale_luma$set(MemorySegment seg, byte x) {
        constants$561.const$3.set(seg, x);
    }
    public static byte log2_sao_offset_scale_luma$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_sao_offset_scale_luma$set(MemorySegment seg, long index, byte x) {
        constants$561.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_sao_offset_scale_chroma$VH() {
        return constants$561.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_sao_offset_scale_chroma;
     * }
     */
    public static byte log2_sao_offset_scale_chroma$get(MemorySegment seg) {
        return (byte)constants$561.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_sao_offset_scale_chroma;
     * }
     */
    public static void log2_sao_offset_scale_chroma$set(MemorySegment seg, byte x) {
        constants$561.const$4.set(seg, x);
    }
    public static byte log2_sao_offset_scale_chroma$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_sao_offset_scale_chroma$set(MemorySegment seg, long index, byte x) {
        constants$561.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_act_y_qp_offset_plus5$VH() {
        return constants$561.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_act_y_qp_offset_plus5;
     * }
     */
    public static byte pps_act_y_qp_offset_plus5$get(MemorySegment seg) {
        return (byte)constants$561.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_act_y_qp_offset_plus5;
     * }
     */
    public static void pps_act_y_qp_offset_plus5$set(MemorySegment seg, byte x) {
        constants$561.const$5.set(seg, x);
    }
    public static byte pps_act_y_qp_offset_plus5$get(MemorySegment seg, long index) {
        return (byte)constants$561.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_act_y_qp_offset_plus5$set(MemorySegment seg, long index, byte x) {
        constants$561.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_act_cb_qp_offset_plus5$VH() {
        return constants$562.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_act_cb_qp_offset_plus5;
     * }
     */
    public static byte pps_act_cb_qp_offset_plus5$get(MemorySegment seg) {
        return (byte)constants$562.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_act_cb_qp_offset_plus5;
     * }
     */
    public static void pps_act_cb_qp_offset_plus5$set(MemorySegment seg, byte x) {
        constants$562.const$0.set(seg, x);
    }
    public static byte pps_act_cb_qp_offset_plus5$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_act_cb_qp_offset_plus5$set(MemorySegment seg, long index, byte x) {
        constants$562.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_act_cr_qp_offset_plus3$VH() {
        return constants$562.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t pps_act_cr_qp_offset_plus3;
     * }
     */
    public static byte pps_act_cr_qp_offset_plus3$get(MemorySegment seg) {
        return (byte)constants$562.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t pps_act_cr_qp_offset_plus3;
     * }
     */
    public static void pps_act_cr_qp_offset_plus3$set(MemorySegment seg, byte x) {
        constants$562.const$1.set(seg, x);
    }
    public static byte pps_act_cr_qp_offset_plus3$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_act_cr_qp_offset_plus3$set(MemorySegment seg, long index, byte x) {
        constants$562.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pps_num_palette_predictor_initializers$VH() {
        return constants$562.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t pps_num_palette_predictor_initializers;
     * }
     */
    public static byte pps_num_palette_predictor_initializers$get(MemorySegment seg) {
        return (byte)constants$562.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t pps_num_palette_predictor_initializers;
     * }
     */
    public static void pps_num_palette_predictor_initializers$set(MemorySegment seg, byte x) {
        constants$562.const$2.set(seg, x);
    }
    public static byte pps_num_palette_predictor_initializers$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pps_num_palette_predictor_initializers$set(MemorySegment seg, long index, byte x) {
        constants$562.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle luma_bit_depth_entry_minus8$VH() {
        return constants$562.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t luma_bit_depth_entry_minus8;
     * }
     */
    public static byte luma_bit_depth_entry_minus8$get(MemorySegment seg) {
        return (byte)constants$562.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t luma_bit_depth_entry_minus8;
     * }
     */
    public static void luma_bit_depth_entry_minus8$set(MemorySegment seg, byte x) {
        constants$562.const$3.set(seg, x);
    }
    public static byte luma_bit_depth_entry_minus8$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void luma_bit_depth_entry_minus8$set(MemorySegment seg, long index, byte x) {
        constants$562.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_bit_depth_entry_minus8$VH() {
        return constants$562.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t chroma_bit_depth_entry_minus8;
     * }
     */
    public static byte chroma_bit_depth_entry_minus8$get(MemorySegment seg) {
        return (byte)constants$562.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t chroma_bit_depth_entry_minus8;
     * }
     */
    public static void chroma_bit_depth_entry_minus8$set(MemorySegment seg, byte x) {
        constants$562.const$4.set(seg, x);
    }
    public static byte chroma_bit_depth_entry_minus8$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_bit_depth_entry_minus8$set(MemorySegment seg, long index, byte x) {
        constants$562.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_tile_columns_minus1$VH() {
        return constants$562.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_tile_columns_minus1;
     * }
     */
    public static byte num_tile_columns_minus1$get(MemorySegment seg) {
        return (byte)constants$562.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_tile_columns_minus1;
     * }
     */
    public static void num_tile_columns_minus1$set(MemorySegment seg, byte x) {
        constants$562.const$5.set(seg, x);
    }
    public static byte num_tile_columns_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$562.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void num_tile_columns_minus1$set(MemorySegment seg, long index, byte x) {
        constants$562.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_tile_rows_minus1$VH() {
        return constants$563.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t num_tile_rows_minus1;
     * }
     */
    public static byte num_tile_rows_minus1$get(MemorySegment seg) {
        return (byte)constants$563.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t num_tile_rows_minus1;
     * }
     */
    public static void num_tile_rows_minus1$set(MemorySegment seg, byte x) {
        constants$563.const$0.set(seg, x);
    }
    public static byte num_tile_rows_minus1$get(MemorySegment seg, long index) {
        return (byte)constants$563.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void num_tile_rows_minus1$set(MemorySegment seg, long index, byte x) {
        constants$563.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$563.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved1;
     * }
     */
    public static byte reserved1$get(MemorySegment seg) {
        return (byte)constants$563.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, byte x) {
        constants$563.const$1.set(seg, x);
    }
    public static byte reserved1$get(MemorySegment seg, long index) {
        return (byte)constants$563.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, byte x) {
        constants$563.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$563.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static byte reserved2$get(MemorySegment seg) {
        return (byte)constants$563.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, byte x) {
        constants$563.const$2.set(seg, x);
    }
    public static byte reserved2$get(MemorySegment seg, long index) {
        return (byte)constants$563.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, byte x) {
        constants$563.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment column_width_minus1$slice(MemorySegment seg) {
        return seg.asSlice(44, 38);
    }
    public static MemorySegment row_height_minus1$slice(MemorySegment seg) {
        return seg.asSlice(82, 42);
    }
    public static VarHandle reserved3$VH() {
        return constants$563.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t reserved3;
     * }
     */
    public static int reserved3$get(MemorySegment seg) {
        return (int)constants$563.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t reserved3;
     * }
     */
    public static void reserved3$set(MemorySegment seg, int x) {
        constants$563.const$3.set(seg, x);
    }
    public static int reserved3$get(MemorySegment seg, long index) {
        return (int)constants$563.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved3$set(MemorySegment seg, long index, int x) {
        constants$563.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pScalingLists$VH() {
        return constants$563.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265ScalingLists* pScalingLists;
     * }
     */
    public static MemorySegment pScalingLists$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265ScalingLists* pScalingLists;
     * }
     */
    public static void pScalingLists$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$4.set(seg, x);
    }
    public static MemorySegment pScalingLists$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pScalingLists$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pPredictorPaletteEntries$VH() {
        return constants$563.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
     * }
     */
    public static MemorySegment pPredictorPaletteEntries$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$563.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
     * }
     */
    public static void pPredictorPaletteEntries$set(MemorySegment seg, MemorySegment x) {
        constants$563.const$5.set(seg, x);
    }
    public static MemorySegment pPredictorPaletteEntries$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$563.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pPredictorPaletteEntries$set(MemorySegment seg, long index, MemorySegment x) {
        constants$563.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


