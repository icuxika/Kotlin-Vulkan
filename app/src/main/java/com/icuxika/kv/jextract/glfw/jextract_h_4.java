// Generated by jextract

package com.icuxika.kv.jextract.glfw;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jextract_h_4 extends jextract_h_3 {

    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT = 1;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_BASIC_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT = 2;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_VOTE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_ARITHMETIC_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT = 8;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_BALLOT_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_SHUFFLE_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_CLUSTERED_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT = 128;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_QUAD_BIT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSubgroupFeatureFlags;
     * }
     */
    public static final OfInt VkSubgroupFeatureFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPeerMemoryFeatureFlags;
     * }
     */
    public static final OfInt VkPeerMemoryFeatureFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryAllocateFlags;
     * }
     */
    public static final OfInt VkMemoryAllocateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkCommandPoolTrimFlags;
     * }
     */
    public static final OfInt VkCommandPoolTrimFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorUpdateTemplateCreateFlags;
     * }
     */
    public static final OfInt VkDescriptorUpdateTemplateCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryHandleTypeFlags;
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryFeatureFlags;
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalFenceHandleTypeFlags;
     * }
     */
    public static final OfInt VkExternalFenceHandleTypeFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalFenceFeatureFlags;
     * }
     */
    public static final OfInt VkExternalFenceFeatureFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT = 1;
     * }
     */
    public static int VK_FENCE_IMPORT_TEMPORARY_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1;
     * }
     */
    public static int VK_FENCE_IMPORT_TEMPORARY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkFenceImportFlags;
     * }
     */
    public static final OfInt VkFenceImportFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1;
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1;
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSemaphoreImportFlags;
     * }
     */
    public static final OfInt VkSemaphoreImportFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalSemaphoreHandleTypeFlags;
     * }
     */
    public static final OfInt VkExternalSemaphoreHandleTypeFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalSemaphoreFeatureFlags;
     * }
     */
    public static final OfInt VkExternalSemaphoreFeatureFlags = JAVA_INT;
    public static MethodHandle vkEnumerateInstanceVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$0,"vkEnumerateInstanceVersion");
    }
    /**
     * {@snippet :
     * VkResult vkEnumerateInstanceVersion(uint32_t* pApiVersion);
     * }
     */
    public static int vkEnumerateInstanceVersion(MemorySegment pApiVersion) {
        var mh$ = vkEnumerateInstanceVersion$MH();
        try {
            return (int)mh$.invokeExact(pApiVersion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindBufferMemory2$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$1,"vkBindBufferMemory2");
    }
    /**
     * {@snippet :
     * VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos);
     * }
     */
    public static int vkBindBufferMemory2(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindBufferMemory2$MH();
        try {
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindImageMemory2$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$2,"vkBindImageMemory2");
    }
    /**
     * {@snippet :
     * VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos);
     * }
     */
    public static int vkBindImageMemory2(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindImageMemory2$MH();
        try {
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceGroupPeerMemoryFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$3,"vkGetDeviceGroupPeerMemoryFeatures");
    }
    /**
     * {@snippet :
     * void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
     * }
     */
    public static void vkGetDeviceGroupPeerMemoryFeatures(MemorySegment device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, MemorySegment pPeerMemoryFeatures) {
        var mh$ = vkGetDeviceGroupPeerMemoryFeatures$MH();
        try {
            mh$.invokeExact(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDeviceMask$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$4,"vkCmdSetDeviceMask");
    }
    /**
     * {@snippet :
     * void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask);
     * }
     */
    public static void vkCmdSetDeviceMask(MemorySegment commandBuffer, int deviceMask) {
        var mh$ = vkCmdSetDeviceMask$MH();
        try {
            mh$.invokeExact(commandBuffer, deviceMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDispatchBase$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$5,"vkCmdDispatchBase");
    }
    /**
     * {@snippet :
     * void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
     * }
     */
    public static void vkCmdDispatchBase(MemorySegment commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatchBase$MH();
        try {
            mh$.invokeExact(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumeratePhysicalDeviceGroups$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$0,"vkEnumeratePhysicalDeviceGroups");
    }
    /**
     * {@snippet :
     * VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
     * }
     */
    public static int vkEnumeratePhysicalDeviceGroups(MemorySegment instance, MemorySegment pPhysicalDeviceGroupCount, MemorySegment pPhysicalDeviceGroupProperties) {
        var mh$ = vkEnumeratePhysicalDeviceGroups$MH();
        try {
            return (int)mh$.invokeExact(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageMemoryRequirements2$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$1,"vkGetImageMemoryRequirements2");
    }
    /**
     * {@snippet :
     * void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetImageMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements2$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferMemoryRequirements2$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$2,"vkGetBufferMemoryRequirements2");
    }
    /**
     * {@snippet :
     * void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetBufferMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements2$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageSparseMemoryRequirements2$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$3,"vkGetImageSparseMemoryRequirements2");
    }
    /**
     * {@snippet :
     * void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
     * }
     */
    public static void vkGetImageSparseMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements2$MH();
        try {
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFeatures2$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$4,"vkGetPhysicalDeviceFeatures2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
     * }
     */
    public static void vkGetPhysicalDeviceFeatures2(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures2$MH();
        try {
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$5,"vkGetPhysicalDeviceProperties2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceProperties2(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties2$MH();
        try {
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFormatProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$0,"vkGetPhysicalDeviceFormatProperties2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties2(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties2$MH();
        try {
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$1,"vkGetPhysicalDeviceImageFormatProperties2");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties2(MemorySegment physicalDevice, MemorySegment pImageFormatInfo, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties2$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$2,"vkGetPhysicalDeviceQueueFamilyProperties2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties2(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties2$MH();
        try {
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$3,"vkGetPhysicalDeviceMemoryProperties2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties2(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties2$MH();
        try {
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties2$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$4,"vkGetPhysicalDeviceSparseImageFormatProperties2");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties2(MemorySegment physicalDevice, MemorySegment pFormatInfo, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties2$MH();
        try {
            mh$.invokeExact(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkTrimCommandPool$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$5,"vkTrimCommandPool");
    }
    /**
     * {@snippet :
     * void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
     * }
     */
    public static void vkTrimCommandPool(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkTrimCommandPool$MH();
        try {
            mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceQueue2$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$0,"vkGetDeviceQueue2");
    }
    /**
     * {@snippet :
     * void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue);
     * }
     */
    public static void vkGetDeviceQueue2(MemorySegment device, MemorySegment pQueueInfo, MemorySegment pQueue) {
        var mh$ = vkGetDeviceQueue2$MH();
        try {
            mh$.invokeExact(device, pQueueInfo, pQueue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateSamplerYcbcrConversion$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$1,"vkCreateSamplerYcbcrConversion");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
     * }
     */
    public static int vkCreateSamplerYcbcrConversion(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pYcbcrConversion) {
        var mh$ = vkCreateSamplerYcbcrConversion$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pYcbcrConversion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroySamplerYcbcrConversion$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$2,"vkDestroySamplerYcbcrConversion");
    }
    /**
     * {@snippet :
     * void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySamplerYcbcrConversion(MemorySegment device, MemorySegment ycbcrConversion, MemorySegment pAllocator) {
        var mh$ = vkDestroySamplerYcbcrConversion$MH();
        try {
            mh$.invokeExact(device, ycbcrConversion, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDescriptorUpdateTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$3,"vkCreateDescriptorUpdateTemplate");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
     * }
     */
    public static int vkCreateDescriptorUpdateTemplate(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorUpdateTemplate) {
        var mh$ = vkCreateDescriptorUpdateTemplate$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDescriptorUpdateTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$4,"vkDestroyDescriptorUpdateTemplate");
    }
    /**
     * {@snippet :
     * void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDescriptorUpdateTemplate(MemorySegment device, MemorySegment descriptorUpdateTemplate, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorUpdateTemplate$MH();
        try {
            mh$.invokeExact(device, descriptorUpdateTemplate, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUpdateDescriptorSetWithTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$5,"vkUpdateDescriptorSetWithTemplate");
    }
    /**
     * {@snippet :
     * void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
     * }
     */
    public static void vkUpdateDescriptorSetWithTemplate(MemorySegment device, MemorySegment descriptorSet, MemorySegment descriptorUpdateTemplate, MemorySegment pData) {
        var mh$ = vkUpdateDescriptorSetWithTemplate$MH();
        try {
            mh$.invokeExact(device, descriptorSet, descriptorUpdateTemplate, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceExternalBufferProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$0,"vkGetPhysicalDeviceExternalBufferProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalBufferProperties(MemorySegment physicalDevice, MemorySegment pExternalBufferInfo, MemorySegment pExternalBufferProperties) {
        var mh$ = vkGetPhysicalDeviceExternalBufferProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceExternalFenceProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$1,"vkGetPhysicalDeviceExternalFenceProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalFenceProperties(MemorySegment physicalDevice, MemorySegment pExternalFenceInfo, MemorySegment pExternalFenceProperties) {
        var mh$ = vkGetPhysicalDeviceExternalFenceProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceExternalSemaphoreProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$2,"vkGetPhysicalDeviceExternalSemaphoreProperties");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalSemaphoreProperties(MemorySegment physicalDevice, MemorySegment pExternalSemaphoreInfo, MemorySegment pExternalSemaphoreProperties) {
        var mh$ = vkGetPhysicalDeviceExternalSemaphoreProperties$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorSetLayoutSupport$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$3,"vkGetDescriptorSetLayoutSupport");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);
     * }
     */
    public static void vkGetDescriptorSetLayoutSupport(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pSupport) {
        var mh$ = vkGetDescriptorSetLayoutSupport$MH();
        try {
            mh$.invokeExact(device, pCreateInfo, pSupport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY = 1;
     * }
     */
    public static int VK_DRIVER_ID_AMD_PROPRIETARY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE = 2;
     * }
     */
    public static int VK_DRIVER_ID_AMD_OPEN_SOURCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_RADV = 3;
     * }
     */
    public static int VK_DRIVER_ID_MESA_RADV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4;
     * }
     */
    public static int VK_DRIVER_ID_NVIDIA_PROPRIETARY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5;
     * }
     */
    public static int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6;
     * }
     */
    public static int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7;
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_PROPRIETARY() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8;
     * }
     */
    public static int VK_DRIVER_ID_QUALCOMM_PROPRIETARY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY = 9;
     * }
     */
    public static int VK_DRIVER_ID_ARM_PROPRIETARY() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10;
     * }
     */
    public static int VK_DRIVER_ID_GOOGLE_SWIFTSHADER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY = 11;
     * }
     */
    public static int VK_DRIVER_ID_GGP_PROPRIETARY() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12;
     * }
     */
    public static int VK_DRIVER_ID_BROADCOM_PROPRIETARY() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_LLVMPIPE = 13;
     * }
     */
    public static int VK_DRIVER_ID_MESA_LLVMPIPE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MOLTENVK = 14;
     * }
     */
    public static int VK_DRIVER_ID_MOLTENVK() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_COREAVI_PROPRIETARY = 15;
     * }
     */
    public static int VK_DRIVER_ID_COREAVI_PROPRIETARY() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_JUICE_PROPRIETARY = 16;
     * }
     */
    public static int VK_DRIVER_ID_JUICE_PROPRIETARY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17;
     * }
     */
    public static int VK_DRIVER_ID_VERISILICON_PROPRIETARY() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_TURNIP = 18;
     * }
     */
    public static int VK_DRIVER_ID_MESA_TURNIP() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_V3DV = 19;
     * }
     */
    public static int VK_DRIVER_ID_MESA_V3DV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_PANVK = 20;
     * }
     */
    public static int VK_DRIVER_ID_MESA_PANVK() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21;
     * }
     */
    public static int VK_DRIVER_ID_SAMSUNG_PROPRIETARY() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_VENUS = 22;
     * }
     */
    public static int VK_DRIVER_ID_MESA_VENUS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_DOZEN = 23;
     * }
     */
    public static int VK_DRIVER_ID_MESA_DOZEN() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_NVK = 24;
     * }
     */
    public static int VK_DRIVER_ID_MESA_NVK() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25;
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1;
     * }
     */
    public static int VK_DRIVER_ID_AMD_PROPRIETARY_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2;
     * }
     */
    public static int VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MESA_RADV_KHR = 3;
     * }
     */
    public static int VK_DRIVER_ID_MESA_RADV_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4;
     * }
     */
    public static int VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5;
     * }
     */
    public static int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6;
     * }
     */
    public static int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7;
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8;
     * }
     */
    public static int VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9;
     * }
     */
    public static int VK_DRIVER_ID_ARM_PROPRIETARY_KHR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10;
     * }
     */
    public static int VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11;
     * }
     */
    public static int VK_DRIVER_ID_GGP_PROPRIETARY_KHR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12;
     * }
     */
    public static int VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkDriverId.VK_DRIVER_ID_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DRIVER_ID_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN = 1;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX = 2;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MIN_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY = 0;
     * }
     */
    public static int VK_SEMAPHORE_TYPE_BINARY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE = 1;
     * }
     */
    public static int VK_SEMAPHORE_TYPE_TIMELINE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY_KHR = 0;
     * }
     */
    public static int VK_SEMAPHORE_TYPE_BINARY_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1;
     * }
     */
    public static int VK_SEMAPHORE_TYPE_TIMELINE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SEMAPHORE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE = 0;
     * }
     */
    public static int VK_RESOLVE_MODE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1;
     * }
     */
    public static int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT = 2;
     * }
     */
    public static int VK_RESOLVE_MODE_AVERAGE_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT = 4;
     * }
     */
    public static int VK_RESOLVE_MODE_MIN_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT = 8;
     * }
     */
    public static int VK_RESOLVE_MODE_MAX_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE_KHR = 0;
     * }
     */
    public static int VK_RESOLVE_MODE_NONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1;
     * }
     */
    public static int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2;
     * }
     */
    public static int VK_RESOLVE_MODE_AVERAGE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT_KHR = 4;
     * }
     */
    public static int VK_RESOLVE_MODE_MIN_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT_KHR = 8;
     * }
     */
    public static int VK_RESOLVE_MODE_MAX_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkResolveModeFlags;
     * }
     */
    public static final OfInt VkResolveModeFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorBindingFlags;
     * }
     */
    public static final OfInt VkDescriptorBindingFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT = 1;
     * }
     */
    public static int VK_SEMAPHORE_WAIT_ANY_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1;
     * }
     */
    public static int VK_SEMAPHORE_WAIT_ANY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSemaphoreWaitFlags;
     * }
     */
    public static final OfInt VkSemaphoreWaitFlags = JAVA_INT;
    public static MethodHandle vkCmdDrawIndirectCount$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$1,"vkCmdDrawIndirectCount");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndirectCount(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCount$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndexedIndirectCount$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$2,"vkCmdDrawIndexedIndirectCount");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndexedIndirectCount(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCount$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateRenderPass2$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$3,"vkCreateRenderPass2");
    }
    /**
     * {@snippet :
     * VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
     * }
     */
    public static int vkCreateRenderPass2(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass2$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginRenderPass2$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$4,"vkCmdBeginRenderPass2");
    }
    /**
     * {@snippet :
     * void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo);
     * }
     */
    public static void vkCmdBeginRenderPass2(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, MemorySegment pSubpassBeginInfo) {
        var mh$ = vkCmdBeginRenderPass2$MH();
        try {
            mh$.invokeExact(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdNextSubpass2$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$5,"vkCmdNextSubpass2");
    }
    /**
     * {@snippet :
     * void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo);
     * }
     */
    public static void vkCmdNextSubpass2(MemorySegment commandBuffer, MemorySegment pSubpassBeginInfo, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdNextSubpass2$MH();
        try {
            mh$.invokeExact(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndRenderPass2$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$0,"vkCmdEndRenderPass2");
    }
    /**
     * {@snippet :
     * void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo);
     * }
     */
    public static void vkCmdEndRenderPass2(MemorySegment commandBuffer, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdEndRenderPass2$MH();
        try {
            mh$.invokeExact(commandBuffer, pSubpassEndInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkResetQueryPool$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$1,"vkResetQueryPool");
    }
    /**
     * {@snippet :
     * void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
     * }
     */
    public static void vkResetQueryPool(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkResetQueryPool$MH();
        try {
            mh$.invokeExact(device, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSemaphoreCounterValue$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$2,"vkGetSemaphoreCounterValue");
    }
    /**
     * {@snippet :
     * VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue);
     * }
     */
    public static int vkGetSemaphoreCounterValue(MemorySegment device, MemorySegment semaphore, MemorySegment pValue) {
        var mh$ = vkGetSemaphoreCounterValue$MH();
        try {
            return (int)mh$.invokeExact(device, semaphore, pValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWaitSemaphores$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$3,"vkWaitSemaphores");
    }
    /**
     * {@snippet :
     * VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout);
     * }
     */
    public static int vkWaitSemaphores(MemorySegment device, MemorySegment pWaitInfo, long timeout) {
        var mh$ = vkWaitSemaphores$MH();
        try {
            return (int)mh$.invokeExact(device, pWaitInfo, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSignalSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$4,"vkSignalSemaphore");
    }
    /**
     * {@snippet :
     * VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo);
     * }
     */
    public static int vkSignalSemaphore(MemorySegment device, MemorySegment pSignalInfo) {
        var mh$ = vkSignalSemaphore$MH();
        try {
            return (int)mh$.invokeExact(device, pSignalInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferDeviceAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$5,"vkGetBufferDeviceAddress");
    }
    /**
     * {@snippet :
     * VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo);
     * }
     */
    public static long vkGetBufferDeviceAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddress$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferOpaqueCaptureAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$0,"vkGetBufferOpaqueCaptureAddress");
    }
    /**
     * {@snippet :
     * uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo);
     * }
     */
    public static long vkGetBufferOpaqueCaptureAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferOpaqueCaptureAddress$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceMemoryOpaqueCaptureAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$1,"vkGetDeviceMemoryOpaqueCaptureAddress");
    }
    /**
     * {@snippet :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);
     * }
     */
    public static long vkGetDeviceMemoryOpaqueCaptureAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetDeviceMemoryOpaqueCaptureAddress$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long VkFlags64;
     * }
     */
    public static final OfLong VkFlags64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct VkPrivateDataSlot_T* VkPrivateDataSlot;
     * }
     */
    public static final AddressLayout VkPrivateDataSlot = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCreationFeedbackFlags;
     * }
     */
    public static final OfInt VkPipelineCreationFeedbackFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT = 1;
     * }
     */
    public static int VK_TOOL_PURPOSE_VALIDATION_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT = 2;
     * }
     */
    public static int VK_TOOL_PURPOSE_PROFILING_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT = 4;
     * }
     */
    public static int VK_TOOL_PURPOSE_TRACING_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8;
     * }
     */
    public static int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16;
     * }
     */
    public static int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32;
     * }
     */
    public static int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64;
     * }
     */
    public static int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1;
     * }
     */
    public static int VK_TOOL_PURPOSE_VALIDATION_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2;
     * }
     */
    public static int VK_TOOL_PURPOSE_PROFILING_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4;
     * }
     */
    public static int VK_TOOL_PURPOSE_TRACING_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8;
     * }
     */
    public static int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16;
     * }
     */
    public static int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkToolPurposeFlags;
     * }
     */
    public static final OfInt VkToolPurposeFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPrivateDataSlotCreateFlags;
     * }
     */
    public static final OfInt VkPrivateDataSlotCreateFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long VkPipelineStageFlags2;
     * }
     */
    public static final OfLong VkPipelineStageFlags2 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkPipelineStageFlagBits2;
     * }
     */
    public static final OfLong VkPipelineStageFlagBits2 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkAccessFlags2;
     * }
     */
    public static final OfLong VkAccessFlags2 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkAccessFlagBits2;
     * }
     */
    public static final OfLong VkAccessFlagBits2 = JAVA_LONG;
    /**
     * {@snippet :
     * enum VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT = 1;
     * }
     */
    public static int VK_SUBMIT_PROTECTED_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT_KHR = 1;
     * }
     */
    public static int VK_SUBMIT_PROTECTED_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSubmitFlagBits.VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_SUBMIT_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSubmitFlags;
     * }
     */
    public static final OfInt VkSubmitFlags = JAVA_INT;
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1;
     * }
     */
    public static int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT = 2;
     * }
     */
    public static int VK_RENDERING_SUSPENDING_BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT = 4;
     * }
     */
    public static int VK_RENDERING_RESUMING_BIT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8;
     * }
     */
    public static int VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1;
     * }
     */
    public static int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT_KHR = 2;
     * }
     */
    public static int VK_RENDERING_SUSPENDING_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT_KHR = 4;
     * }
     */
    public static int VK_RENDERING_RESUMING_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkRenderingFlagBits.VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647;
     * }
     */
    public static int VK_RENDERING_FLAG_BITS_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkRenderingFlags;
     * }
     */
    public static final OfInt VkRenderingFlags = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long VkFormatFeatureFlags2;
     * }
     */
    public static final OfLong VkFormatFeatureFlags2 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkFormatFeatureFlagBits2;
     * }
     */
    public static final OfLong VkFormatFeatureFlagBits2 = JAVA_LONG;
    public static MethodHandle vkGetPhysicalDeviceToolProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$0,"vkGetPhysicalDeviceToolProperties");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);
     * }
     */
    public static int vkGetPhysicalDeviceToolProperties(MemorySegment physicalDevice, MemorySegment pToolCount, MemorySegment pToolProperties) {
        var mh$ = vkGetPhysicalDeviceToolProperties$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pToolCount, pToolProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreatePrivateDataSlot$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$1,"vkCreatePrivateDataSlot");
    }
    /**
     * {@snippet :
     * VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot);
     * }
     */
    public static int vkCreatePrivateDataSlot(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPrivateDataSlot) {
        var mh$ = vkCreatePrivateDataSlot$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyPrivateDataSlot$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$2,"vkDestroyPrivateDataSlot");
    }
    /**
     * {@snippet :
     * void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyPrivateDataSlot(MemorySegment device, MemorySegment privateDataSlot, MemorySegment pAllocator) {
        var mh$ = vkDestroyPrivateDataSlot$MH();
        try {
            mh$.invokeExact(device, privateDataSlot, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetPrivateData$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$3,"vkSetPrivateData");
    }
    /**
     * {@snippet :
     * VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data);
     * }
     */
    public static int vkSetPrivateData(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, long data) {
        var mh$ = vkSetPrivateData$MH();
        try {
            return (int)mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPrivateData$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$4,"vkGetPrivateData");
    }
    /**
     * {@snippet :
     * void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData);
     * }
     */
    public static void vkGetPrivateData(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, MemorySegment pData) {
        var mh$ = vkGetPrivateData$MH();
        try {
            mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetEvent2$MH() {
        return RuntimeHelper.requireNonNull(constants$422.const$5,"vkCmdSetEvent2");
    }
    /**
     * {@snippet :
     * void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo);
     * }
     */
    public static void vkCmdSetEvent2(MemorySegment commandBuffer, MemorySegment event, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdSetEvent2$MH();
        try {
            mh$.invokeExact(commandBuffer, event, pDependencyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResetEvent2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$0,"vkCmdResetEvent2");
    }
    /**
     * {@snippet :
     * void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
     * }
     */
    public static void vkCmdResetEvent2(MemorySegment commandBuffer, MemorySegment event, long stageMask) {
        var mh$ = vkCmdResetEvent2$MH();
        try {
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWaitEvents2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$1,"vkCmdWaitEvents2");
    }
    /**
     * {@snippet :
     * void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos);
     * }
     */
    public static void vkCmdWaitEvents2(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, MemorySegment pDependencyInfos) {
        var mh$ = vkCmdWaitEvents2$MH();
        try {
            mh$.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPipelineBarrier2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$2,"vkCmdPipelineBarrier2");
    }
    /**
     * {@snippet :
     * void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo);
     * }
     */
    public static void vkCmdPipelineBarrier2(MemorySegment commandBuffer, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdPipelineBarrier2$MH();
        try {
            mh$.invokeExact(commandBuffer, pDependencyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteTimestamp2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$3,"vkCmdWriteTimestamp2");
    }
    /**
     * {@snippet :
     * void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
     * }
     */
    public static void vkCmdWriteTimestamp2(MemorySegment commandBuffer, long stage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp2$MH();
        try {
            mh$.invokeExact(commandBuffer, stage, queryPool, query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueSubmit2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$4,"vkQueueSubmit2");
    }
    /**
     * {@snippet :
     * VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence);
     * }
     */
    public static int vkQueueSubmit2(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit2$MH();
        try {
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBuffer2$MH() {
        return RuntimeHelper.requireNonNull(constants$423.const$5,"vkCmdCopyBuffer2");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo);
     * }
     */
    public static void vkCmdCopyBuffer2(MemorySegment commandBuffer, MemorySegment pCopyBufferInfo) {
        var mh$ = vkCmdCopyBuffer2$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImage2$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$0,"vkCmdCopyImage2");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo);
     * }
     */
    public static void vkCmdCopyImage2(MemorySegment commandBuffer, MemorySegment pCopyImageInfo) {
        var mh$ = vkCmdCopyImage2$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBufferToImage2$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$1,"vkCmdCopyBufferToImage2");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);
     * }
     */
    public static void vkCmdCopyBufferToImage2(MemorySegment commandBuffer, MemorySegment pCopyBufferToImageInfo) {
        var mh$ = vkCmdCopyBufferToImage2$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyBufferToImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImageToBuffer2$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$2,"vkCmdCopyImageToBuffer2");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);
     * }
     */
    public static void vkCmdCopyImageToBuffer2(MemorySegment commandBuffer, MemorySegment pCopyImageToBufferInfo) {
        var mh$ = vkCmdCopyImageToBuffer2$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyImageToBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBlitImage2$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$3,"vkCmdBlitImage2");
    }
    /**
     * {@snippet :
     * void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo);
     * }
     */
    public static void vkCmdBlitImage2(MemorySegment commandBuffer, MemorySegment pBlitImageInfo) {
        var mh$ = vkCmdBlitImage2$MH();
        try {
            mh$.invokeExact(commandBuffer, pBlitImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResolveImage2$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$4,"vkCmdResolveImage2");
    }
    /**
     * {@snippet :
     * void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo);
     * }
     */
    public static void vkCmdResolveImage2(MemorySegment commandBuffer, MemorySegment pResolveImageInfo) {
        var mh$ = vkCmdResolveImage2$MH();
        try {
            mh$.invokeExact(commandBuffer, pResolveImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginRendering$MH() {
        return RuntimeHelper.requireNonNull(constants$424.const$5,"vkCmdBeginRendering");
    }
    /**
     * {@snippet :
     * void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo);
     * }
     */
    public static void vkCmdBeginRendering(MemorySegment commandBuffer, MemorySegment pRenderingInfo) {
        var mh$ = vkCmdBeginRendering$MH();
        try {
            mh$.invokeExact(commandBuffer, pRenderingInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndRendering$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$0,"vkCmdEndRendering");
    }
    /**
     * {@snippet :
     * void vkCmdEndRendering(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdEndRendering(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRendering$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetCullMode$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$1,"vkCmdSetCullMode");
    }
    /**
     * {@snippet :
     * void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
     * }
     */
    public static void vkCmdSetCullMode(MemorySegment commandBuffer, int cullMode) {
        var mh$ = vkCmdSetCullMode$MH();
        try {
            mh$.invokeExact(commandBuffer, cullMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$2,"vkCmdSetFrontFace");
    }
    /**
     * {@snippet :
     * void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
     * }
     */
    public static void vkCmdSetFrontFace(MemorySegment commandBuffer, int frontFace) {
        var mh$ = vkCmdSetFrontFace$MH();
        try {
            mh$.invokeExact(commandBuffer, frontFace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPrimitiveTopology$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$3,"vkCmdSetPrimitiveTopology");
    }
    /**
     * {@snippet :
     * void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
     * }
     */
    public static void vkCmdSetPrimitiveTopology(MemorySegment commandBuffer, int primitiveTopology) {
        var mh$ = vkCmdSetPrimitiveTopology$MH();
        try {
            mh$.invokeExact(commandBuffer, primitiveTopology);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportWithCount$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$4,"vkCmdSetViewportWithCount");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports);
     * }
     */
    public static void vkCmdSetViewportWithCount(MemorySegment commandBuffer, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewportWithCount$MH();
        try {
            mh$.invokeExact(commandBuffer, viewportCount, pViewports);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetScissorWithCount$MH() {
        return RuntimeHelper.requireNonNull(constants$425.const$5,"vkCmdSetScissorWithCount");
    }
    /**
     * {@snippet :
     * void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors);
     * }
     */
    public static void vkCmdSetScissorWithCount(MemorySegment commandBuffer, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissorWithCount$MH();
        try {
            mh$.invokeExact(commandBuffer, scissorCount, pScissors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBindVertexBuffers2$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$0,"vkCmdBindVertexBuffers2");
    }
    /**
     * {@snippet :
     * void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides);
     * }
     */
    public static void vkCmdBindVertexBuffers2(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes, MemorySegment pStrides) {
        var mh$ = vkCmdBindVertexBuffers2$MH();
        try {
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthTestEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$1,"vkCmdSetDepthTestEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
     * }
     */
    public static void vkCmdSetDepthTestEnable(MemorySegment commandBuffer, int depthTestEnable) {
        var mh$ = vkCmdSetDepthTestEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, depthTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthWriteEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$2,"vkCmdSetDepthWriteEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
     * }
     */
    public static void vkCmdSetDepthWriteEnable(MemorySegment commandBuffer, int depthWriteEnable) {
        var mh$ = vkCmdSetDepthWriteEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, depthWriteEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthCompareOp$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$3,"vkCmdSetDepthCompareOp");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
     * }
     */
    public static void vkCmdSetDepthCompareOp(MemorySegment commandBuffer, int depthCompareOp) {
        var mh$ = vkCmdSetDepthCompareOp$MH();
        try {
            mh$.invokeExact(commandBuffer, depthCompareOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBoundsTestEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$4,"vkCmdSetDepthBoundsTestEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
     * }
     */
    public static void vkCmdSetDepthBoundsTestEnable(MemorySegment commandBuffer, int depthBoundsTestEnable) {
        var mh$ = vkCmdSetDepthBoundsTestEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, depthBoundsTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilTestEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$426.const$5,"vkCmdSetStencilTestEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
     * }
     */
    public static void vkCmdSetStencilTestEnable(MemorySegment commandBuffer, int stencilTestEnable) {
        var mh$ = vkCmdSetStencilTestEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, stencilTestEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$0,"vkCmdSetStencilOp");
    }
    /**
     * {@snippet :
     * void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
     * }
     */
    public static void vkCmdSetStencilOp(MemorySegment commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp) {
        var mh$ = vkCmdSetStencilOp$MH();
        try {
            mh$.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetRasterizerDiscardEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$1,"vkCmdSetRasterizerDiscardEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
     * }
     */
    public static void vkCmdSetRasterizerDiscardEnable(MemorySegment commandBuffer, int rasterizerDiscardEnable) {
        var mh$ = vkCmdSetRasterizerDiscardEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, rasterizerDiscardEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDepthBiasEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$2,"vkCmdSetDepthBiasEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
     * }
     */
    public static void vkCmdSetDepthBiasEnable(MemorySegment commandBuffer, int depthBiasEnable) {
        var mh$ = vkCmdSetDepthBiasEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, depthBiasEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetPrimitiveRestartEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$3,"vkCmdSetPrimitiveRestartEnable");
    }
    /**
     * {@snippet :
     * void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
     * }
     */
    public static void vkCmdSetPrimitiveRestartEnable(MemorySegment commandBuffer, int primitiveRestartEnable) {
        var mh$ = vkCmdSetPrimitiveRestartEnable$MH();
        try {
            mh$.invokeExact(commandBuffer, primitiveRestartEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceBufferMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$4,"vkGetDeviceBufferMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetDeviceBufferMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceBufferMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceImageMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$5,"vkGetDeviceImageMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetDeviceImageMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceImageMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceImageSparseMemoryRequirements$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$0,"vkGetDeviceImageSparseMemoryRequirements");
    }
    /**
     * {@snippet :
     * void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
     * }
     */
    public static void vkGetDeviceImageSparseMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetDeviceImageSparseMemoryRequirements$MH();
        try {
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkSurfaceKHR_T* VkSurfaceKHR;
     * }
     */
    public static final AddressLayout VkSurfaceKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR = 0;
     * }
     */
    public static int VK_PRESENT_MODE_IMMEDIATE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR = 1;
     * }
     */
    public static int VK_PRESENT_MODE_MAILBOX_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR = 2;
     * }
     */
    public static int VK_PRESENT_MODE_FIFO_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3;
     * }
     */
    public static int VK_PRESENT_MODE_FIFO_RELAXED_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000;
     * }
     */
    public static int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR() {
        return (int)1000111000L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001;
     * }
     */
    public static int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR() {
        return (int)1000111001L;
    }
    /**
     * {@snippet :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PRESENT_MODE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0;
     * }
     */
    public static int VK_COLOR_SPACE_SRGB_NONLINEAR_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001;
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT() {
        return (int)1000104001L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002;
     * }
     */
    public static int VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT() {
        return (int)1000104002L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003;
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT() {
        return (int)1000104003L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004;
     * }
     */
    public static int VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT() {
        return (int)1000104004L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005;
     * }
     */
    public static int VK_COLOR_SPACE_BT709_LINEAR_EXT() {
        return (int)1000104005L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006;
     * }
     */
    public static int VK_COLOR_SPACE_BT709_NONLINEAR_EXT() {
        return (int)1000104006L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007;
     * }
     */
    public static int VK_COLOR_SPACE_BT2020_LINEAR_EXT() {
        return (int)1000104007L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008;
     * }
     */
    public static int VK_COLOR_SPACE_HDR10_ST2084_EXT() {
        return (int)1000104008L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009;
     * }
     */
    public static int VK_COLOR_SPACE_DOLBYVISION_EXT() {
        return (int)1000104009L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010;
     * }
     */
    public static int VK_COLOR_SPACE_HDR10_HLG_EXT() {
        return (int)1000104010L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011;
     * }
     */
    public static int VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT() {
        return (int)1000104011L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012;
     * }
     */
    public static int VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT() {
        return (int)1000104012L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013;
     * }
     */
    public static int VK_COLOR_SPACE_PASS_THROUGH_EXT() {
        return (int)1000104013L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014;
     * }
     */
    public static int VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT() {
        return (int)1000104014L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000;
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_NATIVE_AMD() {
        return (int)1000213000L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0;
     * }
     */
    public static int VK_COLORSPACE_SRGB_NONLINEAR_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003;
     * }
     */
    public static int VK_COLOR_SPACE_DCI_P3_LINEAR_EXT() {
        return (int)1000104003L;
    }
    /**
     * {@snippet :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_COLOR_SPACE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1;
     * }
     */
    public static int VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2;
     * }
     */
    public static int VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4;
     * }
     */
    public static int VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8;
     * }
     */
    public static int VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCompositeAlphaFlagsKHR;
     * }
     */
    public static final OfInt VkCompositeAlphaFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkSurfaceTransformFlagsKHR;
     * }
     */
    public static final OfInt VkSurfaceTransformFlagsKHR = JAVA_INT;
    public static MethodHandle vkDestroySurfaceKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$430.const$5,"vkDestroySurfaceKHR");
    }
    /**
     * {@snippet :
     * void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySurfaceKHR(MemorySegment instance, MemorySegment surface, MemorySegment pAllocator) {
        var mh$ = vkDestroySurfaceKHR$MH();
        try {
            mh$.invokeExact(instance, surface, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfaceSupportKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$0,"vkGetPhysicalDeviceSurfaceSupportKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceSupportKHR(MemorySegment physicalDevice, int queueFamilyIndex, MemorySegment surface, MemorySegment pSupported) {
        var mh$ = vkGetPhysicalDeviceSurfaceSupportKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, queueFamilyIndex, surface, pSupported);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilitiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$1,"vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilitiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfaceFormatsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$2,"vkGetPhysicalDeviceSurfaceFormatsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceFormatsKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceFormatCount, MemorySegment pSurfaceFormats) {
        var mh$ = vkGetPhysicalDeviceSurfaceFormatsKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfacePresentModesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$3,"vkGetPhysicalDeviceSurfacePresentModesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes);
     * }
     */
    public static int vkGetPhysicalDeviceSurfacePresentModesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pPresentModeCount, MemorySegment pPresentModes) {
        var mh$ = vkGetPhysicalDeviceSurfacePresentModesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, surface, pPresentModeCount, pPresentModes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkSwapchainKHR_T* VkSwapchainKHR;
     * }
     */
    public static final AddressLayout VkSwapchainKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1;
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2;
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4;
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8;
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSwapchainCreateFlagsKHR;
     * }
     */
    public static final OfInt VkSwapchainCreateFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1;
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2;
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4;
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8;
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDeviceGroupPresentModeFlagsKHR;
     * }
     */
    public static final OfInt VkDeviceGroupPresentModeFlagsKHR = JAVA_INT;
    public static MethodHandle vkCreateSwapchainKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$1,"vkCreateSwapchainKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);
     * }
     */
    public static int vkCreateSwapchainKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSwapchain) {
        var mh$ = vkCreateSwapchainKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSwapchain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroySwapchainKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$2,"vkDestroySwapchainKHR");
    }
    /**
     * {@snippet :
     * void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySwapchainKHR(MemorySegment device, MemorySegment swapchain, MemorySegment pAllocator) {
        var mh$ = vkDestroySwapchainKHR$MH();
        try {
            mh$.invokeExact(device, swapchain, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSwapchainImagesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$3,"vkGetSwapchainImagesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages);
     * }
     */
    public static int vkGetSwapchainImagesKHR(MemorySegment device, MemorySegment swapchain, MemorySegment pSwapchainImageCount, MemorySegment pSwapchainImages) {
        var mh$ = vkGetSwapchainImagesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, pSwapchainImageCount, pSwapchainImages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAcquireNextImageKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$4,"vkAcquireNextImageKHR");
    }
    /**
     * {@snippet :
     * VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex);
     * }
     */
    public static int vkAcquireNextImageKHR(MemorySegment device, MemorySegment swapchain, long timeout, MemorySegment semaphore, MemorySegment fence, MemorySegment pImageIndex) {
        var mh$ = vkAcquireNextImageKHR$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, timeout, semaphore, fence, pImageIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueuePresentKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$5,"vkQueuePresentKHR");
    }
    /**
     * {@snippet :
     * VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo);
     * }
     */
    public static int vkQueuePresentKHR(MemorySegment queue, MemorySegment pPresentInfo) {
        var mh$ = vkQueuePresentKHR$MH();
        try {
            return (int)mh$.invokeExact(queue, pPresentInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceGroupPresentCapabilitiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$0,"vkGetDeviceGroupPresentCapabilitiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
     * }
     */
    public static int vkGetDeviceGroupPresentCapabilitiesKHR(MemorySegment device, MemorySegment pDeviceGroupPresentCapabilities) {
        var mh$ = vkGetDeviceGroupPresentCapabilitiesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pDeviceGroupPresentCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceGroupSurfacePresentModesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$1,"vkGetDeviceGroupSurfacePresentModesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes);
     * }
     */
    public static int vkGetDeviceGroupSurfacePresentModesKHR(MemorySegment device, MemorySegment surface, MemorySegment pModes) {
        var mh$ = vkGetDeviceGroupSurfacePresentModesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, surface, pModes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDevicePresentRectanglesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$2,"vkGetPhysicalDevicePresentRectanglesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects);
     * }
     */
    public static int vkGetPhysicalDevicePresentRectanglesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pRectCount, MemorySegment pRects) {
        var mh$ = vkGetPhysicalDevicePresentRectanglesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, surface, pRectCount, pRects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAcquireNextImage2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$3,"vkAcquireNextImage2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex);
     * }
     */
    public static int vkAcquireNextImage2KHR(MemorySegment device, MemorySegment pAcquireInfo, MemorySegment pImageIndex) {
        var mh$ = vkAcquireNextImage2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, pAcquireInfo, pImageIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkDisplayKHR_T* VkDisplayKHR;
     * }
     */
    public static final AddressLayout VkDisplayKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkDisplayModeKHR_T* VkDisplayModeKHR;
     * }
     */
    public static final AddressLayout VkDisplayModeKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int VkDisplayModeCreateFlagsKHR;
     * }
     */
    public static final OfInt VkDisplayModeCreateFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1;
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2;
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4;
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8;
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDisplayPlaneAlphaFlagsKHR;
     * }
     */
    public static final OfInt VkDisplayPlaneAlphaFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDisplaySurfaceCreateFlagsKHR;
     * }
     */
    public static final OfInt VkDisplaySurfaceCreateFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceDisplayPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$0,"vkGetPhysicalDeviceDisplayPropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties);
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPropertiesKHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceDisplayPlanePropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$1,"vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPlanePropertiesKHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPlanePropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDisplayPlaneSupportedDisplaysKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$2,"vkGetDisplayPlaneSupportedDisplaysKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays);
     * }
     */
    public static int vkGetDisplayPlaneSupportedDisplaysKHR(MemorySegment physicalDevice, int planeIndex, MemorySegment pDisplayCount, MemorySegment pDisplays) {
        var mh$ = vkGetDisplayPlaneSupportedDisplaysKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, planeIndex, pDisplayCount, pDisplays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDisplayModePropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$3,"vkGetDisplayModePropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);
     * }
     */
    public static int vkGetDisplayModePropertiesKHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetDisplayModePropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, display, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDisplayModeKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$4,"vkCreateDisplayModeKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);
     * }
     */
    public static int vkCreateDisplayModeKHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pMode) {
        var mh$ = vkCreateDisplayModeKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, display, pCreateInfo, pAllocator, pMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDisplayPlaneCapabilitiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$5,"vkGetDisplayPlaneCapabilitiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);
     * }
     */
    public static int vkGetDisplayPlaneCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment mode, int planeIndex, MemorySegment pCapabilities) {
        var mh$ = vkGetDisplayPlaneCapabilitiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, mode, planeIndex, pCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDisplayPlaneSurfaceKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$0,"vkCreateDisplayPlaneSurfaceKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
     * }
     */
    public static int vkCreateDisplayPlaneSurfaceKHR(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSurface) {
        var mh$ = vkCreateDisplayPlaneSurfaceKHR$MH();
        try {
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateSharedSwapchainsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$2,"vkCreateSharedSwapchainsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);
     * }
     */
    public static int vkCreateSharedSwapchainsKHR(MemorySegment device, int swapchainCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pSwapchains) {
        var mh$ = vkCreateSharedSwapchainsKHR$MH();
        try {
            return (int)mh$.invokeExact(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkVideoSessionKHR_T* VkVideoSessionKHR;
     * }
     */
    public static final AddressLayout VkVideoSessionKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkVideoSessionParametersKHR_T* VkVideoSessionParametersKHR;
     * }
     */
    public static final AddressLayout VkVideoSessionParametersKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_ERROR_KHR = -1;
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_ERROR_KHR() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0;
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_NOT_READY_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1;
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_COMPLETE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0;
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_NONE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoCodecOperationFlagsKHR;
     * }
     */
    public static final OfInt VkVideoCodecOperationFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoChromaSubsamplingFlagsKHR;
     * }
     */
    public static final OfInt VkVideoChromaSubsamplingFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0;
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4;
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16;
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoComponentBitDepthFlagsKHR;
     * }
     */
    public static final OfInt VkVideoComponentBitDepthFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoCapabilityFlagsKHR;
     * }
     */
    public static final OfInt VkVideoCapabilityFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoSessionCreateFlagsKHR;
     * }
     */
    public static final OfInt VkVideoSessionCreateFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkVideoSessionParametersCreateFlagsKHR;
     * }
     */
    public static final OfInt VkVideoSessionParametersCreateFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkVideoBeginCodingFlagsKHR;
     * }
     */
    public static final OfInt VkVideoBeginCodingFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkVideoEndCodingFlagsKHR;
     * }
     */
    public static final OfInt VkVideoEndCodingFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoCodingControlFlagsKHR;
     * }
     */
    public static final OfInt VkVideoCodingControlFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceVideoCapabilitiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$5,"vkGetPhysicalDeviceVideoCapabilitiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities);
     * }
     */
    public static int vkGetPhysicalDeviceVideoCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment pVideoProfile, MemorySegment pCapabilities) {
        var mh$ = vkGetPhysicalDeviceVideoCapabilitiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pVideoProfile, pCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceVideoFormatPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$0,"vkGetPhysicalDeviceVideoFormatPropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceVideoFormatPropertiesKHR(MemorySegment physicalDevice, MemorySegment pVideoFormatInfo, MemorySegment pVideoFormatPropertyCount, MemorySegment pVideoFormatProperties) {
        var mh$ = vkGetPhysicalDeviceVideoFormatPropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateVideoSessionKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$1,"vkCreateVideoSessionKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession);
     * }
     */
    public static int vkCreateVideoSessionKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pVideoSession) {
        var mh$ = vkCreateVideoSessionKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pVideoSession);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyVideoSessionKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$2,"vkDestroyVideoSessionKHR");
    }
    /**
     * {@snippet :
     * void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyVideoSessionKHR(MemorySegment device, MemorySegment videoSession, MemorySegment pAllocator) {
        var mh$ = vkDestroyVideoSessionKHR$MH();
        try {
            mh$.invokeExact(device, videoSession, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetVideoSessionMemoryRequirementsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$3,"vkGetVideoSessionMemoryRequirementsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements);
     * }
     */
    public static int vkGetVideoSessionMemoryRequirementsKHR(MemorySegment device, MemorySegment videoSession, MemorySegment pMemoryRequirementsCount, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetVideoSessionMemoryRequirementsKHR$MH();
        try {
            return (int)mh$.invokeExact(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindVideoSessionMemoryKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$4,"vkBindVideoSessionMemoryKHR");
    }
    /**
     * {@snippet :
     * VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos);
     * }
     */
    public static int vkBindVideoSessionMemoryKHR(MemorySegment device, MemorySegment videoSession, int bindSessionMemoryInfoCount, MemorySegment pBindSessionMemoryInfos) {
        var mh$ = vkBindVideoSessionMemoryKHR$MH();
        try {
            return (int)mh$.invokeExact(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateVideoSessionParametersKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$5,"vkCreateVideoSessionParametersKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters);
     * }
     */
    public static int vkCreateVideoSessionParametersKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pVideoSessionParameters) {
        var mh$ = vkCreateVideoSessionParametersKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pVideoSessionParameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUpdateVideoSessionParametersKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$0,"vkUpdateVideoSessionParametersKHR");
    }
    /**
     * {@snippet :
     * VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo);
     * }
     */
    public static int vkUpdateVideoSessionParametersKHR(MemorySegment device, MemorySegment videoSessionParameters, MemorySegment pUpdateInfo) {
        var mh$ = vkUpdateVideoSessionParametersKHR$MH();
        try {
            return (int)mh$.invokeExact(device, videoSessionParameters, pUpdateInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyVideoSessionParametersKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$1,"vkDestroyVideoSessionParametersKHR");
    }
    /**
     * {@snippet :
     * void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyVideoSessionParametersKHR(MemorySegment device, MemorySegment videoSessionParameters, MemorySegment pAllocator) {
        var mh$ = vkDestroyVideoSessionParametersKHR$MH();
        try {
            mh$.invokeExact(device, videoSessionParameters, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginVideoCodingKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$2,"vkCmdBeginVideoCodingKHR");
    }
    /**
     * {@snippet :
     * void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo);
     * }
     */
    public static void vkCmdBeginVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pBeginInfo) {
        var mh$ = vkCmdBeginVideoCodingKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pBeginInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndVideoCodingKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$3,"vkCmdEndVideoCodingKHR");
    }
    /**
     * {@snippet :
     * void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo);
     * }
     */
    public static void vkCmdEndVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pEndCodingInfo) {
        var mh$ = vkCmdEndVideoCodingKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pEndCodingInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdControlVideoCodingKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$4,"vkCmdControlVideoCodingKHR");
    }
    /**
     * {@snippet :
     * void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo);
     * }
     */
    public static void vkCmdControlVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pCodingControlInfo) {
        var mh$ = vkCmdControlVideoCodingKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pCodingControlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoDecodeCapabilityFlagsKHR;
     * }
     */
    public static final OfInt VkVideoDecodeCapabilityFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0;
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_DEFAULT_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4;
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoDecodeUsageFlagsKHR;
     * }
     */
    public static final OfInt VkVideoDecodeUsageFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkVideoDecodeFlagsKHR;
     * }
     */
    public static final OfInt VkVideoDecodeFlagsKHR = JAVA_INT;
    public static MethodHandle vkCmdDecodeVideoKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$0,"vkCmdDecodeVideoKHR");
    }
    /**
     * {@snippet :
     * void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo);
     * }
     */
    public static void vkCmdDecodeVideoKHR(MemorySegment commandBuffer, MemorySegment pDecodeInfo) {
        var mh$ = vkCmdDecodeVideoKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pDecodeInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_420() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_422() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_444() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_BASELINE() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAIN = 77;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_MAIN() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH = 100;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_HIGH() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE() {
        return (int)244L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_0 = 0;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_1 = 1;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_2 = 2;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_3 = 3;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_0 = 4;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_0() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_1 = 5;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_1() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_2 = 6;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_2() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_0 = 7;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_0() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_1 = 8;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_1() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_2 = 9;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_2() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_0 = 10;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_0() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_1 = 11;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_1() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_2 = 12;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_2() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_0 = 13;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_0() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_1 = 14;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_1() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_2 = 15;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_2() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_0 = 16;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_0() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_1 = 17;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_1() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_2 = 18;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_2() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_0 = 0;
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_1 = 1;
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_2 = 2;
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0;
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1;
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2;
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0;
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1;
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2;
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0;
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1;
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2;
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_P = 0;
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_P() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_B = 1;
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_I = 2;
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_I() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_P = 0;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_P() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_B = 1;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_I = 2;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_I() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_IDR = 5;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_IDR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0;
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1;
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0;
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1;
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2;
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkVideoDecodeH264PictureLayoutFlagsKHR;
     * }
     */
    public static final OfInt VkVideoDecodeH264PictureLayoutFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkRenderingFlagsKHR;
     * }
     */
    public static final OfInt VkRenderingFlagsKHR = JAVA_INT;
    public static MethodHandle vkCmdBeginRenderingKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$499.const$3,"vkCmdBeginRenderingKHR");
    }
    /**
     * {@snippet :
     * void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo);
     * }
     */
    public static void vkCmdBeginRenderingKHR(MemorySegment commandBuffer, MemorySegment pRenderingInfo) {
        var mh$ = vkCmdBeginRenderingKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pRenderingInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndRenderingKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$499.const$4,"vkCmdEndRenderingKHR");
    }
    /**
     * {@snippet :
     * void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdEndRenderingKHR(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRenderingKHR$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFeatures2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$0,"vkGetPhysicalDeviceFeatures2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
     * }
     */
    public static void vkGetPhysicalDeviceFeatures2KHR(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$1,"vkGetPhysicalDeviceProperties2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceProperties2KHR(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceFormatProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$2,"vkGetPhysicalDeviceFormatProperties2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties2KHR(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$3,"vkGetPhysicalDeviceImageFormatProperties2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties2KHR(MemorySegment physicalDevice, MemorySegment pImageFormatInfo, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$4,"vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$5,"vkGetPhysicalDeviceMemoryProperties2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties2KHR(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$502.const$0,"vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(MemorySegment physicalDevice, MemorySegment pFormatInfo, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties2KHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPeerMemoryFeatureFlagsKHR;
     * }
     */
    public static final OfInt VkPeerMemoryFeatureFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryAllocateFlagsKHR;
     * }
     */
    public static final OfInt VkMemoryAllocateFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetDeviceGroupPeerMemoryFeaturesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$502.const$4,"vkGetDeviceGroupPeerMemoryFeaturesKHR");
    }
    /**
     * {@snippet :
     * void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
     * }
     */
    public static void vkGetDeviceGroupPeerMemoryFeaturesKHR(MemorySegment device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, MemorySegment pPeerMemoryFeatures) {
        var mh$ = vkGetDeviceGroupPeerMemoryFeaturesKHR$MH();
        try {
            mh$.invokeExact(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDeviceMaskKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$502.const$5,"vkCmdSetDeviceMaskKHR");
    }
    /**
     * {@snippet :
     * void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask);
     * }
     */
    public static void vkCmdSetDeviceMaskKHR(MemorySegment commandBuffer, int deviceMask) {
        var mh$ = vkCmdSetDeviceMaskKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, deviceMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDispatchBaseKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$503.const$0,"vkCmdDispatchBaseKHR");
    }
    /**
     * {@snippet :
     * void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
     * }
     */
    public static void vkCmdDispatchBaseKHR(MemorySegment commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatchBaseKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkCommandPoolTrimFlagsKHR;
     * }
     */
    public static final OfInt VkCommandPoolTrimFlagsKHR = JAVA_INT;
    public static MethodHandle vkTrimCommandPoolKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$503.const$2,"vkTrimCommandPoolKHR");
    }
    /**
     * {@snippet :
     * void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
     * }
     */
    public static void vkTrimCommandPoolKHR(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkTrimCommandPoolKHR$MH();
        try {
            mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkEnumeratePhysicalDeviceGroupsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$503.const$4,"vkEnumeratePhysicalDeviceGroupsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
     * }
     */
    public static int vkEnumeratePhysicalDeviceGroupsKHR(MemorySegment instance, MemorySegment pPhysicalDeviceGroupCount, MemorySegment pPhysicalDeviceGroupProperties) {
        var mh$ = vkEnumeratePhysicalDeviceGroupsKHR$MH();
        try {
            return (int)mh$.invokeExact(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryHandleTypeFlagsKHR;
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryFeatureFlagsKHR;
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceExternalBufferPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$504.const$0,"vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalBufferPropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalBufferInfo, MemorySegment pExternalBufferProperties) {
        var mh$ = vkGetPhysicalDeviceExternalBufferPropertiesKHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetMemoryFdKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$507.const$1,"vkGetMemoryFdKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd);
     * }
     */
    public static int vkGetMemoryFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetMemoryFdKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetMemoryFdPropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$507.const$2,"vkGetMemoryFdPropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties);
     * }
     */
    public static int vkGetMemoryFdPropertiesKHR(MemorySegment device, int handleType, int fd, MemorySegment pMemoryFdProperties) {
        var mh$ = vkGetMemoryFdPropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, handleType, fd, pMemoryFdProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalSemaphoreHandleTypeFlagsKHR;
     * }
     */
    public static final OfInt VkExternalSemaphoreHandleTypeFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkExternalSemaphoreFeatureFlagsKHR;
     * }
     */
    public static final OfInt VkExternalSemaphoreFeatureFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceExternalSemaphorePropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$507.const$4,"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalSemaphoreInfo, MemorySegment pExternalSemaphoreProperties) {
        var mh$ = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSemaphoreImportFlagsKHR;
     * }
     */
    public static final OfInt VkSemaphoreImportFlagsKHR = JAVA_INT;
    public static MethodHandle vkImportSemaphoreFdKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$510.const$1,"vkImportSemaphoreFdKHR");
    }
    /**
     * {@snippet :
     * VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
     * }
     */
    public static int vkImportSemaphoreFdKHR(MemorySegment device, MemorySegment pImportSemaphoreFdInfo) {
        var mh$ = vkImportSemaphoreFdKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pImportSemaphoreFdInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSemaphoreFdKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$510.const$2,"vkGetSemaphoreFdKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd);
     * }
     */
    public static int vkGetSemaphoreFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetSemaphoreFdKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPushDescriptorSetKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$511.const$5,"vkCmdPushDescriptorSetKHR");
    }
    /**
     * {@snippet :
     * void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites);
     * }
     */
    public static void vkCmdPushDescriptorSetKHR(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int set, int descriptorWriteCount, MemorySegment pDescriptorWrites) {
        var mh$ = vkCmdPushDescriptorSetKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPushDescriptorSetWithTemplateKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$512.const$0,"vkCmdPushDescriptorSetWithTemplateKHR");
    }
    /**
     * {@snippet :
     * void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void* pData);
     * }
     */
    public static void vkCmdPushDescriptorSetWithTemplateKHR(MemorySegment commandBuffer, MemorySegment descriptorUpdateTemplate, MemorySegment layout, int set, MemorySegment pData) {
        var mh$ = vkCmdPushDescriptorSetWithTemplateKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkDescriptorUpdateTemplate_T* VkDescriptorUpdateTemplateKHR;
     * }
     */
    public static final AddressLayout VkDescriptorUpdateTemplateKHR = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int VkDescriptorUpdateTemplateCreateFlagsKHR;
     * }
     */
    public static final OfInt VkDescriptorUpdateTemplateCreateFlagsKHR = JAVA_INT;
    public static MethodHandle vkCreateDescriptorUpdateTemplateKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$2,"vkCreateDescriptorUpdateTemplateKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
     * }
     */
    public static int vkCreateDescriptorUpdateTemplateKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorUpdateTemplate) {
        var mh$ = vkCreateDescriptorUpdateTemplateKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDescriptorUpdateTemplateKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$3,"vkDestroyDescriptorUpdateTemplateKHR");
    }
    /**
     * {@snippet :
     * void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDescriptorUpdateTemplateKHR(MemorySegment device, MemorySegment descriptorUpdateTemplate, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorUpdateTemplateKHR$MH();
        try {
            mh$.invokeExact(device, descriptorUpdateTemplate, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUpdateDescriptorSetWithTemplateKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$4,"vkUpdateDescriptorSetWithTemplateKHR");
    }
    /**
     * {@snippet :
     * void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
     * }
     */
    public static void vkUpdateDescriptorSetWithTemplateKHR(MemorySegment device, MemorySegment descriptorSet, MemorySegment descriptorUpdateTemplate, MemorySegment pData) {
        var mh$ = vkUpdateDescriptorSetWithTemplateKHR$MH();
        try {
            mh$.invokeExact(device, descriptorSet, descriptorUpdateTemplate, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateRenderPass2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$515.const$3,"vkCreateRenderPass2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
     * }
     */
    public static int vkCreateRenderPass2KHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginRenderPass2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$515.const$4,"vkCmdBeginRenderPass2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo);
     * }
     */
    public static void vkCmdBeginRenderPass2KHR(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, MemorySegment pSubpassBeginInfo) {
        var mh$ = vkCmdBeginRenderPass2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdNextSubpass2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$515.const$5,"vkCmdNextSubpass2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo);
     * }
     */
    public static void vkCmdNextSubpass2KHR(MemorySegment commandBuffer, MemorySegment pSubpassBeginInfo, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdNextSubpass2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndRenderPass2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$516.const$0,"vkCmdEndRenderPass2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo);
     * }
     */
    public static void vkCmdEndRenderPass2KHR(MemorySegment commandBuffer, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdEndRenderPass2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pSubpassEndInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSwapchainStatusKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$0,"vkGetSwapchainStatusKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain);
     * }
     */
    public static int vkGetSwapchainStatusKHR(MemorySegment device, MemorySegment swapchain) {
        var mh$ = vkGetSwapchainStatusKHR$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalFenceHandleTypeFlagsKHR;
     * }
     */
    public static final OfInt VkExternalFenceHandleTypeFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkExternalFenceFeatureFlagsKHR;
     * }
     */
    public static final OfInt VkExternalFenceFeatureFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceExternalFencePropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$2,"vkGetPhysicalDeviceExternalFencePropertiesKHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
     * }
     */
    public static void vkGetPhysicalDeviceExternalFencePropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalFenceInfo, MemorySegment pExternalFenceProperties) {
        var mh$ = vkGetPhysicalDeviceExternalFencePropertiesKHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkFenceImportFlagsKHR;
     * }
     */
    public static final OfInt VkFenceImportFlagsKHR = JAVA_INT;
    public static MethodHandle vkImportFenceFdKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$5,"vkImportFenceFdKHR");
    }
    /**
     * {@snippet :
     * VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo);
     * }
     */
    public static int vkImportFenceFdKHR(MemorySegment device, MemorySegment pImportFenceFdInfo) {
        var mh$ = vkImportFenceFdKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pImportFenceFdInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetFenceFdKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$0,"vkGetFenceFdKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd);
     * }
     */
    public static int vkGetFenceFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetFenceFdKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0;
     * }
     */
    public static int VK_QUERY_SCOPE_COMMAND_BUFFER_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_RENDER_PASS_KHR = 1;
     * }
     */
    public static int VK_QUERY_SCOPE_RENDER_PASS_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_KHR = 2;
     * }
     */
    public static int VK_QUERY_SCOPE_COMMAND_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPerformanceCounterDescriptionFlagsKHR;
     * }
     */
    public static final OfInt VkPerformanceCounterDescriptionFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * enum VkAcquireProfilingLockFlagBitsKHR.VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkAcquireProfilingLockFlagsKHR;
     * }
     */
    public static final OfInt VkAcquireProfilingLockFlagsKHR = JAVA_INT;
    public static MethodHandle vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$4,"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
    }
    /**
     * {@snippet :
     * VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions);
     * }
     */
    public static int vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(MemorySegment physicalDevice, int queueFamilyIndex, MemorySegment pCounterCount, MemorySegment pCounters, MemorySegment pCounterDescriptions) {
        var mh$ = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$5,"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses);
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(MemorySegment physicalDevice, MemorySegment pPerformanceQueryCreateInfo, MemorySegment pNumPasses) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR$MH();
        try {
            mh$.invokeExact(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkAcquireProfilingLockKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$0,"vkAcquireProfilingLockKHR");
    }
    /**
     * {@snippet :
     * VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo);
     * }
     */
    public static int vkAcquireProfilingLockKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkAcquireProfilingLockKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkReleaseProfilingLockKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$1,"vkReleaseProfilingLockKHR");
    }
    /**
     * {@snippet :
     * void vkReleaseProfilingLockKHR(VkDevice device);
     * }
     */
    public static void vkReleaseProfilingLockKHR(MemorySegment device) {
        var mh$ = vkReleaseProfilingLockKHR$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilities2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$2,"vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilities2KHR(MemorySegment physicalDevice, MemorySegment pSurfaceInfo, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilities2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceSurfaceFormats2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$3,"vkGetPhysicalDeviceSurfaceFormats2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceFormats2KHR(MemorySegment physicalDevice, MemorySegment pSurfaceInfo, MemorySegment pSurfaceFormatCount, MemorySegment pSurfaceFormats) {
        var mh$ = vkGetPhysicalDeviceSurfaceFormats2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceDisplayProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$534.const$1,"vkGetPhysicalDeviceDisplayProperties2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties);
     * }
     */
    public static int vkGetPhysicalDeviceDisplayProperties2KHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayProperties2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceDisplayPlaneProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$534.const$2,"vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties);
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPlaneProperties2KHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPlaneProperties2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDisplayModeProperties2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$534.const$3,"vkGetDisplayModeProperties2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties);
     * }
     */
    public static int vkGetDisplayModeProperties2KHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetDisplayModeProperties2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, display, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDisplayPlaneCapabilities2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$534.const$4,"vkGetDisplayPlaneCapabilities2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities);
     * }
     */
    public static int vkGetDisplayPlaneCapabilities2KHR(MemorySegment physicalDevice, MemorySegment pDisplayPlaneInfo, MemorySegment pCapabilities) {
        var mh$ = vkGetDisplayPlaneCapabilities2KHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pDisplayPlaneInfo, pCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageMemoryRequirements2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$535.const$2,"vkGetImageMemoryRequirements2KHR");
    }
    /**
     * {@snippet :
     * void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetImageMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements2KHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferMemoryRequirements2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$535.const$3,"vkGetBufferMemoryRequirements2KHR");
    }
    /**
     * {@snippet :
     * void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetBufferMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements2KHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageSparseMemoryRequirements2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$535.const$4,"vkGetImageSparseMemoryRequirements2KHR");
    }
    /**
     * {@snippet :
     * void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
     * }
     */
    public static void vkGetImageSparseMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements2KHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkSamplerYcbcrConversion_T* VkSamplerYcbcrConversionKHR;
     * }
     */
    public static final AddressLayout VkSamplerYcbcrConversionKHR = RuntimeHelper.POINTER;
    public static MethodHandle vkCreateSamplerYcbcrConversionKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$536.const$1,"vkCreateSamplerYcbcrConversionKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
     * }
     */
    public static int vkCreateSamplerYcbcrConversionKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pYcbcrConversion) {
        var mh$ = vkCreateSamplerYcbcrConversionKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pYcbcrConversion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroySamplerYcbcrConversionKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$536.const$2,"vkDestroySamplerYcbcrConversionKHR");
    }
    /**
     * {@snippet :
     * void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroySamplerYcbcrConversionKHR(MemorySegment device, MemorySegment ycbcrConversion, MemorySegment pAllocator) {
        var mh$ = vkDestroySamplerYcbcrConversionKHR$MH();
        try {
            mh$.invokeExact(device, ycbcrConversion, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindBufferMemory2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$536.const$5,"vkBindBufferMemory2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos);
     * }
     */
    public static int vkBindBufferMemory2KHR(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindBufferMemory2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkBindImageMemory2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$537.const$0,"vkBindImageMemory2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos);
     * }
     */
    public static int vkBindImageMemory2KHR(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindImageMemory2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDescriptorSetLayoutSupportKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$537.const$2,"vkGetDescriptorSetLayoutSupportKHR");
    }
    /**
     * {@snippet :
     * void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);
     * }
     */
    public static void vkGetDescriptorSetLayoutSupportKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pSupport) {
        var mh$ = vkGetDescriptorSetLayoutSupportKHR$MH();
        try {
            mh$.invokeExact(device, pCreateInfo, pSupport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndirectCountKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$537.const$5,"vkCmdDrawIndirectCountKHR");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndirectCountKHR(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCountKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndexedIndirectCountKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$538.const$0,"vkCmdDrawIndexedIndirectCountKHR");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndexedIndirectCountKHR(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCountKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_420() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_422() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_444() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN = 1;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN_10() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_1_0 = 0;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_1_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_0 = 1;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_2_0() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_1 = 2;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_2_1() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_0 = 3;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_3_0() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_1 = 4;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_3_1() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_0 = 5;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_4_0() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_1 = 6;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_4_1() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_0 = 7;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_0() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_1 = 8;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_1() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_2 = 9;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_2() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_0 = 10;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_0() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_1 = 11;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_1() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_2 = 12;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_2() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_B = 0;
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_B() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_P = 1;
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_P() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_I = 2;
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_I() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_P = 0;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_P() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_B = 1;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_I = 2;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_I() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_IDR = 3;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_IDR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647;
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkResolveModeFlagsKHR;
     * }
     */
    public static final OfInt VkResolveModeFlagsKHR = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkSemaphoreWaitFlagsKHR;
     * }
     */
    public static final OfInt VkSemaphoreWaitFlagsKHR = JAVA_INT;
    public static MethodHandle vkGetSemaphoreCounterValueKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$1,"vkGetSemaphoreCounterValueKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue);
     * }
     */
    public static int vkGetSemaphoreCounterValueKHR(MemorySegment device, MemorySegment semaphore, MemorySegment pValue) {
        var mh$ = vkGetSemaphoreCounterValueKHR$MH();
        try {
            return (int)mh$.invokeExact(device, semaphore, pValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWaitSemaphoresKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$2,"vkWaitSemaphoresKHR");
    }
    /**
     * {@snippet :
     * VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout);
     * }
     */
    public static int vkWaitSemaphoresKHR(MemorySegment device, MemorySegment pWaitInfo, long timeout) {
        var mh$ = vkWaitSemaphoresKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pWaitInfo, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSignalSemaphoreKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$574.const$3,"vkSignalSemaphoreKHR");
    }
    /**
     * {@snippet :
     * VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo);
     * }
     */
    public static int vkSignalSemaphoreKHR(MemorySegment device, MemorySegment pSignalInfo) {
        var mh$ = vkSignalSemaphoreKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pSignalInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetPhysicalDeviceFragmentShadingRatesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$580.const$4,"vkGetPhysicalDeviceFragmentShadingRatesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);
     * }
     */
    public static int vkGetPhysicalDeviceFragmentShadingRatesKHR(MemorySegment physicalDevice, MemorySegment pFragmentShadingRateCount, MemorySegment pFragmentShadingRates) {
        var mh$ = vkGetPhysicalDeviceFragmentShadingRatesKHR$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetFragmentShadingRateKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$580.const$5,"vkCmdSetFragmentShadingRateKHR");
    }
    /**
     * {@snippet :
     * void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
     * }
     */
    public static void vkCmdSetFragmentShadingRateKHR(MemorySegment commandBuffer, MemorySegment pFragmentSize, MemorySegment combinerOps) {
        var mh$ = vkCmdSetFragmentShadingRateKHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pFragmentSize, combinerOps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkWaitForPresentKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$582.const$5,"vkWaitForPresentKHR");
    }
    /**
     * {@snippet :
     * VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout);
     * }
     */
    public static int vkWaitForPresentKHR(MemorySegment device, MemorySegment swapchain, long presentId, long timeout) {
        var mh$ = vkWaitForPresentKHR$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, presentId, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferDeviceAddressKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$583.const$3,"vkGetBufferDeviceAddressKHR");
    }
    /**
     * {@snippet :
     * VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo* pInfo);
     * }
     */
    public static long vkGetBufferDeviceAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddressKHR$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetBufferOpaqueCaptureAddressKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$583.const$4,"vkGetBufferOpaqueCaptureAddressKHR");
    }
    /**
     * {@snippet :
     * uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo* pInfo);
     * }
     */
    public static long vkGetBufferOpaqueCaptureAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferOpaqueCaptureAddressKHR$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceMemoryOpaqueCaptureAddressKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$583.const$5,"vkGetDeviceMemoryOpaqueCaptureAddressKHR");
    }
    /**
     * {@snippet :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);
     * }
     */
    public static long vkGetDeviceMemoryOpaqueCaptureAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetDeviceMemoryOpaqueCaptureAddressKHR$MH();
        try {
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkDeferredOperationKHR_T* VkDeferredOperationKHR;
     * }
     */
    public static final AddressLayout VkDeferredOperationKHR = RuntimeHelper.POINTER;
    public static MethodHandle vkCreateDeferredOperationKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$584.const$5,"vkCreateDeferredOperationKHR");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation);
     * }
     */
    public static int vkCreateDeferredOperationKHR(MemorySegment device, MemorySegment pAllocator, MemorySegment pDeferredOperation) {
        var mh$ = vkCreateDeferredOperationKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pAllocator, pDeferredOperation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDeferredOperationKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$0,"vkDestroyDeferredOperationKHR");
    }
    /**
     * {@snippet :
     * void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDeferredOperationKHR(MemorySegment device, MemorySegment operation, MemorySegment pAllocator) {
        var mh$ = vkDestroyDeferredOperationKHR$MH();
        try {
            mh$.invokeExact(device, operation, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeferredOperationMaxConcurrencyKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$1,"vkGetDeferredOperationMaxConcurrencyKHR");
    }
    /**
     * {@snippet :
     * uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation);
     * }
     */
    public static int vkGetDeferredOperationMaxConcurrencyKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkGetDeferredOperationMaxConcurrencyKHR$MH();
        try {
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeferredOperationResultKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$2,"vkGetDeferredOperationResultKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation);
     * }
     */
    public static int vkGetDeferredOperationResultKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkGetDeferredOperationResultKHR$MH();
        try {
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDeferredOperationJoinKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$585.const$3,"vkDeferredOperationJoinKHR");
    }
    /**
     * {@snippet :
     * VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation);
     * }
     */
    public static int vkDeferredOperationJoinKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkDeferredOperationJoinKHR$MH();
        try {
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0;
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1;
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2;
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3;
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647;
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetPipelineExecutablePropertiesKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$4,"vkGetPipelineExecutablePropertiesKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties);
     * }
     */
    public static int vkGetPipelineExecutablePropertiesKHR(MemorySegment device, MemorySegment pPipelineInfo, MemorySegment pExecutableCount, MemorySegment pProperties) {
        var mh$ = vkGetPipelineExecutablePropertiesKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pPipelineInfo, pExecutableCount, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPipelineExecutableStatisticsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$591.const$5,"vkGetPipelineExecutableStatisticsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics);
     * }
     */
    public static int vkGetPipelineExecutableStatisticsKHR(MemorySegment device, MemorySegment pExecutableInfo, MemorySegment pStatisticCount, MemorySegment pStatistics) {
        var mh$ = vkGetPipelineExecutableStatisticsKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pExecutableInfo, pStatisticCount, pStatistics);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPipelineExecutableInternalRepresentationsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$592.const$0,"vkGetPipelineExecutableInternalRepresentationsKHR");
    }
    /**
     * {@snippet :
     * VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);
     * }
     */
    public static int vkGetPipelineExecutableInternalRepresentationsKHR(MemorySegment device, MemorySegment pExecutableInfo, MemorySegment pInternalRepresentationCount, MemorySegment pInternalRepresentations) {
        var mh$ = vkGetPipelineExecutableInternalRepresentationsKHR$MH();
        try {
            return (int)mh$.invokeExact(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkMemoryUnmapFlagsKHR;
     * }
     */
    public static final OfInt VkMemoryUnmapFlagsKHR = JAVA_INT;
    public static MethodHandle vkMapMemory2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$3,"vkMapMemory2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData);
     * }
     */
    public static int vkMapMemory2KHR(MemorySegment device, MemorySegment pMemoryMapInfo, MemorySegment ppData) {
        var mh$ = vkMapMemory2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, pMemoryMapInfo, ppData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkUnmapMemory2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$594.const$4,"vkUnmapMemory2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo);
     * }
     */
    public static int vkUnmapMemory2KHR(MemorySegment device, MemorySegment pMemoryUnmapInfo) {
        var mh$ = vkUnmapMemory2KHR$MH();
        try {
            return (int)mh$.invokeExact(device, pMemoryUnmapInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long VkPipelineStageFlags2KHR;
     * }
     */
    public static final OfLong VkPipelineStageFlags2KHR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkPipelineStageFlagBits2KHR;
     * }
     */
    public static final OfLong VkPipelineStageFlagBits2KHR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkAccessFlags2KHR;
     * }
     */
    public static final OfLong VkAccessFlags2KHR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkAccessFlagBits2KHR;
     * }
     */
    public static final OfLong VkAccessFlagBits2KHR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int VkSubmitFlagsKHR;
     * }
     */
    public static final OfInt VkSubmitFlagsKHR = JAVA_INT;
    public static MethodHandle vkCmdSetEvent2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$2,"vkCmdSetEvent2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo);
     * }
     */
    public static void vkCmdSetEvent2KHR(MemorySegment commandBuffer, MemorySegment event, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdSetEvent2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, event, pDependencyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResetEvent2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$3,"vkCmdResetEvent2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
     * }
     */
    public static void vkCmdResetEvent2KHR(MemorySegment commandBuffer, MemorySegment event, long stageMask) {
        var mh$ = vkCmdResetEvent2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWaitEvents2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$4,"vkCmdWaitEvents2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos);
     * }
     */
    public static void vkCmdWaitEvents2KHR(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, MemorySegment pDependencyInfos) {
        var mh$ = vkCmdWaitEvents2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdPipelineBarrier2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$600.const$5,"vkCmdPipelineBarrier2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo);
     * }
     */
    public static void vkCmdPipelineBarrier2KHR(MemorySegment commandBuffer, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdPipelineBarrier2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pDependencyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteTimestamp2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$0,"vkCmdWriteTimestamp2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
     * }
     */
    public static void vkCmdWriteTimestamp2KHR(MemorySegment commandBuffer, long stage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, stage, queryPool, query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueSubmit2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$1,"vkQueueSubmit2KHR");
    }
    /**
     * {@snippet :
     * VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence);
     * }
     */
    public static int vkQueueSubmit2KHR(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit2KHR$MH();
        try {
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdWriteBufferMarker2AMD$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$2,"vkCmdWriteBufferMarker2AMD");
    }
    /**
     * {@snippet :
     * void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
     * }
     */
    public static void vkCmdWriteBufferMarker2AMD(MemorySegment commandBuffer, long stage, MemorySegment dstBuffer, long dstOffset, int marker) {
        var mh$ = vkCmdWriteBufferMarker2AMD$MH();
        try {
            mh$.invokeExact(commandBuffer, stage, dstBuffer, dstOffset, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetQueueCheckpointData2NV$MH() {
        return RuntimeHelper.requireNonNull(constants$601.const$3,"vkGetQueueCheckpointData2NV");
    }
    /**
     * {@snippet :
     * void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData);
     * }
     */
    public static void vkGetQueueCheckpointData2NV(MemorySegment queue, MemorySegment pCheckpointDataCount, MemorySegment pCheckpointData) {
        var mh$ = vkGetQueueCheckpointData2NV$MH();
        try {
            mh$.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBuffer2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$605.const$5,"vkCmdCopyBuffer2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo);
     * }
     */
    public static void vkCmdCopyBuffer2KHR(MemorySegment commandBuffer, MemorySegment pCopyBufferInfo) {
        var mh$ = vkCmdCopyBuffer2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImage2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$0,"vkCmdCopyImage2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo);
     * }
     */
    public static void vkCmdCopyImage2KHR(MemorySegment commandBuffer, MemorySegment pCopyImageInfo) {
        var mh$ = vkCmdCopyImage2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyBufferToImage2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$1,"vkCmdCopyBufferToImage2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);
     * }
     */
    public static void vkCmdCopyBufferToImage2KHR(MemorySegment commandBuffer, MemorySegment pCopyBufferToImageInfo) {
        var mh$ = vkCmdCopyBufferToImage2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyBufferToImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCopyImageToBuffer2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$2,"vkCmdCopyImageToBuffer2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);
     * }
     */
    public static void vkCmdCopyImageToBuffer2KHR(MemorySegment commandBuffer, MemorySegment pCopyImageToBufferInfo) {
        var mh$ = vkCmdCopyImageToBuffer2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pCopyImageToBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBlitImage2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$3,"vkCmdBlitImage2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo);
     * }
     */
    public static void vkCmdBlitImage2KHR(MemorySegment commandBuffer, MemorySegment pBlitImageInfo) {
        var mh$ = vkCmdBlitImage2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pBlitImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdResolveImage2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$606.const$4,"vkCmdResolveImage2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo);
     * }
     */
    public static void vkCmdResolveImage2KHR(MemorySegment commandBuffer, MemorySegment pResolveImageInfo) {
        var mh$ = vkCmdResolveImage2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, pResolveImageInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long VkFormatFeatureFlags2KHR;
     * }
     */
    public static final OfLong VkFormatFeatureFlags2KHR = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long VkFormatFeatureFlagBits2KHR;
     * }
     */
    public static final OfLong VkFormatFeatureFlagBits2KHR = JAVA_LONG;
    public static MethodHandle vkCmdTraceRaysIndirect2KHR$MH() {
        return RuntimeHelper.requireNonNull(constants$610.const$4,"vkCmdTraceRaysIndirect2KHR");
    }
    /**
     * {@snippet :
     * void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress);
     * }
     */
    public static void vkCmdTraceRaysIndirect2KHR(MemorySegment commandBuffer, long indirectDeviceAddress) {
        var mh$ = vkCmdTraceRaysIndirect2KHR$MH();
        try {
            mh$.invokeExact(commandBuffer, indirectDeviceAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceBufferMemoryRequirementsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$611.const$2,"vkGetDeviceBufferMemoryRequirementsKHR");
    }
    /**
     * {@snippet :
     * void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetDeviceBufferMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceBufferMemoryRequirementsKHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceImageMemoryRequirementsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$611.const$3,"vkGetDeviceImageMemoryRequirementsKHR");
    }
    /**
     * {@snippet :
     * void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
     * }
     */
    public static void vkGetDeviceImageMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceImageMemoryRequirementsKHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetDeviceImageSparseMemoryRequirementsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$611.const$4,"vkGetDeviceImageSparseMemoryRequirementsKHR");
    }
    /**
     * {@snippet :
     * void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
     * }
     */
    public static void vkGetDeviceImageSparseMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetDeviceImageSparseMemoryRequirementsKHR$MH();
        try {
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkDebugReportCallbackEXT_T* VkDebugReportCallbackEXT;
     * }
     */
    public static final AddressLayout VkDebugReportCallbackEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT() {
        return (int)1000156000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT() {
        return (int)1000085000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT() {
        return (int)1000029000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT() {
        return (int)1000029001L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT() {
        return (int)1000150000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT() {
        return (int)1000165000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT() {
        return (int)1000366000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT() {
        return (int)1000085000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT() {
        return (int)1000156000L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1;
     * }
     */
    public static int VK_DEBUG_REPORT_INFORMATION_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT = 2;
     * }
     */
    public static int VK_DEBUG_REPORT_WARNING_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4;
     * }
     */
    public static int VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT = 8;
     * }
     */
    public static int VK_DEBUG_REPORT_ERROR_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16;
     * }
     */
    public static int VK_DEBUG_REPORT_DEBUG_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDebugReportFlagsEXT;
     * }
     */
    public static final OfInt VkDebugReportFlagsEXT = JAVA_INT;
    public static MethodHandle vkCreateDebugReportCallbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$614.const$5,"vkCreateDebugReportCallbackEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);
     * }
     */
    public static int vkCreateDebugReportCallbackEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pCallback) {
        var mh$ = vkCreateDebugReportCallbackEXT$MH();
        try {
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDebugReportCallbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$0,"vkDestroyDebugReportCallbackEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDebugReportCallbackEXT(MemorySegment instance, MemorySegment callback, MemorySegment pAllocator) {
        var mh$ = vkDestroyDebugReportCallbackEXT$MH();
        try {
            mh$.invokeExact(instance, callback, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDebugReportMessageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$615.const$1,"vkDebugReportMessageEXT");
    }
    /**
     * {@snippet :
     * void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, char* pLayerPrefix, char* pMessage);
     * }
     */
    public static void vkDebugReportMessageEXT(MemorySegment instance, int flags, int objectType, long object, long location, int messageCode, MemorySegment pLayerPrefix, MemorySegment pMessage) {
        var mh$ = vkDebugReportMessageEXT$MH();
        try {
            mh$.invokeExact(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD = 0;
     * }
     */
    public static int VK_RASTERIZATION_ORDER_STRICT_AMD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD = 1;
     * }
     */
    public static int VK_RASTERIZATION_ORDER_RELAXED_AMD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647;
     * }
     */
    public static int VK_RASTERIZATION_ORDER_MAX_ENUM_AMD() {
        return (int)2147483647L;
    }
    public static MethodHandle vkDebugMarkerSetObjectTagEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$619.const$5,"vkDebugMarkerSetObjectTagEXT");
    }
    /**
     * {@snippet :
     * VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo);
     * }
     */
    public static int vkDebugMarkerSetObjectTagEXT(MemorySegment device, MemorySegment pTagInfo) {
        var mh$ = vkDebugMarkerSetObjectTagEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pTagInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDebugMarkerSetObjectNameEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$0,"vkDebugMarkerSetObjectNameEXT");
    }
    /**
     * {@snippet :
     * VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo);
     * }
     */
    public static int vkDebugMarkerSetObjectNameEXT(MemorySegment device, MemorySegment pNameInfo) {
        var mh$ = vkDebugMarkerSetObjectNameEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pNameInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDebugMarkerBeginEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$1,"vkCmdDebugMarkerBeginEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
     * }
     */
    public static void vkCmdDebugMarkerBeginEXT(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdDebugMarkerBeginEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDebugMarkerEndEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$2,"vkCmdDebugMarkerEndEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdDebugMarkerEndEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdDebugMarkerEndEXT$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDebugMarkerInsertEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$620.const$3,"vkCmdDebugMarkerInsertEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
     * }
     */
    public static void vkCmdDebugMarkerInsertEXT(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdDebugMarkerInsertEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineRasterizationStateStreamCreateFlagsEXT;
     * }
     */
    public static final OfInt VkPipelineRasterizationStateStreamCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCmdBindTransformFeedbackBuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$4,"vkCmdBindTransformFeedbackBuffersEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes);
     * }
     */
    public static void vkCmdBindTransformFeedbackBuffersEXT(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes) {
        var mh$ = vkCmdBindTransformFeedbackBuffersEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$628.const$5,"vkCmdBeginTransformFeedbackEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets);
     * }
     */
    public static void vkCmdBeginTransformFeedbackEXT(MemorySegment commandBuffer, int firstCounterBuffer, int counterBufferCount, MemorySegment pCounterBuffers, MemorySegment pCounterBufferOffsets) {
        var mh$ = vkCmdBeginTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$0,"vkCmdEndTransformFeedbackEXT");
    }
    /**
     * {@snippet :
     * void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets);
     * }
     */
    public static void vkCmdEndTransformFeedbackEXT(MemorySegment commandBuffer, int firstCounterBuffer, int counterBufferCount, MemorySegment pCounterBuffers, MemorySegment pCounterBufferOffsets) {
        var mh$ = vkCmdEndTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginQueryIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$1,"vkCmdBeginQueryIndexedEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
     * }
     */
    public static void vkCmdBeginQueryIndexedEXT(MemorySegment commandBuffer, MemorySegment queryPool, int query, int flags, int index) {
        var mh$ = vkCmdBeginQueryIndexedEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, query, flags, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndQueryIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$2,"vkCmdEndQueryIndexedEXT");
    }
    /**
     * {@snippet :
     * void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
     * }
     */
    public static void vkCmdEndQueryIndexedEXT(MemorySegment commandBuffer, MemorySegment queryPool, int query, int index) {
        var mh$ = vkCmdEndQueryIndexedEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, queryPool, query, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndirectByteCountEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$629.const$3,"vkCmdDrawIndirectByteCountEXT");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);
     * }
     */
    public static void vkCmdDrawIndirectByteCountEXT(MemorySegment commandBuffer, int instanceCount, int firstInstance, MemorySegment counterBuffer, long counterBufferOffset, int counterOffset, int vertexStride) {
        var mh$ = vkCmdDrawIndirectByteCountEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkCuModuleNVX_T* VkCuModuleNVX;
     * }
     */
    public static final AddressLayout VkCuModuleNVX = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct VkCuFunctionNVX_T* VkCuFunctionNVX;
     * }
     */
    public static final AddressLayout VkCuFunctionNVX = RuntimeHelper.POINTER;
    public static MethodHandle vkCreateCuModuleNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$634.const$4,"vkCreateCuModuleNVX");
    }
    /**
     * {@snippet :
     * VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule);
     * }
     */
    public static int vkCreateCuModuleNVX(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pModule) {
        var mh$ = vkCreateCuModuleNVX$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateCuFunctionNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$634.const$5,"vkCreateCuFunctionNVX");
    }
    /**
     * {@snippet :
     * VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction);
     * }
     */
    public static int vkCreateCuFunctionNVX(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFunction) {
        var mh$ = vkCreateCuFunctionNVX$MH();
        try {
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyCuModuleNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$635.const$0,"vkDestroyCuModuleNVX");
    }
    /**
     * {@snippet :
     * void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyCuModuleNVX(MemorySegment device, MemorySegment module, MemorySegment pAllocator) {
        var mh$ = vkDestroyCuModuleNVX$MH();
        try {
            mh$.invokeExact(device, module, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyCuFunctionNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$635.const$1,"vkDestroyCuFunctionNVX");
    }
    /**
     * {@snippet :
     * void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyCuFunctionNVX(MemorySegment device, MemorySegment function, MemorySegment pAllocator) {
        var mh$ = vkDestroyCuFunctionNVX$MH();
        try {
            mh$.invokeExact(device, function, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdCuLaunchKernelNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$635.const$2,"vkCmdCuLaunchKernelNVX");
    }
    /**
     * {@snippet :
     * void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo);
     * }
     */
    public static void vkCmdCuLaunchKernelNVX(MemorySegment commandBuffer, MemorySegment pLaunchInfo) {
        var mh$ = vkCmdCuLaunchKernelNVX$MH();
        try {
            mh$.invokeExact(commandBuffer, pLaunchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageViewHandleNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$637.const$4,"vkGetImageViewHandleNVX");
    }
    /**
     * {@snippet :
     * uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX* pInfo);
     * }
     */
    public static int vkGetImageViewHandleNVX(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetImageViewHandleNVX$MH();
        try {
            return (int)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetImageViewAddressNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$637.const$5,"vkGetImageViewAddressNVX");
    }
    /**
     * {@snippet :
     * VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties);
     * }
     */
    public static int vkGetImageViewAddressNVX(MemorySegment device, MemorySegment imageView, MemorySegment pProperties) {
        var mh$ = vkGetImageViewAddressNVX$MH();
        try {
            return (int)mh$.invokeExact(device, imageView, pProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndirectCountAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$2,"vkCmdDrawIndirectCountAMD");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndirectCountAMD(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCountAMD$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdDrawIndexedIndirectCountAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$638.const$3,"vkCmdDrawIndexedIndirectCountAMD");
    }
    /**
     * {@snippet :
     * void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
     * }
     */
    public static void vkCmdDrawIndexedIndirectCountAMD(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCountAMD$MH();
        try {
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0;
     * }
     */
    public static int VK_SHADER_INFO_TYPE_STATISTICS_AMD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD = 1;
     * }
     */
    public static int VK_SHADER_INFO_TYPE_BINARY_AMD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2;
     * }
     */
    public static int VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647;
     * }
     */
    public static int VK_SHADER_INFO_TYPE_MAX_ENUM_AMD() {
        return (int)2147483647L;
    }
    public static MethodHandle vkGetShaderInfoAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$641.const$5,"vkGetShaderInfoAMD");
    }
    /**
     * {@snippet :
     * VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo);
     * }
     */
    public static int vkGetShaderInfoAMD(MemorySegment device, MemorySegment pipeline, int shaderStage, int infoType, MemorySegment pInfoSize, MemorySegment pInfo) {
        var mh$ = vkGetShaderInfoAMD$MH();
        try {
            return (int)mh$.invokeExact(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryHandleTypeFlagsNV;
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkExternalMemoryFeatureFlagsNV;
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlagsNV = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceExternalImageFormatPropertiesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$643.const$5,"vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);
     * }
     */
    public static int vkGetPhysicalDeviceExternalImageFormatPropertiesNV(MemorySegment physicalDevice, int format, int type, int tiling, int usage, int flags, int externalHandleType, MemorySegment pExternalImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceExternalImageFormatPropertiesNV$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT = 0;
     * }
     */
    public static int VK_VALIDATION_CHECK_ALL_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT = 1;
     * }
     */
    public static int VK_VALIDATION_CHECK_SHADERS_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_VALIDATION_CHECK_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1;
     * }
     */
    public static int VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkConditionalRenderingFlagsEXT;
     * }
     */
    public static final OfInt VkConditionalRenderingFlagsEXT = JAVA_INT;
    public static MethodHandle vkCmdBeginConditionalRenderingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$653.const$2,"vkCmdBeginConditionalRenderingEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);
     * }
     */
    public static void vkCmdBeginConditionalRenderingEXT(MemorySegment commandBuffer, MemorySegment pConditionalRenderingBegin) {
        var mh$ = vkCmdBeginConditionalRenderingEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pConditionalRenderingBegin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndConditionalRenderingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$653.const$3,"vkCmdEndConditionalRenderingEXT");
    }
    /**
     * {@snippet :
     * void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdEndConditionalRenderingEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndConditionalRenderingEXT$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetViewportWScalingNV$MH() {
        return RuntimeHelper.requireNonNull(constants$655.const$2,"vkCmdSetViewportWScalingNV");
    }
    /**
     * {@snippet :
     * void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings);
     * }
     */
    public static void vkCmdSetViewportWScalingNV(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pViewportWScalings) {
        var mh$ = vkCmdSetViewportWScalingNV$MH();
        try {
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkReleaseDisplayEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$655.const$4,"vkReleaseDisplayEXT");
    }
    /**
     * {@snippet :
     * VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
     * }
     */
    public static int vkReleaseDisplayEXT(MemorySegment physicalDevice, MemorySegment display) {
        var mh$ = vkReleaseDisplayEXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1;
     * }
     */
    public static int VK_SURFACE_COUNTER_VBLANK_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT = 1;
     * }
     */
    public static int VK_SURFACE_COUNTER_VBLANK_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkSurfaceCounterFlagsEXT;
     * }
     */
    public static final OfInt VkSurfaceCounterFlagsEXT = JAVA_INT;
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilities2EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$657.const$5,"vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities);
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilities2EXT(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilities2EXT$MH();
        try {
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT = 0;
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_OFF_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1;
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_SUSPEND_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT = 2;
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_ON_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0;
     * }
     */
    public static int VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0;
     * }
     */
    public static int VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    public static MethodHandle vkDisplayPowerControlEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$661.const$2,"vkDisplayPowerControlEXT");
    }
    /**
     * {@snippet :
     * VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo);
     * }
     */
    public static int vkDisplayPowerControlEXT(MemorySegment device, MemorySegment display, MemorySegment pDisplayPowerInfo) {
        var mh$ = vkDisplayPowerControlEXT$MH();
        try {
            return (int)mh$.invokeExact(device, display, pDisplayPowerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkRegisterDeviceEventEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$661.const$3,"vkRegisterDeviceEventEXT");
    }
    /**
     * {@snippet :
     * VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
     * }
     */
    public static int vkRegisterDeviceEventEXT(MemorySegment device, MemorySegment pDeviceEventInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkRegisterDeviceEventEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pDeviceEventInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkRegisterDisplayEventEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$661.const$4,"vkRegisterDisplayEventEXT");
    }
    /**
     * {@snippet :
     * VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
     * }
     */
    public static int vkRegisterDisplayEventEXT(MemorySegment device, MemorySegment display, MemorySegment pDisplayEventInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkRegisterDisplayEventEXT$MH();
        try {
            return (int)mh$.invokeExact(device, display, pDisplayEventInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetSwapchainCounterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$661.const$5,"vkGetSwapchainCounterEXT");
    }
    /**
     * {@snippet :
     * VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue);
     * }
     */
    public static int vkGetSwapchainCounterEXT(MemorySegment device, MemorySegment swapchain, int counter, MemorySegment pCounterValue) {
        var mh$ = vkGetSwapchainCounterEXT$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, counter, pCounterValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetRefreshCycleDurationGOOGLE$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$0,"vkGetRefreshCycleDurationGOOGLE");
    }
    /**
     * {@snippet :
     * VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
     * }
     */
    public static int vkGetRefreshCycleDurationGOOGLE(MemorySegment device, MemorySegment swapchain, MemorySegment pDisplayTimingProperties) {
        var mh$ = vkGetRefreshCycleDurationGOOGLE$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, pDisplayTimingProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPastPresentationTimingGOOGLE$MH() {
        return RuntimeHelper.requireNonNull(constants$665.const$1,"vkGetPastPresentationTimingGOOGLE");
    }
    /**
     * {@snippet :
     * VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);
     * }
     */
    public static int vkGetPastPresentationTimingGOOGLE(MemorySegment device, MemorySegment swapchain, MemorySegment pPresentationTimingCount, MemorySegment pPresentationTimings) {
        var mh$ = vkGetPastPresentationTimingGOOGLE$MH();
        try {
            return (int)mh$.invokeExact(device, swapchain, pPresentationTimingCount, pPresentationTimings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647;
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineViewportSwizzleStateCreateFlagsNV;
     * }
     */
    public static final OfInt VkPipelineViewportSwizzleStateCreateFlagsNV = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0;
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1;
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineDiscardRectangleStateCreateFlagsEXT;
     * }
     */
    public static final OfInt VkPipelineDiscardRectangleStateCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkCmdSetDiscardRectangleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$1,"vkCmdSetDiscardRectangleEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles);
     * }
     */
    public static void vkCmdSetDiscardRectangleEXT(MemorySegment commandBuffer, int firstDiscardRectangle, int discardRectangleCount, MemorySegment pDiscardRectangles) {
        var mh$ = vkCmdSetDiscardRectangleEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDiscardRectangleEnableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$2,"vkCmdSetDiscardRectangleEnableEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable);
     * }
     */
    public static void vkCmdSetDiscardRectangleEnableEXT(MemorySegment commandBuffer, int discardRectangleEnable) {
        var mh$ = vkCmdSetDiscardRectangleEnableEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, discardRectangleEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetDiscardRectangleModeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$670.const$3,"vkCmdSetDiscardRectangleModeEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);
     * }
     */
    public static void vkCmdSetDiscardRectangleModeEXT(MemorySegment commandBuffer, int discardRectangleMode) {
        var mh$ = vkCmdSetDiscardRectangleModeEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, discardRectangleMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0;
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1;
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2;
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineRasterizationConservativeStateCreateFlagsEXT;
     * }
     */
    public static final OfInt VkPipelineRasterizationConservativeStateCreateFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
     * }
     */
    public static final OfInt VkPipelineRasterizationDepthClipStateCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkSetHdrMetadataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$677.const$0,"vkSetHdrMetadataEXT");
    }
    /**
     * {@snippet :
     * void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata);
     * }
     */
    public static void vkSetHdrMetadataEXT(MemorySegment device, int swapchainCount, MemorySegment pSwapchains, MemorySegment pMetadata) {
        var mh$ = vkSetHdrMetadataEXT$MH();
        try {
            mh$.invokeExact(device, swapchainCount, pSwapchains, pMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct VkDebugUtilsMessengerEXT_T* VkDebugUtilsMessengerEXT;
     * }
     */
    public static final AddressLayout VkDebugUtilsMessengerEXT = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned int VkDebugUtilsMessengerCallbackDataFlagsEXT;
     * }
     */
    public static final OfInt VkDebugUtilsMessengerCallbackDataFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkDebugUtilsMessageTypeFlagsEXT;
     * }
     */
    public static final OfInt VkDebugUtilsMessageTypeFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDebugUtilsMessageSeverityFlagsEXT;
     * }
     */
    public static final OfInt VkDebugUtilsMessageSeverityFlagsEXT = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int VkDebugUtilsMessengerCreateFlagsEXT;
     * }
     */
    public static final OfInt VkDebugUtilsMessengerCreateFlagsEXT = JAVA_INT;
    public static MethodHandle vkSetDebugUtilsObjectNameEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$0,"vkSetDebugUtilsObjectNameEXT");
    }
    /**
     * {@snippet :
     * VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo);
     * }
     */
    public static int vkSetDebugUtilsObjectNameEXT(MemorySegment device, MemorySegment pNameInfo) {
        var mh$ = vkSetDebugUtilsObjectNameEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pNameInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSetDebugUtilsObjectTagEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$1,"vkSetDebugUtilsObjectTagEXT");
    }
    /**
     * {@snippet :
     * VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo);
     * }
     */
    public static int vkSetDebugUtilsObjectTagEXT(MemorySegment device, MemorySegment pTagInfo) {
        var mh$ = vkSetDebugUtilsObjectTagEXT$MH();
        try {
            return (int)mh$.invokeExact(device, pTagInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueBeginDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$2,"vkQueueBeginDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo);
     * }
     */
    public static void vkQueueBeginDebugUtilsLabelEXT(MemorySegment queue, MemorySegment pLabelInfo) {
        var mh$ = vkQueueBeginDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(queue, pLabelInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueEndDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$3,"vkQueueEndDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkQueueEndDebugUtilsLabelEXT(VkQueue queue);
     * }
     */
    public static void vkQueueEndDebugUtilsLabelEXT(MemorySegment queue) {
        var mh$ = vkQueueEndDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkQueueInsertDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$4,"vkQueueInsertDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo);
     * }
     */
    public static void vkQueueInsertDebugUtilsLabelEXT(MemorySegment queue, MemorySegment pLabelInfo) {
        var mh$ = vkQueueInsertDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(queue, pLabelInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdBeginDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$686.const$5,"vkCmdBeginDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo);
     * }
     */
    public static void vkCmdBeginDebugUtilsLabelEXT(MemorySegment commandBuffer, MemorySegment pLabelInfo) {
        var mh$ = vkCmdBeginDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pLabelInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdEndDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$0,"vkCmdEndDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer);
     * }
     */
    public static void vkCmdEndDebugUtilsLabelEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdInsertDebugUtilsLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$1,"vkCmdInsertDebugUtilsLabelEXT");
    }
    /**
     * {@snippet :
     * void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo);
     * }
     */
    public static void vkCmdInsertDebugUtilsLabelEXT(MemorySegment commandBuffer, MemorySegment pLabelInfo) {
        var mh$ = vkCmdInsertDebugUtilsLabelEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pLabelInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCreateDebugUtilsMessengerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$2,"vkCreateDebugUtilsMessengerEXT");
    }
    /**
     * {@snippet :
     * VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger);
     * }
     */
    public static int vkCreateDebugUtilsMessengerEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pMessenger) {
        var mh$ = vkCreateDebugUtilsMessengerEXT$MH();
        try {
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pMessenger);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkDestroyDebugUtilsMessengerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$3,"vkDestroyDebugUtilsMessengerEXT");
    }
    /**
     * {@snippet :
     * void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator);
     * }
     */
    public static void vkDestroyDebugUtilsMessengerEXT(MemorySegment instance, MemorySegment messenger, MemorySegment pAllocator) {
        var mh$ = vkDestroyDebugUtilsMessengerEXT$MH();
        try {
            mh$.invokeExact(instance, messenger, pAllocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkSubmitDebugUtilsMessageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$687.const$4,"vkSubmitDebugUtilsMessageEXT");
    }
    /**
     * {@snippet :
     * void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);
     * }
     */
    public static void vkSubmitDebugUtilsMessageEXT(MemorySegment instance, int messageSeverity, int messageTypes, MemorySegment pCallbackData) {
        var mh$ = vkSubmitDebugUtilsMessageEXT$MH();
        try {
            mh$.invokeExact(instance, messageSeverity, messageTypes, pCallbackData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkCmdSetSampleLocationsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$4,"vkCmdSetSampleLocationsEXT");
    }
    /**
     * {@snippet :
     * void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo);
     * }
     */
    public static void vkCmdSetSampleLocationsEXT(MemorySegment commandBuffer, MemorySegment pSampleLocationsInfo) {
        var mh$ = vkCmdSetSampleLocationsEXT$MH();
        try {
            mh$.invokeExact(commandBuffer, pSampleLocationsInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vkGetPhysicalDeviceMultisamplePropertiesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$693.const$5,"vkGetPhysicalDeviceMultisamplePropertiesEXT");
    }
    /**
     * {@snippet :
     * void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties);
     * }
     */
    public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(MemorySegment physicalDevice, int samples, MemorySegment pMultisampleProperties) {
        var mh$ = vkGetPhysicalDeviceMultisamplePropertiesEXT$MH();
        try {
            mh$.invokeExact(physicalDevice, samples, pMultisampleProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0;
     * }
     */
    public static int VK_BLEND_OVERLAP_UNCORRELATED_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT = 1;
     * }
     */
    public static int VK_BLEND_OVERLAP_DISJOINT_EXT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT = 2;
     * }
     */
    public static int VK_BLEND_OVERLAP_CONJOINT_EXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647;
     * }
     */
    public static int VK_BLEND_OVERLAP_MAX_ENUM_EXT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * typedef unsigned int VkPipelineCoverageToColorStateCreateFlagsNV;
     * }
     */
    public static final OfInt VkPipelineCoverageToColorStateCreateFlagsNV = JAVA_INT;
}


